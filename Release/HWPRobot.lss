
HWPRobot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800200  0000494e  000049e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000494e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000076b  00800264  00800264  00004a46  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004a46  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004aa4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005a0  00000000  00000000  00004ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007749  00000000  00000000  00005088  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002b33  00000000  00000000  0000c7d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003b56  00000000  00000000  0000f304  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d58  00000000  00000000  00012e5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001d05  00000000  00000000  00013bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000510c  00000000  00000000  000158b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000688  00000000  00000000  0001a9c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 33 01 	jmp	0x266	; 0x266 <__ctors_end>
       4:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
       8:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
       c:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      10:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      14:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      18:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      1c:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      20:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      24:	0c 94 05 03 	jmp	0x60a	; 0x60a <__vector_9>
      28:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      2c:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      30:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      34:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      38:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      3c:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      40:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      44:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      48:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      4c:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      50:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      54:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      58:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      5c:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      60:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      64:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      68:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      6c:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      70:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      74:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__vector_29>
      78:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      7c:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      80:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      84:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      88:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      8c:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      90:	0c 94 8b 01 	jmp	0x316	; 0x316 <__vector_36>
      94:	0c 94 aa 01 	jmp	0x354	; 0x354 <__vector_37>
      98:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      9c:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      a0:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      a4:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      a8:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      ac:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      b0:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      b4:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      b8:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      bc:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__vector_47>
      c0:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      c4:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      c8:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      cc:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      d0:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      d4:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      d8:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      dc:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      e0:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      e4:	bc 04       	cpc	r11, r12
      e6:	c0 04       	cpc	r12, r0
      e8:	c4 04       	cpc	r12, r4
      ea:	c8 04       	cpc	r12, r8
      ec:	cc 04       	cpc	r12, r12
      ee:	b8 04       	cpc	r11, r8
      f0:	a3 04       	cpc	r10, r3
      f2:	e4 0c       	add	r14, r4
      f4:	e6 0c       	add	r14, r6
      f6:	e6 0c       	add	r14, r6
      f8:	ec 0c       	add	r14, r12
      fa:	de 0c       	add	r13, r14
      fc:	d8 0c       	add	r13, r8
      fe:	de 0c       	add	r13, r14
     100:	d8 0c       	add	r13, r8
     102:	ee 0c       	add	r14, r14
     104:	08 4a       	sbci	r16, 0xA8	; 168
     106:	d7 3b       	cpi	r29, 0xB7	; 183
     108:	3b ce       	rjmp	.-906    	; 0xfffffd80 <__eeprom_end+0xff7efd80>
     10a:	01 6e       	ori	r16, 0xE1	; 225
     10c:	84 bc       	out	0x24, r8	; 36
     10e:	bf fd       	.word	0xfdbf	; ????
     110:	c1 2f       	mov	r28, r17
     112:	3d 6c       	ori	r19, 0xCD	; 205
     114:	74 31       	cpi	r23, 0x14	; 20
     116:	9a bd       	out	0x2a, r25	; 42
     118:	56 83       	std	Z+6, r21	; 0x06
     11a:	3d da       	rcall	.-2950   	; 0xfffff596 <__eeprom_end+0xff7ef596>
     11c:	3d 00       	.word	0x003d	; ????
     11e:	c7 7f       	andi	r28, 0xF7	; 247
     120:	11 be       	out	0x31, r1	; 49
     122:	d9 e4       	ldi	r29, 0x49	; 73
     124:	bb 4c       	sbci	r27, 0xCB	; 203
     126:	3e 91       	ld	r19, -X
     128:	6b aa       	std	Y+51, r6	; 0x33
     12a:	aa be       	out	0x3a, r10	; 58
     12c:	00 00       	nop
     12e:	00 80       	ld	r0, Z
     130:	3f 00       	.word	0x003f	; ????

00000132 <__trampolines_end>:
     132:	42 6f       	ori	r20, 0xF2	; 242
     134:	6f 74       	andi	r22, 0x4F	; 79
     136:	65 64       	ori	r22, 0x45	; 69
	...

00000139 <__c.2507>:
     139:	55 6e 61 62 6c 65 20 74 6f 20 6c 6f 63 61 74 65     Unable to locate
     149:	20 73 65 67 6d 65 6e 74 20 66 6f 72 20 6c 6f 6f      segment for loo
     159:	6b 61 68 65 61 64 20 70 6f 69 6e 74 00              kahead point.

00000166 <__c.2491>:
     166:	45 6e 64 20 6f 66 20 70 61 74 68 20 72 65 61 63     End of path reac
     176:	68 65 64 00                                         hed.

0000017a <__c.2489>:
     17a:	55 6e 61 62 6c 65 20 74 6f 20 6c 6f 63 61 74 65     Unable to locate
     18a:	20 73 65 67 6d 65 6e 74 20 66 6f 72 20 6f 72 74      segment for ort
     19a:	68 6f 67 6f 6e 61 6c 20 70 72 6f 6a 65 63 74 69     hogonal projecti
     1aa:	6f 6e 00                                            on.

000001ad <__c.2444>:
     1ad:	46 6f 6c 6c 6f 77 65 72 20 70 61 72 61 6d 65 74     Follower paramet
     1bd:	65 72 73 20 73 65 74 00                             ers set.

000001c5 <__c.2437>:
     1c5:	46 6f 6c 6c 6f 77 65 72 20 72 65 73 65 74 00        Follower reset.

000001d4 <__c.2435>:
     1d4:	46 6f 6c 6c 6f 77 65 72 20 70 61 75 73 65 64 00     Follower paused.

000001e4 <__c.2433>:
     1e4:	46 6f 6c 6c 6f 77 65 72 20 73 74 61 72 74 65 64     Follower started
	...

000001f5 <__c.2431>:
     1f5:	4e 6f 20 70 61 74 68 20 61 76 61 69 6c 61 62 6c     No path availabl
     205:	65 00                                               e.

00000207 <__c.2429>:
     207:	50 61 74 68 20 6f 66 20 25 75 20 70 6f 69 6e 74     Path of %u point
     217:	73 2c 20 31 2e 28 25 69 2c 25 69 29 20 32 2e 28     s, 1.(%i,%i) 2.(
     227:	25 69 2c 25 69 29 20 2e 2e 2e 00                    %i,%i) ....

00000232 <__c.2427>:
     232:	46 6f 6c 6c 6f 77 65 72 3a 20 6f 75 74 20 6f 66     Follower: out of
     242:	20 6d 65 6d 6f 72 79 20 6f 72 20 70 61 74 68 20      memory or path 
     252:	68 61 73 20 74 6f 6f 20 66 65 77 20 70 6f 69 6e     has too few poin
     262:	74 73 00 00                                         ts..

00000266 <__ctors_end>:
     266:	11 24       	eor	r1, r1
     268:	1f be       	out	0x3f, r1	; 63
     26a:	cf ef       	ldi	r28, 0xFF	; 255
     26c:	d1 e2       	ldi	r29, 0x21	; 33
     26e:	de bf       	out	0x3e, r29	; 62
     270:	cd bf       	out	0x3d, r28	; 61

00000272 <init_GPIOR0>:
// Several flags (see lib/tools/timeTask/GPIOR0Defs.h) are kept in the register
// GPIOR0. In order to ensure proper initialization, GPIOR0 is cleared in the
// .init3 section right after the zero register (r1) has been cleared and the
// stack pointer was set up.
void __attribute__ ((naked)) __attribute__ ((section (".init3"))) init_GPIOR0(void) {
	GPIOR0 = 0;
     272:	1e ba       	out	0x1e, r1	; 30

00000274 <__do_copy_data>:
     274:	12 e0       	ldi	r17, 0x02	; 2
     276:	a0 e0       	ldi	r26, 0x00	; 0
     278:	b2 e0       	ldi	r27, 0x02	; 2
     27a:	ee e4       	ldi	r30, 0x4E	; 78
     27c:	f9 e4       	ldi	r31, 0x49	; 73
     27e:	00 e0       	ldi	r16, 0x00	; 0
     280:	0b bf       	out	0x3b, r16	; 59
     282:	02 c0       	rjmp	.+4      	; 0x288 <__do_copy_data+0x14>
     284:	07 90       	elpm	r0, Z+
     286:	0d 92       	st	X+, r0
     288:	a4 36       	cpi	r26, 0x64	; 100
     28a:	b1 07       	cpc	r27, r17
     28c:	d9 f7       	brne	.-10     	; 0x284 <__do_copy_data+0x10>

0000028e <__do_clear_bss>:
     28e:	29 e0       	ldi	r18, 0x09	; 9
     290:	a4 e6       	ldi	r26, 0x64	; 100
     292:	b2 e0       	ldi	r27, 0x02	; 2
     294:	01 c0       	rjmp	.+2      	; 0x298 <.do_clear_bss_start>

00000296 <.do_clear_bss_loop>:
     296:	1d 92       	st	X+, r1

00000298 <.do_clear_bss_start>:
     298:	af 3c       	cpi	r26, 0xCF	; 207
     29a:	b2 07       	cpc	r27, r18
     29c:	e1 f7       	brne	.-8      	; 0x296 <.do_clear_bss_loop>
     29e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <main>
     2a2:	0c 94 a5 24 	jmp	0x494a	; 0x494a <_exit>

000002a6 <__bad_interrupt>:
     2a6:	0c 94 f3 0c 	jmp	0x19e6	; 0x19e6 <__vector_default>

000002aa <__vector_47>:
*/


.global TIMER5_COMPA_vect
TIMER5_COMPA_vect:
    push r2
     2aa:	2f 92       	push	r2
    in r2, _SFR_IO_ADDR(SREG)
     2ac:	2f b6       	in	r2, 0x3f	; 63
    push YL
     2ae:	cf 93       	push	r28
    push YH
     2b0:	df 93       	push	r29
    push ZL
     2b2:	ef 93       	push	r30
    push ZH
     2b4:	ff 93       	push	r31

    // timer 5 has reached the TOP value defined by OCR5A, i.e. 1ms has passed

    // ++timeTask_time_ms;
    eor ZH, ZH
     2b6:	ff 27       	eor	r31, r31
    // load two lower bytes from uin32_t
    lds YL, timeTask_time_ms
     2b8:	c0 91 89 02 	lds	r28, 0x0289	; 0x800289 <timeTask_time_ms>
    lds YH, timeTask_time_ms + 1
     2bc:	d0 91 8a 02 	lds	r29, 0x028A	; 0x80028a <timeTask_time_ms+0x1>
    // increment YH:YL by one
    adiw YL, 1
     2c0:	21 96       	adiw	r28, 0x01	; 1
    // store result for two lower bytes
    sts timeTask_time_ms, YL
     2c2:	c0 93 89 02 	sts	0x0289, r28	; 0x800289 <timeTask_time_ms>
    sts timeTask_time_ms + 1, YH
     2c6:	d0 93 8a 02 	sts	0x028A, r29	; 0x80028a <timeTask_time_ms+0x1>
    // load two higher bytes from uin32_t
    lds YL, timeTask_time_ms + 2
     2ca:	c0 91 8b 02 	lds	r28, 0x028B	; 0x80028b <timeTask_time_ms+0x2>
    lds YH, timeTask_time_ms + 3
     2ce:	d0 91 8c 02 	lds	r29, 0x028C	; 0x80028c <timeTask_time_ms+0x3>
    // add carry in case of overflow from lower bytes
    adc YL, ZH
     2d2:	cf 1f       	adc	r28, r31
    adc YH, ZH
     2d4:	df 1f       	adc	r29, r31
    // store result for two higher bytes
    sts timeTask_time_ms + 2, YL
     2d6:	c0 93 8b 02 	sts	0x028B, r28	; 0x80028b <timeTask_time_ms+0x2>
    sts timeTask_time_ms + 3, YH
     2da:	d0 93 8c 02 	sts	0x028C, r29	; 0x80028c <timeTask_time_ms+0x3>

    // if bit GPIOR0_INDEX_BIT in GPIOR0 is set, jump to TIMER5_COMPA_INDEX_1
    sbic _SFR_IO_ADDR(GPIOR0), GPIOR0_INDEX_BIT
     2de:	f0 99       	sbic	0x1e, 0	; 30
    rjmp TIMER5_COMPA_INDEX_1
     2e0:	04 c0       	rjmp	.+8      	; 0x2ea <TIMER5_COMPA_INDEX_1>

	// bit is 0, set it (idx = 1)
    sbi _SFR_IO_ADDR(GPIOR0), GPIOR0_INDEX_BIT
     2e2:	f0 9a       	sbi	0x1e, 0	; 30
    // load address of timeTask_uptime[1]
    ldi ZL, lo8(timeTask_uptime + 2)
     2e4:	e9 e2       	ldi	r30, 0x29	; 41
    ldi ZH, hi8(timeTask_uptime + 2)
     2e6:	f2 e0       	ldi	r31, 0x02	; 2
    rjmp TIMER5_COMPA_UPTIME
     2e8:	03 c0       	rjmp	.+6      	; 0x2f0 <TIMER5_COMPA_UPTIME>

000002ea <TIMER5_COMPA_INDEX_1>:

TIMER5_COMPA_INDEX_1:
	// bit is 1, clear it (idx = 0)
    cbi _SFR_IO_ADDR(GPIOR0), GPIOR0_INDEX_BIT
     2ea:	f0 98       	cbi	0x1e, 0	; 30
    // load address of timeTask_uptime[0]
    ldi ZL, lo8(timeTask_uptime)
     2ec:	e7 e2       	ldi	r30, 0x27	; 39
    ldi ZH, hi8(timeTask_uptime)
     2ee:	f2 e0       	ldi	r31, 0x02	; 2

000002f0 <TIMER5_COMPA_UPTIME>:

TIMER5_COMPA_UPTIME:
    // load uint16_t at timeTask_uptime[idx]
    ld YL, Z
     2f0:	c0 81       	ld	r28, Z
    ldd YH, Z+1
     2f2:	d1 81       	ldd	r29, Z+1	; 0x01
    // increment YH:YL by 2
    adiw YL, 2
     2f4:	22 96       	adiw	r28, 0x02	; 2
    // store back
    std Z+1, YH
     2f6:	d1 83       	std	Z+1, r29	; 0x01
    st Z, YL
     2f8:	c0 83       	st	Z, r28

    // if updated value of timeTask_uptime[idx] is odd, jump to end of this ISR
    // otherwise, start a conversion if ADC is enabled, i.e. every 2 milliseconds
    sbrc YL, 0
     2fa:	c0 fd       	sbrc	r28, 0
    rjmp TIMER5_COMPA_FINISH
     2fc:	05 c0       	rjmp	.+10     	; 0x308 <TIMER5_COMPA_FINISH>

    // if ADC is disabled (bit GPIOR0_ADC_BIT of GPIOR0 is cleared), jump to end of this ISR
    sbis _SFR_IO_ADDR(GPIOR0), GPIOR0_ADC_BIT
     2fe:	f2 9b       	sbis	0x1e, 2	; 30
    rjmp TIMER5_COMPA_FINISH
     300:	03 c0       	rjmp	.+6      	; 0x308 <TIMER5_COMPA_FINISH>

    // start ADC conversion of the next channel using the configuration described
    // by ADC_ADCSRA_CONFIG (see io/adc/adc.h for details)
    ldi ZL, ADC_ADCSRA_CONFIG
     302:	ef ec       	ldi	r30, 0xCF	; 207
    sts _SFR_MEM_ADDR(ADCSRA), ZL
     304:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

00000308 <TIMER5_COMPA_FINISH>:

TIMER5_COMPA_FINISH:
    pop ZH
     308:	ff 91       	pop	r31
    pop ZL
     30a:	ef 91       	pop	r30
    pop YH
     30c:	df 91       	pop	r29
    pop YL
     30e:	cf 91       	pop	r28
    out _SFR_IO_ADDR(SREG), r2
     310:	2f be       	out	0x3f, r2	; 63
    pop r2
     312:	2f 90       	pop	r2
    reti
     314:	18 95       	reti

00000316 <__vector_36>:
    uart_rxISR(0)
    uart_txISR(0)
#endif

#ifdef USE_UART1
    uart_rxISR(1)
     316:	2f 92       	push	r2
     318:	2f b6       	in	r2, 0x3f	; 63
     31a:	2f 93       	push	r18
     31c:	ef 93       	push	r30
     31e:	ff 93       	push	r31
     320:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     324:	e0 91 8d 02 	lds	r30, 0x028D	; 0x80028d <uart1>
     328:	e3 95       	inc	r30
     32a:	ef 77       	andi	r30, 0x7F	; 127
     32c:	f0 91 8e 02 	lds	r31, 0x028E	; 0x80028e <uart1+0x1>
     330:	fe 17       	cp	r31, r30
     332:	61 f0       	breq	.+24     	; 0x34c <RX_BUF_OVERFLOW1>
     334:	e0 93 8d 02 	sts	0x028D, r30	; 0x80028d <uart1>
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	ef 58       	subi	r30, 0x8F	; 143
     33c:	f8 4f       	sbci	r31, 0xF8	; 248
     33e:	20 83       	st	Z, r18

00000340 <RX_ISR_END1>:
     340:	ff 91       	pop	r31
     342:	ef 91       	pop	r30
     344:	2f 91       	pop	r18
     346:	2f be       	out	0x3f, r2	; 63
     348:	2f 90       	pop	r2
     34a:	18 95       	reti

0000034c <RX_BUF_OVERFLOW1>:
     34c:	21 e0       	ldi	r18, 0x01	; 1
     34e:	20 93 91 02 	sts	0x0291, r18	; 0x800291 <uart1+0x4>
     352:	f6 cf       	rjmp	.-20     	; 0x340 <RX_ISR_END1>

00000354 <__vector_37>:
    uart_txISR(1)
     354:	2f 92       	push	r2
     356:	2f b6       	in	r2, 0x3f	; 63
     358:	ef 93       	push	r30
     35a:	ff 93       	push	r31
     35c:	f0 91 8f 02 	lds	r31, 0x028F	; 0x80028f <uart1+0x2>
     360:	e0 91 90 02 	lds	r30, 0x0290	; 0x800290 <uart1+0x3>
     364:	fe 17       	cp	r31, r30
     366:	79 f0       	breq	.+30     	; 0x386 <TX_ISR_DISABLE_UDRE1>
     368:	e3 95       	inc	r30
     36a:	ef 7f       	andi	r30, 0xFF	; 255
     36c:	e0 93 90 02 	sts	0x0290, r30	; 0x800290 <uart1+0x3>
     370:	f0 e0       	ldi	r31, 0x00	; 0
     372:	ef 50       	subi	r30, 0x0F	; 15
     374:	f8 4f       	sbci	r31, 0xF8	; 248
     376:	e0 81       	ld	r30, Z
     378:	e0 93 ce 00 	sts	0x00CE, r30	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>

0000037c <TX_ISR_END1>:
     37c:	ff 91       	pop	r31
     37e:	ef 91       	pop	r30
     380:	2f be       	out	0x3f, r2	; 63
     382:	2f 90       	pop	r2
     384:	18 95       	reti

00000386 <TX_ISR_DISABLE_UDRE1>:
     386:	e8 e9       	ldi	r30, 0x98	; 152
     388:	e0 93 c9 00 	sts	0x00C9, r30	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
     38c:	f7 cf       	rjmp	.-18     	; 0x37c <TX_ISR_END1>

0000038e <__vector_29>:
*/


.global ADC_vect
ADC_vect:
    push r2
     38e:	2f 92       	push	r2
    in r2, _SFR_IO_ADDR(SREG)
     390:	2f b6       	in	r2, 0x3f	; 63
    push r23
     392:	7f 93       	push	r23
    push r24
     394:	8f 93       	push	r24
    push r25
     396:	9f 93       	push	r25
    push YL
     398:	cf 93       	push	r28
    push YH
     39a:	df 93       	push	r29
    push ZL
     39c:	ef 93       	push	r30
    push ZH
     39e:	ff 93       	push	r31

    // load ADC_currentChannel
    lds YL, ADC_currentChannel
     3a0:	c0 91 f1 08 	lds	r28, 0x08F1	; 0x8008f1 <ADC_currentChannel>
    lds YH, ADC_currentChannel + 1
     3a4:	d0 91 f2 08 	lds	r29, 0x08F2	; 0x8008f2 <ADC_currentChannel+0x1>
    // make a copy of ADC_currentChannel for later use
    movw ZL, YL
     3a8:	fe 01       	movw	r30, r28

    // if (++ADC_currentChannel != ADC_channels + ADC_CHANNEL_COUNT)
    subi ZL, lo8(-(8 + 2 * ADC_FILTER_SIZE))
     3aa:	e8 5b       	subi	r30, 0xB8	; 184
    sbci ZH, hi8(-(8 + 2 * ADC_FILTER_SIZE))
     3ac:	ff 4f       	sbci	r31, 0xFF	; 255
    ldi r24, hi8(ADC_channels + ADC_CHANNEL_COUNT * (8 + 2 * ADC_FILTER_SIZE))
     3ae:	89 e0       	ldi	r24, 0x09	; 9
    cpi ZL, lo8(ADC_channels + ADC_CHANNEL_COUNT * (8 + 2 * ADC_FILTER_SIZE))
     3b0:	eb 3c       	cpi	r30, 0xCB	; 203
    cpc ZH, r24
     3b2:	f8 07       	cpc	r31, r24
    breq ADC_RESET_CURRENT_CHANNEL
     3b4:	b1 f1       	breq	.+108    	; 0x422 <ADC_RESET_CURRENT_CHANNEL>

000003b6 <ADC_SET_CHANNEL>:

ADC_SET_CHANNEL:
    // ADMUX  = ADC_currentChannel->admux;
    // ADMUX is set for the next conversion as early as possible to give the
    // voltage some time to stabilize
    ldd r24, Z+1
     3b6:	81 81       	ldd	r24, Z+1	; 0x01
    sts _SFR_MEM_ADDR(ADMUX), r24
     3b8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

    // ADCSRB  = ADC_currentChannel->adcsrb;
    ldd r24, Z+2
     3bc:	82 81       	ldd	r24, Z+2	; 0x02
    sts _SFR_MEM_ADDR(ADCSRB), r24
     3be:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>

	// store updated ADC_currentChannel
    sts ADC_currentChannel + 1, ZH
     3c2:	f0 93 f2 08 	sts	0x08F2, r31	; 0x8008f2 <ADC_currentChannel+0x1>
    sts ADC_currentChannel, ZL
     3c6:	e0 93 f1 08 	sts	0x08F1, r30	; 0x8008f1 <ADC_currentChannel>
    // Note: YH:YL contains "old" value of ADC_currentChannel to which result
    // of conversion corresponds to.

    // move position index in history array to next element
    // uint8_t pos = (ADC_currentChannel->pos + 1) & (ADC_FILTER_SIZE - 1);
    ld ZL, Y
     3ca:	e8 81       	ld	r30, Y
    inc ZL
     3cc:	e3 95       	inc	r30
    andi ZL, ADC_FILTER_SIZE-1
     3ce:	ef 71       	andi	r30, 0x1F	; 31

    // ADC_currentChannel->pos = pos;
    st  Y, ZL
     3d0:	e8 83       	st	Y, r30

    // update sum of samples and history element
    // ADC_currentChannel->sum = ADC_currentChannel->sum - ADC_currentChannel->history[pos] + value;

    // calculate address of (ADC_currentChannel->history[pos]) - 8 in ZH:ZL
    eor ZH, ZH
     3d2:	ff 27       	eor	r31, r31
    add ZL, ZL // ZH:ZL = pos*2
     3d4:	ee 0f       	add	r30, r30
    adc ZH, ZH
     3d6:	ff 1f       	adc	r31, r31
    add ZL, YL // add address of ADC_currentChannel to ZH:ZL
     3d8:	ec 0f       	add	r30, r28
    adc ZH, YH
     3da:	fd 1f       	adc	r31, r29
    // interleaved execution of:
    //   load ADC_currentChannel->history[pos] (into r23,r24)
    //   uint16_t value = ADC; // read 10 bit ADC value (into r25, r25)
    //   ADC_currentChannel->history[pos] = value;
    //   subtract ADC_currentChannel->history[pos] - value
    ldd r23, Z+8
     3dc:	70 85       	ldd	r23, Z+8	; 0x08
    lds r25, _SFR_MEM_ADDR(ADCL)
     3de:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    std Z+8, r25
     3e2:	90 87       	std	Z+8, r25	; 0x08
    sub r23, r25
     3e4:	79 1b       	sub	r23, r25

    ldd r24, Z+9
     3e6:	81 85       	ldd	r24, Z+9	; 0x09
    lds r25, _SFR_MEM_ADDR(ADCH)
     3e8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    std Z+9, r25
     3ec:	91 87       	std	Z+9, r25	; 0x09
    sbc r24, r25
     3ee:	89 0b       	sbc	r24, r25
    // result of subtraction as int16_t in r24:r23

    // convert int16_t to 24bit, result in r25:r24:r23
    mov r25, r24
     3f0:	98 2f       	mov	r25, r24
    add r25, r25
     3f2:	99 0f       	add	r25, r25
    sbc r25, r25
     3f4:	99 0b       	sbc	r25, r25

    // interleaved execution of:
    //   load ADC_currentChannel->sum (24 bits only)
    //   subtract difference (history[pos]-value) from ADC_currentChannel->sum
    //   store updated value to ADC_currentChannel->sum
    ldd ZL, Y+4
     3f6:	ec 81       	ldd	r30, Y+4	; 0x04
    sub ZL, r23
     3f8:	e7 1b       	sub	r30, r23
    std Y+4, ZL
     3fa:	ec 83       	std	Y+4, r30	; 0x04

    ldd ZL, Y+5
     3fc:	ed 81       	ldd	r30, Y+5	; 0x05
    sbc ZL, r24
     3fe:	e8 0b       	sbc	r30, r24
    std Y+5, ZL
     400:	ed 83       	std	Y+5, r30	; 0x05

    ldd ZL, Y+6
     402:	ee 81       	ldd	r30, Y+6	; 0x06
    sbc ZL, r25
     404:	e9 0b       	sbc	r30, r25
    std Y+6, ZL
     406:	ee 83       	std	Y+6, r30	; 0x06

	// clear up-to-date flag (bit 7 of ADC_currentChannel->channel)
    ldd ZL, Y+3
     408:	eb 81       	ldd	r30, Y+3	; 0x03
    andi ZL, 0x7F
     40a:	ef 77       	andi	r30, 0x7F	; 127
    std Y+3, ZL
     40c:	eb 83       	std	Y+3, r30	; 0x03

    // starting a conversion is done in TIMER5_COMPA_vect
    // (see tools/timeTask/timeTask_isr.S)

    pop ZH
     40e:	ff 91       	pop	r31
    pop ZL
     410:	ef 91       	pop	r30
    pop YH
     412:	df 91       	pop	r29
    pop YL
     414:	cf 91       	pop	r28
    pop r25
     416:	9f 91       	pop	r25
    pop r24
     418:	8f 91       	pop	r24
    pop r23
     41a:	7f 91       	pop	r23
    out _SFR_IO_ADDR(SREG), r2
     41c:	2f be       	out	0x3f, r2	; 63
    pop r2
     41e:	2f 90       	pop	r2
    reti
     420:	18 95       	reti

00000422 <ADC_RESET_CURRENT_CHANNEL>:

ADC_RESET_CURRENT_CHANNEL:
    // ADC_currentChannel = &ADC_channels[0];
    ldi ZL, lo8(ADC_channels)
     422:	e3 ef       	ldi	r30, 0xF3	; 243
    ldi ZH, hi8(ADC_channels)
     424:	f8 e0       	ldi	r31, 0x08	; 8
    rjmp ADC_SET_CHANNEL
     426:	c7 cf       	rjmp	.-114    	; 0x3b6 <ADC_SET_CHANNEL>

00000428 <bumper_init>:
static uint16_t contacts = 0;

//static uint8_t pinlAlt;

void bumper_init() {
	DDRL &= ~((1<<DDL0) | (1<<DDL1) | (1<<DDL2));
     428:	ea e0       	ldi	r30, 0x0A	; 10
     42a:	f1 e0       	ldi	r31, 0x01	; 1
     42c:	80 81       	ld	r24, Z
     42e:	88 7f       	andi	r24, 0xF8	; 248
     430:	80 83       	st	Z, r24
	PORTL |= (1<<PL0) | (1<<PL1) | (1<<PL2);
     432:	eb e0       	ldi	r30, 0x0B	; 11
     434:	f1 e0       	ldi	r31, 0x01	; 1
     436:	80 81       	ld	r24, Z
     438:	87 60       	ori	r24, 0x07	; 7
     43a:	80 83       	st	Z, r24
	taster.value = PINL & ((1<<PL0) | (1<<PL1) | (1<<PL2));
     43c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x7e0109>
     440:	87 70       	andi	r24, 0x07	; 7
     442:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <taster>
     446:	08 95       	ret

00000448 <bumper_getBumpers>:
	//pinlAlt = taster.value;
}

bitset8_t bumper_getBumpers() {
	return taster;
}
     448:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <taster>
     44c:	08 95       	ret

0000044e <bumper_getContacts>:

uint8_t bumper_getContacts() {
	return contacts;
}
     44e:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <__data_end>
     452:	08 95       	ret

00000454 <bumper_checkCollision>:

void bumper_checkCollision() {
     454:	cf 93       	push	r28
	uint8_t pinl = PINL & ((1<<PL0) | (1<<PL1) | (1<<PL2));
     456:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x7e0109>
     45a:	c8 2f       	mov	r28, r24
     45c:	c7 70       	andi	r28, 0x07	; 7
	if(taster.value != pinl){
     45e:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <taster>
     462:	c9 17       	cp	r28, r25
     464:	e9 f0       	breq	.+58     	; 0x4a0 <bumper_checkCollision+0x4c>
		if((pinl & (1<<PL0)) == 0)
     466:	80 fd       	sbrc	r24, 0
     468:	0a c0       	rjmp	.+20     	; 0x47e <bumper_checkCollision+0x2a>
			contacts++;
     46a:	20 91 64 02 	lds	r18, 0x0264	; 0x800264 <__data_end>
     46e:	30 91 65 02 	lds	r19, 0x0265	; 0x800265 <__data_end+0x1>
     472:	2f 5f       	subi	r18, 0xFF	; 255
     474:	3f 4f       	sbci	r19, 0xFF	; 255
     476:	30 93 65 02 	sts	0x0265, r19	; 0x800265 <__data_end+0x1>
     47a:	20 93 64 02 	sts	0x0264, r18	; 0x800264 <__data_end>
		if((pinl & (1<<PL1)) == 0)
     47e:	81 fd       	sbrc	r24, 1
     480:	0a c0       	rjmp	.+20     	; 0x496 <bumper_checkCollision+0x42>
			contacts++;
     482:	20 91 64 02 	lds	r18, 0x0264	; 0x800264 <__data_end>
     486:	30 91 65 02 	lds	r19, 0x0265	; 0x800265 <__data_end+0x1>
     48a:	2f 5f       	subi	r18, 0xFF	; 255
     48c:	3f 4f       	sbci	r19, 0xFF	; 255
     48e:	30 93 65 02 	sts	0x0265, r19	; 0x800265 <__data_end+0x1>
     492:	20 93 64 02 	sts	0x0264, r18	; 0x800264 <__data_end>
		if((pinl & (1<<PL2)) == 0)
     496:	82 ff       	sbrs	r24, 2
     498:	07 c0       	rjmp	.+14     	; 0x4a8 <bumper_checkCollision+0x54>
			contacts++;
		setState(STOP);	
     49a:	89 e0       	ldi	r24, 0x09	; 9
     49c:	0e 94 94 0c 	call	0x1928	; 0x1928 <setState>
	}
		
	taster.value = pinl;
     4a0:	c0 93 66 02 	sts	0x0266, r28	; 0x800266 <taster>
}
     4a4:	cf 91       	pop	r28
     4a6:	08 95       	ret
		if((pinl & (1<<PL0)) == 0)
			contacts++;
		if((pinl & (1<<PL1)) == 0)
			contacts++;
		if((pinl & (1<<PL2)) == 0)
			contacts++;
     4a8:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <__data_end>
     4ac:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <__data_end+0x1>
     4b0:	01 96       	adiw	r24, 0x01	; 1
     4b2:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <__data_end+0x1>
     4b6:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <__data_end>
     4ba:	ef cf       	rjmp	.-34     	; 0x49a <bumper_checkCollision+0x46>

000004bc <calcStopCounter_Drive>:
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    __asm__ volatile ("" ::: "memory");
     4bc:	cf 92       	push	r12
     4be:	df 92       	push	r13
     4c0:	ef 92       	push	r14
     4c2:	ff 92       	push	r15
     4c4:	0e 94 97 0c 	call	0x192e	; 0x192e <getState>
     4c8:	83 30       	cpi	r24, 0x03	; 3
     4ca:	09 f4       	brne	.+2      	; 0x4ce <calcStopCounter_Drive+0x12>
     4cc:	77 c0       	rjmp	.+238    	; 0x5bc <calcStopCounter_Drive+0x100>
     4ce:	0e 94 b6 06 	call	0xd6c	; 0xd6c <ownLaby_getPose>
     4d2:	fc 01       	movw	r30, r24
     4d4:	82 81       	ldd	r24, Z+2	; 0x02
     4d6:	81 11       	cpse	r24, r1
     4d8:	4b c0       	rjmp	.+150    	; 0x570 <calcStopCounter_Drive+0xb4>
     4da:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <ownLaby_getRobotPose>
     4de:	fc 01       	movw	r30, r24
     4e0:	c4 80       	ldd	r12, Z+4	; 0x04
     4e2:	d5 80       	ldd	r13, Z+5	; 0x05
     4e4:	e6 80       	ldd	r14, Z+6	; 0x06
     4e6:	f7 80       	ldd	r15, Z+7	; 0x07
     4e8:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <position_getExpectedPose>
     4ec:	fc 01       	movw	r30, r24
     4ee:	24 81       	ldd	r18, Z+4	; 0x04
     4f0:	35 81       	ldd	r19, Z+5	; 0x05
     4f2:	46 81       	ldd	r20, Z+6	; 0x06
     4f4:	57 81       	ldd	r21, Z+7	; 0x07
     4f6:	c7 01       	movw	r24, r14
     4f8:	b6 01       	movw	r22, r12
     4fa:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
     4fe:	6b 01       	movw	r12, r22
     500:	7c 01       	movw	r14, r24
     502:	0e 94 b6 06 	call	0xd6c	; 0xd6c <ownLaby_getPose>
     506:	fc 01       	movw	r30, r24
     508:	82 81       	ldd	r24, Z+2	; 0x02
     50a:	81 30       	cpi	r24, 0x01	; 1
     50c:	09 f4       	brne	.+2      	; 0x510 <calcStopCounter_Drive+0x54>
     50e:	41 c0       	rjmp	.+130    	; 0x592 <calcStopCounter_Drive+0xd6>
     510:	0e 94 b6 06 	call	0xd6c	; 0xd6c <ownLaby_getPose>
     514:	fc 01       	movw	r30, r24
     516:	82 81       	ldd	r24, Z+2	; 0x02
     518:	83 30       	cpi	r24, 0x03	; 3
     51a:	d9 f1       	breq	.+118    	; 0x592 <calcStopCounter_Drive+0xd6>
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	a9 01       	movw	r20, r18
     522:	c7 01       	movw	r24, r14
     524:	b6 01       	movw	r22, r12
     526:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <__cmpsf2>
     52a:	87 ff       	sbrs	r24, 7
     52c:	04 c0       	rjmp	.+8      	; 0x536 <calcStopCounter_Drive+0x7a>
     52e:	f7 fa       	bst	r15, 7
     530:	f0 94       	com	r15
     532:	f7 f8       	bld	r15, 7
     534:	f0 94       	com	r15
     536:	20 91 1b 02 	lds	r18, 0x021B	; 0x80021b <value_robotParams+0x4>
     53a:	30 91 1c 02 	lds	r19, 0x021C	; 0x80021c <value_robotParams+0x5>
     53e:	40 91 1d 02 	lds	r20, 0x021D	; 0x80021d <value_robotParams+0x6>
     542:	50 91 1e 02 	lds	r21, 0x021E	; 0x80021e <value_robotParams+0x7>
     546:	c7 01       	movw	r24, r14
     548:	b6 01       	movw	r22, r12
     54a:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__divsf3>
     54e:	23 e3       	ldi	r18, 0x33	; 51
     550:	33 e3       	ldi	r19, 0x33	; 51
     552:	43 e1       	ldi	r20, 0x13	; 19
     554:	50 e4       	ldi	r21, 0x40	; 64
     556:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <__mulsf3>
     55a:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <__fixsfsi>
     55e:	70 93 07 02 	sts	0x0207, r23	; 0x800207 <stopCounter+0x1>
     562:	60 93 06 02 	sts	0x0206, r22	; 0x800206 <stopCounter>
     566:	ff 90       	pop	r15
     568:	ef 90       	pop	r14
     56a:	df 90       	pop	r13
     56c:	cf 90       	pop	r12
     56e:	08 95       	ret
     570:	0e 94 b6 06 	call	0xd6c	; 0xd6c <ownLaby_getPose>
     574:	fc 01       	movw	r30, r24
     576:	82 81       	ldd	r24, Z+2	; 0x02
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	09 f4       	brne	.+2      	; 0x57e <calcStopCounter_Drive+0xc2>
     57c:	ae cf       	rjmp	.-164    	; 0x4da <calcStopCounter_Drive+0x1e>
     57e:	c1 2c       	mov	r12, r1
     580:	d1 2c       	mov	r13, r1
     582:	76 01       	movw	r14, r12
     584:	0e 94 b6 06 	call	0xd6c	; 0xd6c <ownLaby_getPose>
     588:	fc 01       	movw	r30, r24
     58a:	82 81       	ldd	r24, Z+2	; 0x02
     58c:	81 30       	cpi	r24, 0x01	; 1
     58e:	09 f0       	breq	.+2      	; 0x592 <calcStopCounter_Drive+0xd6>
     590:	bf cf       	rjmp	.-130    	; 0x510 <calcStopCounter_Drive+0x54>
     592:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <ownLaby_getRobotPose>
     596:	fc 01       	movw	r30, r24
     598:	c0 80       	ld	r12, Z
     59a:	d1 80       	ldd	r13, Z+1	; 0x01
     59c:	e2 80       	ldd	r14, Z+2	; 0x02
     59e:	f3 80       	ldd	r15, Z+3	; 0x03
     5a0:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <position_getExpectedPose>
     5a4:	fc 01       	movw	r30, r24
     5a6:	20 81       	ld	r18, Z
     5a8:	31 81       	ldd	r19, Z+1	; 0x01
     5aa:	42 81       	ldd	r20, Z+2	; 0x02
     5ac:	53 81       	ldd	r21, Z+3	; 0x03
     5ae:	c7 01       	movw	r24, r14
     5b0:	b6 01       	movw	r22, r12
     5b2:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
     5b6:	6b 01       	movw	r12, r22
     5b8:	7c 01       	movw	r14, r24
     5ba:	b0 cf       	rjmp	.-160    	; 0x51c <calcStopCounter_Drive+0x60>
     5bc:	8d ec       	ldi	r24, 0xCD	; 205
     5be:	c8 2e       	mov	r12, r24
     5c0:	8c e4       	ldi	r24, 0x4C	; 76
     5c2:	d8 2e       	mov	r13, r24
     5c4:	8d e7       	ldi	r24, 0x7D	; 125
     5c6:	e8 2e       	mov	r14, r24
     5c8:	83 e4       	ldi	r24, 0x43	; 67
     5ca:	f8 2e       	mov	r15, r24
     5cc:	b4 cf       	rjmp	.-152    	; 0x536 <calcStopCounter_Drive+0x7a>

000005ce <encoder_init>:
     5ce:	ea e0       	ldi	r30, 0x0A	; 10
     5d0:	f1 e0       	ldi	r31, 0x01	; 1
     5d2:	80 81       	ld	r24, Z
     5d4:	80 7f       	andi	r24, 0xF0	; 240
     5d6:	80 83       	st	Z, r24
     5d8:	e8 e6       	ldi	r30, 0x68	; 104
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	80 81       	ld	r24, Z
     5de:	81 60       	ori	r24, 0x01	; 1
     5e0:	80 83       	st	Z, r24
     5e2:	eb e6       	ldi	r30, 0x6B	; 107
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	80 81       	ld	r24, Z
     5e8:	8f 60       	ori	r24, 0x0F	; 15
     5ea:	80 83       	st	Z, r24
     5ec:	83 b1       	in	r24, 0x03	; 3
     5ee:	8f 70       	andi	r24, 0x0F	; 15
     5f0:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <pinbAlt>
     5f4:	08 95       	ret

000005f6 <encoder_getCounterL>:
     5f6:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <counterL>
     5fa:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <counterL+0x1>
     5fe:	08 95       	ret

00000600 <encoder_getCounterR>:
     600:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <counterR>
     604:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <counterR+0x1>
     608:	08 95       	ret

0000060a <__vector_9>:
		counterL = 0;
		counterR = 0;
	}
}

ISR(PCINT0_vect){
     60a:	1f 92       	push	r1
     60c:	0f 92       	push	r0
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	0f 92       	push	r0
     612:	11 24       	eor	r1, r1
     614:	0b b6       	in	r0, 0x3b	; 59
     616:	0f 92       	push	r0
     618:	2f 93       	push	r18
     61a:	3f 93       	push	r19
     61c:	4f 93       	push	r20
     61e:	5f 93       	push	r21
     620:	6f 93       	push	r22
     622:	7f 93       	push	r23
     624:	8f 93       	push	r24
     626:	9f 93       	push	r25
     628:	af 93       	push	r26
     62a:	bf 93       	push	r27
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
     630:	ef 93       	push	r30
     632:	ff 93       	push	r31
	uint8_t pinb = PINB & ((1<<PCINT0) | (1<<PCINT1) | (1<<PCINT2) | (1<<PCINT3));
     634:	c3 b1       	in	r28, 0x03	; 3
     636:	dc 2f       	mov	r29, r28
     638:	df 70       	andi	r29, 0x0F	; 15
	
	//Encoder Rechts
	
	if( ((pinb & (1<<PCINT0)) ^ (pinbAlt & (1<<PCINT0))) != 0) { // Flankenwechsel auf Kanal A
     63a:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <pinbAlt>
     63e:	8d 27       	eor	r24, r29
     640:	80 ff       	sbrs	r24, 0
     642:	7b c0       	rjmp	.+246    	; 0x73a <__vector_9+0x130>
		if ((pinb & (1<<PCINT0)) != 0) {	// Flankenwechsel von LOW auf HIGH
			if ((pinb & (1<<PCINT1)) != 0)		// B ist HIGH
				counterR--;
     644:	20 91 69 02 	lds	r18, 0x0269	; 0x800269 <counterR>
     648:	30 91 6a 02 	lds	r19, 0x026A	; 0x80026a <counterR+0x1>
	uint8_t pinb = PINB & ((1<<PCINT0) | (1<<PCINT1) | (1<<PCINT2) | (1<<PCINT3));
	
	//Encoder Rechts
	
	if( ((pinb & (1<<PCINT0)) ^ (pinbAlt & (1<<PCINT0))) != 0) { // Flankenwechsel auf Kanal A
		if ((pinb & (1<<PCINT0)) != 0) {	// Flankenwechsel von LOW auf HIGH
     64c:	c0 ff       	sbrs	r28, 0
     64e:	ea c0       	rjmp	.+468    	; 0x824 <__vector_9+0x21a>
			if ((pinb & (1<<PCINT1)) != 0)		// B ist HIGH
     650:	c1 ff       	sbrs	r28, 1
     652:	00 c1       	rjmp	.+512    	; 0x854 <__vector_9+0x24a>
				counterR--;
     654:	21 50       	subi	r18, 0x01	; 1
     656:	31 09       	sbc	r19, r1
     658:	30 93 6a 02 	sts	0x026A, r19	; 0x80026a <counterR+0x1>
     65c:	20 93 69 02 	sts	0x0269, r18	; 0x800269 <counterR>
			else								// B ist LOW
				counterR--;
		}
	}
	
	if( ((pinb & (1<<PCINT1)) ^ (pinbAlt & (1<<PCINT1))) != 0) { // Flankenwechsel auf Kanal B
     660:	81 fd       	sbrc	r24, 1
     662:	09 c1       	rjmp	.+530    	; 0x876 <__vector_9+0x26c>
		}
	}
	
	//Encoder Links
	
	if( ((pinb & (1<<PCINT2)) ^ (pinbAlt & (1<<PCINT2))) != 0) { // Flankenwechsel auf Kanal A
     664:	82 ff       	sbrs	r24, 2
     666:	74 c0       	rjmp	.+232    	; 0x750 <__vector_9+0x146>
		if ((pinb & (1<<PCINT2)) != 0) {	// Flankenwechsel von LOW auf HIGH
			if ((pinb & (1<<PCINT3)) != 0)		// B ist HIGH
				counterL++;
     668:	20 91 67 02 	lds	r18, 0x0267	; 0x800267 <counterL>
     66c:	30 91 68 02 	lds	r19, 0x0268	; 0x800268 <counterL+0x1>
	}
	
	//Encoder Links
	
	if( ((pinb & (1<<PCINT2)) ^ (pinbAlt & (1<<PCINT2))) != 0) { // Flankenwechsel auf Kanal A
		if ((pinb & (1<<PCINT2)) != 0) {	// Flankenwechsel von LOW auf HIGH
     670:	c2 ff       	sbrs	r28, 2
     672:	cd c0       	rjmp	.+410    	; 0x80e <__vector_9+0x204>
			if ((pinb & (1<<PCINT3)) != 0)		// B ist HIGH
     674:	c3 ff       	sbrs	r28, 3
     676:	cd c0       	rjmp	.+410    	; 0x812 <__vector_9+0x208>
		} 
		else {								// Flankenwechsel von HIGH auf LOW
			if ((pinb & (1<<PCINT3)) != 0)		// B ist HIGH
				counterL--;
			else								// B ist LOW
				counterL++;
     678:	2f 5f       	subi	r18, 0xFF	; 255
     67a:	3f 4f       	sbci	r19, 0xFF	; 255
     67c:	30 93 68 02 	sts	0x0268, r19	; 0x800268 <counterL+0x1>
     680:	20 93 67 02 	sts	0x0267, r18	; 0x800267 <counterL>
		}
	}

	if( ((pinb & (1<<PCINT3)) ^ (pinbAlt & (1<<PCINT3))) != 0) { // Flankenwechsel auf Kanal B
     684:	83 ff       	sbrs	r24, 3
     686:	06 c0       	rjmp	.+12     	; 0x694 <__vector_9+0x8a>
		} 
		else {								// Flankenwechsel von HIGH auf LOW
			if ((pinb & (1<<PCINT2)) != 0)		// A ist HIGH
				counterL++;
			else								// A ist LOW
				counterL--;
     688:	21 50       	subi	r18, 0x01	; 1
     68a:	31 09       	sbc	r19, r1
     68c:	30 93 68 02 	sts	0x0268, r19	; 0x800268 <counterL+0x1>
     690:	20 93 67 02 	sts	0x0267, r18	; 0x800267 <counterL>
		}
	}
	
	if ((getState() == DRIVE_FORWARD) /* || (getState() == DRIVE_ADJUST)*/){
     694:	0e 94 97 0c 	call	0x192e	; 0x192e <getState>
     698:	83 30       	cpi	r24, 0x03	; 3
     69a:	09 f4       	brne	.+2      	; 0x69e <__vector_9+0x94>
     69c:	6e c0       	rjmp	.+220    	; 0x77a <__vector_9+0x170>
			*/
				setState(TURN_ADJUST);
		}
	}
	
	if ((getState() == TURN_LEFT) || (getState() == TURN_RIGHT) || (getState() == TURN_AROUND) || (getState() == TURN_ADJUST)){
     69e:	0e 94 97 0c 	call	0x192e	; 0x192e <getState>
     6a2:	85 30       	cpi	r24, 0x05	; 5
     6a4:	61 f0       	breq	.+24     	; 0x6be <__vector_9+0xb4>
     6a6:	0e 94 97 0c 	call	0x192e	; 0x192e <getState>
     6aa:	86 30       	cpi	r24, 0x06	; 6
     6ac:	41 f0       	breq	.+16     	; 0x6be <__vector_9+0xb4>
     6ae:	0e 94 97 0c 	call	0x192e	; 0x192e <getState>
     6b2:	87 30       	cpi	r24, 0x07	; 7
     6b4:	21 f0       	breq	.+8      	; 0x6be <__vector_9+0xb4>
     6b6:	0e 94 97 0c 	call	0x192e	; 0x192e <getState>
     6ba:	88 30       	cpi	r24, 0x08	; 8
     6bc:	39 f5       	brne	.+78     	; 0x70c <__vector_9+0x102>
		if (stopCounter == -10) {
     6be:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <stopCounter>
     6c2:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <stopCounter+0x1>
     6c6:	86 3f       	cpi	r24, 0xF6	; 246
     6c8:	2f ef       	ldi	r18, 0xFF	; 255
     6ca:	92 07       	cpc	r25, r18
     6cc:	09 f4       	brne	.+2      	; 0x6d0 <__vector_9+0xc6>
     6ce:	f7 c0       	rjmp	.+494    	; 0x8be <__vector_9+0x2b4>
			calcStopCounter_Drive();
		}
		
		
		if( ((pinb & (1<<PCINT0)) ^ (pinbAlt & (1<<PCINT0))) != 0)
     6d0:	20 91 6b 02 	lds	r18, 0x026B	; 0x80026b <pinbAlt>
     6d4:	2d 27       	eor	r18, r29
     6d6:	20 ff       	sbrs	r18, 0
     6d8:	05 c0       	rjmp	.+10     	; 0x6e4 <__vector_9+0xda>
			stopCounter--;
     6da:	01 97       	sbiw	r24, 0x01	; 1
     6dc:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <stopCounter+0x1>
     6e0:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <stopCounter>
		if( ((pinb & (1<<PCINT1)) ^ (pinbAlt & (1<<PCINT1))) != 0)
     6e4:	21 ff       	sbrs	r18, 1
     6e6:	05 c0       	rjmp	.+10     	; 0x6f2 <__vector_9+0xe8>
			stopCounter--;
     6e8:	01 97       	sbiw	r24, 0x01	; 1
     6ea:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <stopCounter+0x1>
     6ee:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <stopCounter>
		if( ((pinb & (1<<PCINT2)) ^ (pinbAlt & (1<<PCINT2))) != 0)
     6f2:	22 ff       	sbrs	r18, 2
     6f4:	05 c0       	rjmp	.+10     	; 0x700 <__vector_9+0xf6>
			stopCounter--;
     6f6:	01 97       	sbiw	r24, 0x01	; 1
     6f8:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <stopCounter+0x1>
     6fc:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <stopCounter>
		if( ((pinb & (1<<PCINT3)) ^ (pinbAlt & (1<<PCINT3))) != 0)
     700:	23 fd       	sbrc	r18, 3
     702:	6d c0       	rjmp	.+218    	; 0x7de <__vector_9+0x1d4>
			stopCounter--;
		
		if (stopCounter <= 0) {
     704:	18 16       	cp	r1, r24
     706:	19 06       	cpc	r1, r25
     708:	0c f0       	brlt	.+2      	; 0x70c <__vector_9+0x102>
     70a:	72 c0       	rjmp	.+228    	; 0x7f0 <__vector_9+0x1e6>
			else
				setState(TURN_ADJUST);
		}
	}
	
	pinbAlt = pinb;
     70c:	d0 93 6b 02 	sts	0x026B, r29	; 0x80026b <pinbAlt>
}
     710:	ff 91       	pop	r31
     712:	ef 91       	pop	r30
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	bf 91       	pop	r27
     71a:	af 91       	pop	r26
     71c:	9f 91       	pop	r25
     71e:	8f 91       	pop	r24
     720:	7f 91       	pop	r23
     722:	6f 91       	pop	r22
     724:	5f 91       	pop	r21
     726:	4f 91       	pop	r20
     728:	3f 91       	pop	r19
     72a:	2f 91       	pop	r18
     72c:	0f 90       	pop	r0
     72e:	0b be       	out	0x3b, r0	; 59
     730:	0f 90       	pop	r0
     732:	0f be       	out	0x3f, r0	; 63
     734:	0f 90       	pop	r0
     736:	1f 90       	pop	r1
     738:	18 95       	reti
			else								// B ist LOW
				counterR--;
		}
	}
	
	if( ((pinb & (1<<PCINT1)) ^ (pinbAlt & (1<<PCINT1))) != 0) { // Flankenwechsel auf Kanal B
     73a:	81 ff       	sbrs	r24, 1
     73c:	93 cf       	rjmp	.-218    	; 0x664 <__vector_9+0x5a>
     73e:	20 91 69 02 	lds	r18, 0x0269	; 0x800269 <counterR>
     742:	30 91 6a 02 	lds	r19, 0x026A	; 0x80026a <counterR+0x1>
		if ((pinb & (1<<PCINT1)) != 0) {	// Flankenwechsel von LOW auf HIGH
     746:	c1 fd       	sbrc	r28, 1
     748:	9d c0       	rjmp	.+314    	; 0x884 <__vector_9+0x27a>
				counterR++;
			else								// A ist LOW
				counterR--;
		} 
		else {							// Flankenwechsel von HIGH auf LOW
			if ((pinb & (1<<PCINT0)) != 0)		// A ist HIGH
     74a:	c0 fd       	sbrc	r28, 0
     74c:	75 c0       	rjmp	.+234    	; 0x838 <__vector_9+0x22e>
     74e:	93 c0       	rjmp	.+294    	; 0x876 <__vector_9+0x26c>
			else								// B ist LOW
				counterL++;
		}
	}

	if( ((pinb & (1<<PCINT3)) ^ (pinbAlt & (1<<PCINT3))) != 0) { // Flankenwechsel auf Kanal B
     750:	83 ff       	sbrs	r24, 3
     752:	a0 cf       	rjmp	.-192    	; 0x694 <__vector_9+0x8a>
     754:	20 91 67 02 	lds	r18, 0x0267	; 0x800267 <counterL>
     758:	30 91 68 02 	lds	r19, 0x0268	; 0x800268 <counterL+0x1>
		if ((pinb & (1<<PCINT3)) != 0) {	// Flankenwechsel von LOW auf HIGH
     75c:	c3 ff       	sbrs	r28, 3
     75e:	95 c0       	rjmp	.+298    	; 0x88a <__vector_9+0x280>
			if ((pinb & (1<<PCINT2)) != 0)		// A ist HIGH
     760:	c2 fd       	sbrc	r28, 2
     762:	92 cf       	rjmp	.-220    	; 0x688 <__vector_9+0x7e>
			else								// A ist LOW
				counterL++;
		} 
		else {								// Flankenwechsel von HIGH auf LOW
			if ((pinb & (1<<PCINT2)) != 0)		// A ist HIGH
				counterL++;
     764:	2f 5f       	subi	r18, 0xFF	; 255
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	30 93 68 02 	sts	0x0268, r19	; 0x800268 <counterL+0x1>
     76c:	20 93 67 02 	sts	0x0267, r18	; 0x800267 <counterL>
			else								// A ist LOW
				counterL--;
		}
	}
	
	if ((getState() == DRIVE_FORWARD) /* || (getState() == DRIVE_ADJUST)*/){
     770:	0e 94 97 0c 	call	0x192e	; 0x192e <getState>
     774:	83 30       	cpi	r24, 0x03	; 3
     776:	09 f0       	breq	.+2      	; 0x77a <__vector_9+0x170>
     778:	92 cf       	rjmp	.-220    	; 0x69e <__vector_9+0x94>
		if (stopCounter == -10) {
     77a:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <stopCounter>
     77e:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <stopCounter+0x1>
     782:	26 3f       	cpi	r18, 0xF6	; 246
     784:	8f ef       	ldi	r24, 0xFF	; 255
     786:	38 07       	cpc	r19, r24
     788:	09 f4       	brne	.+2      	; 0x78c <__vector_9+0x182>
     78a:	a6 c0       	rjmp	.+332    	; 0x8d8 <__vector_9+0x2ce>
			calcStopCounter_Drive();
		}
		
		
		if( ((pinb & (1<<PCINT0)) ^ (pinbAlt & (1<<PCINT0))) != 0) { // Flankenwechsel auf Kanal A
     78c:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <pinbAlt>
     790:	8d 27       	eor	r24, r29
     792:	80 ff       	sbrs	r24, 0
     794:	58 c0       	rjmp	.+176    	; 0x846 <__vector_9+0x23c>
			if ((pinb & (1<<PCINT0)) != 0) {	// Flankenwechsel von LOW auf HIGH
     796:	c0 ff       	sbrs	r28, 0
     798:	86 c0       	rjmp	.+268    	; 0x8a6 <__vector_9+0x29c>
				if ((pinb & (1<<PCINT1)) == 0)		// B ist HIGH
     79a:	c1 fd       	sbrc	r28, 1
     79c:	86 c0       	rjmp	.+268    	; 0x8aa <__vector_9+0x2a0>
				if ((pinb & (1<<PCINT0)) != 0)		// A ist HIGH
				stopCounter--;
			}
			else {							// Flankenwechsel von HIGH auf LOW
				if ((pinb & (1<<PCINT0)) == 0)		// A ist HIGH
				stopCounter--;
     79e:	21 50       	subi	r18, 0x01	; 1
     7a0:	31 09       	sbc	r19, r1
     7a2:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <stopCounter+0x1>
     7a6:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <stopCounter>
			}
		}
		
		//Encoder Links
		
		if( ((pinb & (1<<PCINT2)) ^ (pinbAlt & (1<<PCINT2))) != 0) { // Flankenwechsel auf Kanal A
     7aa:	82 ff       	sbrs	r24, 2
     7ac:	81 c0       	rjmp	.+258    	; 0x8b0 <__vector_9+0x2a6>
			if ((pinb & (1<<PCINT2)) != 0) {	// Flankenwechsel von LOW auf HIGH
     7ae:	c2 ff       	sbrs	r28, 2
     7b0:	75 c0       	rjmp	.+234    	; 0x89c <__vector_9+0x292>
				if ((pinb & (1<<PCINT3)) != 0)		// B ist HIGH
     7b2:	c3 ff       	sbrs	r28, 3
     7b4:	75 c0       	rjmp	.+234    	; 0x8a0 <__vector_9+0x296>
				if ((pinb & (1<<PCINT2)) == 0)		// A ist HIGH
				stopCounter--;
			}
			else {								// Flankenwechsel von HIGH auf LOW
				if ((pinb & (1<<PCINT2)) != 0)		// A ist HIGH
				stopCounter--;
     7b6:	21 50       	subi	r18, 0x01	; 1
     7b8:	31 09       	sbc	r19, r1
     7ba:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <stopCounter+0x1>
     7be:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <stopCounter>
			}
		}
		
		
		if (stopCounter <= 0) {
     7c2:	12 16       	cp	r1, r18
     7c4:	13 06       	cpc	r1, r19
     7c6:	0c f4       	brge	.+2      	; 0x7ca <__vector_9+0x1c0>
     7c8:	6a cf       	rjmp	.-300    	; 0x69e <__vector_9+0x94>
			stopCounter = -10;
     7ca:	86 ef       	ldi	r24, 0xF6	; 246
     7cc:	9f ef       	ldi	r25, 0xFF	; 255
     7ce:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <stopCounter+0x1>
     7d2:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <stopCounter>
			/*
			if (getState() == DRIVE_ADJUST)
				setState(STOP);
			else
			*/
				setState(TURN_ADJUST);
     7d6:	88 e0       	ldi	r24, 0x08	; 8
     7d8:	0e 94 94 0c 	call	0x1928	; 0x1928 <setState>
     7dc:	60 cf       	rjmp	.-320    	; 0x69e <__vector_9+0x94>
		if( ((pinb & (1<<PCINT1)) ^ (pinbAlt & (1<<PCINT1))) != 0)
			stopCounter--;
		if( ((pinb & (1<<PCINT2)) ^ (pinbAlt & (1<<PCINT2))) != 0)
			stopCounter--;
		if( ((pinb & (1<<PCINT3)) ^ (pinbAlt & (1<<PCINT3))) != 0)
			stopCounter--;
     7de:	01 97       	sbiw	r24, 0x01	; 1
     7e0:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <stopCounter+0x1>
     7e4:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <stopCounter>
		
		if (stopCounter <= 0) {
     7e8:	18 16       	cp	r1, r24
     7ea:	19 06       	cpc	r1, r25
     7ec:	0c f4       	brge	.+2      	; 0x7f0 <__vector_9+0x1e6>
     7ee:	8e cf       	rjmp	.-228    	; 0x70c <__vector_9+0x102>
			stopCounter = -10;
     7f0:	86 ef       	ldi	r24, 0xF6	; 246
     7f2:	9f ef       	ldi	r25, 0xFF	; 255
     7f4:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <stopCounter+0x1>
     7f8:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <stopCounter>
			
			if (getState() == TURN_ADJUST)
     7fc:	0e 94 97 0c 	call	0x192e	; 0x192e <getState>
     800:	88 30       	cpi	r24, 0x08	; 8
     802:	09 f4       	brne	.+2      	; 0x806 <__vector_9+0x1fc>
     804:	70 c0       	rjmp	.+224    	; 0x8e6 <__vector_9+0x2dc>
				//setState(DRIVE_ADJUST);
				setState(STOP);
			else
				setState(TURN_ADJUST);
     806:	88 e0       	ldi	r24, 0x08	; 8
     808:	0e 94 94 0c 	call	0x1928	; 0x1928 <setState>
     80c:	7f cf       	rjmp	.-258    	; 0x70c <__vector_9+0x102>
				counterL++;
			else								// B ist LOW
				counterL--;
		} 
		else {								// Flankenwechsel von HIGH auf LOW
			if ((pinb & (1<<PCINT3)) != 0)		// B ist HIGH
     80e:	c3 ff       	sbrs	r28, 3
     810:	33 cf       	rjmp	.-410    	; 0x678 <__vector_9+0x6e>
				counterL--;
     812:	21 50       	subi	r18, 0x01	; 1
     814:	31 09       	sbc	r19, r1
     816:	30 93 68 02 	sts	0x0268, r19	; 0x800268 <counterL+0x1>
     81a:	20 93 67 02 	sts	0x0267, r18	; 0x800267 <counterL>
			else								// B ist LOW
				counterL++;
		}
	}

	if( ((pinb & (1<<PCINT3)) ^ (pinbAlt & (1<<PCINT3))) != 0) { // Flankenwechsel auf Kanal B
     81e:	83 ff       	sbrs	r24, 3
     820:	39 cf       	rjmp	.-398    	; 0x694 <__vector_9+0x8a>
     822:	a0 cf       	rjmp	.-192    	; 0x764 <__vector_9+0x15a>
				counterR--;
			else								// B ist LOW
				counterR++;
		} 
		else {							// Flankenwechsel von HIGH auf LOW
			if ((pinb & (1<<PCINT1)) != 0)		// B ist HIGH
     824:	c1 ff       	sbrs	r28, 1
     826:	1f c0       	rjmp	.+62     	; 0x866 <__vector_9+0x25c>
				counterR++;
     828:	2f 5f       	subi	r18, 0xFF	; 255
     82a:	3f 4f       	sbci	r19, 0xFF	; 255
     82c:	30 93 6a 02 	sts	0x026A, r19	; 0x80026a <counterR+0x1>
     830:	20 93 69 02 	sts	0x0269, r18	; 0x800269 <counterR>
			else								// B ist LOW
				counterR--;
		}
	}
	
	if( ((pinb & (1<<PCINT1)) ^ (pinbAlt & (1<<PCINT1))) != 0) { // Flankenwechsel auf Kanal B
     834:	81 ff       	sbrs	r24, 1
     836:	16 cf       	rjmp	.-468    	; 0x664 <__vector_9+0x5a>
			else								// A ist LOW
				counterR--;
		} 
		else {							// Flankenwechsel von HIGH auf LOW
			if ((pinb & (1<<PCINT0)) != 0)		// A ist HIGH
				counterR--;
     838:	21 50       	subi	r18, 0x01	; 1
     83a:	31 09       	sbc	r19, r1
     83c:	30 93 6a 02 	sts	0x026A, r19	; 0x80026a <counterR+0x1>
     840:	20 93 69 02 	sts	0x0269, r18	; 0x800269 <counterR>
     844:	0f cf       	rjmp	.-482    	; 0x664 <__vector_9+0x5a>
				if ((pinb & (1<<PCINT1)) != 0)		// B ist HIGH
				stopCounter--;
			}
		}
		
		if( ((pinb & (1<<PCINT1)) ^ (pinbAlt & (1<<PCINT1))) != 0) { // Flankenwechsel auf Kanal B
     846:	81 ff       	sbrs	r24, 1
     848:	b0 cf       	rjmp	.-160    	; 0x7aa <__vector_9+0x1a0>
			if ((pinb & (1<<PCINT1)) != 0) {	// Flankenwechsel von LOW auf HIGH
     84a:	c1 ff       	sbrs	r28, 1
     84c:	3f c0       	rjmp	.+126    	; 0x8cc <__vector_9+0x2c2>
				if ((pinb & (1<<PCINT0)) != 0)		// A ist HIGH
     84e:	c0 ff       	sbrs	r28, 0
     850:	ac cf       	rjmp	.-168    	; 0x7aa <__vector_9+0x1a0>
     852:	a5 cf       	rjmp	.-182    	; 0x79e <__vector_9+0x194>
	if( ((pinb & (1<<PCINT0)) ^ (pinbAlt & (1<<PCINT0))) != 0) { // Flankenwechsel auf Kanal A
		if ((pinb & (1<<PCINT0)) != 0) {	// Flankenwechsel von LOW auf HIGH
			if ((pinb & (1<<PCINT1)) != 0)		// B ist HIGH
				counterR--;
			else								// B ist LOW
				counterR++;
     854:	2f 5f       	subi	r18, 0xFF	; 255
     856:	3f 4f       	sbci	r19, 0xFF	; 255
     858:	30 93 6a 02 	sts	0x026A, r19	; 0x80026a <counterR+0x1>
     85c:	20 93 69 02 	sts	0x0269, r18	; 0x800269 <counterR>
			else								// B ist LOW
				counterR--;
		}
	}
	
	if( ((pinb & (1<<PCINT1)) ^ (pinbAlt & (1<<PCINT1))) != 0) { // Flankenwechsel auf Kanal B
     860:	81 ff       	sbrs	r24, 1
     862:	00 cf       	rjmp	.-512    	; 0x664 <__vector_9+0x5a>
     864:	e9 cf       	rjmp	.-46     	; 0x838 <__vector_9+0x22e>
		} 
		else {							// Flankenwechsel von HIGH auf LOW
			if ((pinb & (1<<PCINT1)) != 0)		// B ist HIGH
				counterR++;
			else								// B ist LOW
				counterR--;
     866:	21 50       	subi	r18, 0x01	; 1
     868:	31 09       	sbc	r19, r1
     86a:	30 93 6a 02 	sts	0x026A, r19	; 0x80026a <counterR+0x1>
     86e:	20 93 69 02 	sts	0x0269, r18	; 0x800269 <counterR>
		}
	}
	
	if( ((pinb & (1<<PCINT1)) ^ (pinbAlt & (1<<PCINT1))) != 0) { // Flankenwechsel auf Kanal B
     872:	81 ff       	sbrs	r24, 1
     874:	f7 ce       	rjmp	.-530    	; 0x664 <__vector_9+0x5a>
		} 
		else {							// Flankenwechsel von HIGH auf LOW
			if ((pinb & (1<<PCINT0)) != 0)		// A ist HIGH
				counterR--;
			else								// A ist LOW
				counterR++;
     876:	2f 5f       	subi	r18, 0xFF	; 255
     878:	3f 4f       	sbci	r19, 0xFF	; 255
     87a:	30 93 6a 02 	sts	0x026A, r19	; 0x80026a <counterR+0x1>
     87e:	20 93 69 02 	sts	0x0269, r18	; 0x800269 <counterR>
     882:	f0 ce       	rjmp	.-544    	; 0x664 <__vector_9+0x5a>
		}
	}
	
	if( ((pinb & (1<<PCINT1)) ^ (pinbAlt & (1<<PCINT1))) != 0) { // Flankenwechsel auf Kanal B
		if ((pinb & (1<<PCINT1)) != 0) {	// Flankenwechsel von LOW auf HIGH
			if ((pinb & (1<<PCINT0)) != 0)		// A ist HIGH
     884:	c0 fd       	sbrc	r28, 0
     886:	f7 cf       	rjmp	.-18     	; 0x876 <__vector_9+0x26c>
     888:	d7 cf       	rjmp	.-82     	; 0x838 <__vector_9+0x22e>
				counterL--;
			else								// A ist LOW
				counterL++;
		} 
		else {								// Flankenwechsel von HIGH auf LOW
			if ((pinb & (1<<PCINT2)) != 0)		// A ist HIGH
     88a:	c2 ff       	sbrs	r28, 2
     88c:	fd ce       	rjmp	.-518    	; 0x688 <__vector_9+0x7e>
				counterL++;
     88e:	2f 5f       	subi	r18, 0xFF	; 255
     890:	3f 4f       	sbci	r19, 0xFF	; 255
     892:	30 93 68 02 	sts	0x0268, r19	; 0x800268 <counterL+0x1>
     896:	20 93 67 02 	sts	0x0267, r18	; 0x800267 <counterL>
     89a:	6a cf       	rjmp	.-300    	; 0x770 <__vector_9+0x166>
			if ((pinb & (1<<PCINT2)) != 0) {	// Flankenwechsel von LOW auf HIGH
				if ((pinb & (1<<PCINT3)) != 0)		// B ist HIGH
				stopCounter--;
			}
			else {								// Flankenwechsel von HIGH auf LOW
				if ((pinb & (1<<PCINT3)) == 0)		// B ist HIGH
     89c:	c3 ff       	sbrs	r28, 3
     89e:	8b cf       	rjmp	.-234    	; 0x7b6 <__vector_9+0x1ac>
				stopCounter--;
			}
		}

		if( ((pinb & (1<<PCINT3)) ^ (pinbAlt & (1<<PCINT3))) != 0) { // Flankenwechsel auf Kanal B
     8a0:	83 fd       	sbrc	r24, 3
     8a2:	89 cf       	rjmp	.-238    	; 0x7b6 <__vector_9+0x1ac>
     8a4:	8e cf       	rjmp	.-228    	; 0x7c2 <__vector_9+0x1b8>
			if ((pinb & (1<<PCINT0)) != 0) {	// Flankenwechsel von LOW auf HIGH
				if ((pinb & (1<<PCINT1)) == 0)		// B ist HIGH
				stopCounter--;
			}
			else {							// Flankenwechsel von HIGH auf LOW
				if ((pinb & (1<<PCINT1)) != 0)		// B ist HIGH
     8a6:	c1 fd       	sbrc	r28, 1
     8a8:	7a cf       	rjmp	.-268    	; 0x79e <__vector_9+0x194>
				stopCounter--;
			}
		}
		
		if( ((pinb & (1<<PCINT1)) ^ (pinbAlt & (1<<PCINT1))) != 0) { // Flankenwechsel auf Kanal B
     8aa:	81 fd       	sbrc	r24, 1
     8ac:	78 cf       	rjmp	.-272    	; 0x79e <__vector_9+0x194>
     8ae:	7d cf       	rjmp	.-262    	; 0x7aa <__vector_9+0x1a0>
				if ((pinb & (1<<PCINT3)) == 0)		// B ist HIGH
				stopCounter--;
			}
		}

		if( ((pinb & (1<<PCINT3)) ^ (pinbAlt & (1<<PCINT3))) != 0) { // Flankenwechsel auf Kanal B
     8b0:	83 ff       	sbrs	r24, 3
     8b2:	87 cf       	rjmp	.-242    	; 0x7c2 <__vector_9+0x1b8>
			if ((pinb & (1<<PCINT3)) != 0) {	// Flankenwechsel von LOW auf HIGH
     8b4:	c3 ff       	sbrs	r28, 3
     8b6:	0d c0       	rjmp	.+26     	; 0x8d2 <__vector_9+0x2c8>
				if ((pinb & (1<<PCINT2)) == 0)		// A ist HIGH
     8b8:	c2 fd       	sbrc	r28, 2
     8ba:	83 cf       	rjmp	.-250    	; 0x7c2 <__vector_9+0x1b8>
     8bc:	7c cf       	rjmp	.-264    	; 0x7b6 <__vector_9+0x1ac>
		}
	}
	
	if ((getState() == TURN_LEFT) || (getState() == TURN_RIGHT) || (getState() == TURN_AROUND) || (getState() == TURN_ADJUST)){
		if (stopCounter == -10) {
			calcStopCounter_Drive();
     8be:	0e 94 5e 02 	call	0x4bc	; 0x4bc <calcStopCounter_Drive>
     8c2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <stopCounter>
     8c6:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <stopCounter+0x1>
     8ca:	02 cf       	rjmp	.-508    	; 0x6d0 <__vector_9+0xc6>
			if ((pinb & (1<<PCINT1)) != 0) {	// Flankenwechsel von LOW auf HIGH
				if ((pinb & (1<<PCINT0)) != 0)		// A ist HIGH
				stopCounter--;
			}
			else {							// Flankenwechsel von HIGH auf LOW
				if ((pinb & (1<<PCINT0)) == 0)		// A ist HIGH
     8cc:	c0 fd       	sbrc	r28, 0
     8ce:	6d cf       	rjmp	.-294    	; 0x7aa <__vector_9+0x1a0>
     8d0:	66 cf       	rjmp	.-308    	; 0x79e <__vector_9+0x194>
			if ((pinb & (1<<PCINT3)) != 0) {	// Flankenwechsel von LOW auf HIGH
				if ((pinb & (1<<PCINT2)) == 0)		// A ist HIGH
				stopCounter--;
			}
			else {								// Flankenwechsel von HIGH auf LOW
				if ((pinb & (1<<PCINT2)) != 0)		// A ist HIGH
     8d2:	c2 ff       	sbrs	r28, 2
     8d4:	76 cf       	rjmp	.-276    	; 0x7c2 <__vector_9+0x1b8>
     8d6:	6f cf       	rjmp	.-290    	; 0x7b6 <__vector_9+0x1ac>
		}
	}
	
	if ((getState() == DRIVE_FORWARD) /* || (getState() == DRIVE_ADJUST)*/){
		if (stopCounter == -10) {
			calcStopCounter_Drive();
     8d8:	0e 94 5e 02 	call	0x4bc	; 0x4bc <calcStopCounter_Drive>
     8dc:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <stopCounter>
     8e0:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <stopCounter+0x1>
     8e4:	53 cf       	rjmp	.-346    	; 0x78c <__vector_9+0x182>
		if (stopCounter <= 0) {
			stopCounter = -10;
			
			if (getState() == TURN_ADJUST)
				//setState(DRIVE_ADJUST);
				setState(STOP);
     8e6:	89 e0       	ldi	r24, 0x09	; 9
     8e8:	0e 94 94 0c 	call	0x1928	; 0x1928 <setState>
     8ec:	0f cf       	rjmp	.-482    	; 0x70c <__vector_9+0x102>

000008ee <IR_getIR_value>:

static IR_value_t IR_value;

const IR_value_t* IR_getIR_value(){
	return &IR_value;
}
     8ee:	8c e6       	ldi	r24, 0x6C	; 108
     8f0:	92 e0       	ldi	r25, 0x02	; 2
     8f2:	08 95       	ret

000008f4 <commSendRobotParams>:
}


void commSendRobotParams(const uint8_t* packet, __attribute__((unused)) const uint16_t size){
	RobotParameters_t* robotParams = (RobotParameters_t*)packet;
	position_setRobotParams(robotParams);
     8f4:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <position_setRobotParams>

000008f8 <commSetAprilTagPose>:
	
	//Callbackfuntion für Achsenweite und Distance per Tick
	
void commSetAprilTagPose(const uint8_t* packet, __attribute__((unused)) const uint16_t size){
	Pose_t* aprilTagPose = (Pose_t*)packet;
	position_setAprilTagPose(aprilTagPose);
     8f8:	0c 94 6b 0c 	jmp	0x18d6	; 0x18d6 <position_setAprilTagPose>

000008fc <commUserCommand>:
    communication_log(LEVEL_FINE, "received %" PRIu16 " bytes", size);
}


// callback function for communication channel CH_IN_USER_COMMAND (User Command View in HWPCS)
static void commUserCommand(const uint8_t* packet, __attribute__((unused)) const uint16_t size) {
     8fc:	8f 92       	push	r8
     8fe:	9f 92       	push	r9
     900:	af 92       	push	r10
     902:	bf 92       	push	r11
     904:	cf 92       	push	r12
     906:	df 92       	push	r13
     908:	ef 92       	push	r14
     90a:	ff 92       	push	r15
     90c:	0f 93       	push	r16
     90e:	1f 93       	push	r17
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	cd b7       	in	r28, 0x3d	; 61
     916:	de b7       	in	r29, 0x3e	; 62
     918:	61 97       	sbiw	r28, 0x11	; 17
     91a:	0f b6       	in	r0, 0x3f	; 63
     91c:	f8 94       	cli
     91e:	de bf       	out	0x3e, r29	; 62
     920:	0f be       	out	0x3f, r0	; 63
     922:	cd bf       	out	0x3d, r28	; 61
     924:	8c 01       	movw	r16, r24
    Path_t _path;
	const Pose_t* expectedPose;
	timeTask_time_t startTime;
	//timeTask_time_t stopTime;
	//timeTask_time_t currentTime;
	timeTask_getTimestamp(&startTime);
     926:	ce 01       	movw	r24, r28
     928:	09 96       	adiw	r24, 0x09	; 9
     92a:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <timeTask_getTimestamp>

	UserCommand_t* cmd = (UserCommand_t*) packet;
    switch (cmd->id) {
     92e:	d8 01       	movw	r26, r16
     930:	ec 91       	ld	r30, X
     932:	8e 2f       	mov	r24, r30
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	87 30       	cpi	r24, 0x07	; 7
     938:	91 05       	cpc	r25, r1
     93a:	38 f4       	brcc	.+14     	; 0x94a <commUserCommand+0x4e>
     93c:	fc 01       	movw	r30, r24
     93e:	ee 58       	subi	r30, 0x8E	; 142
     940:	ff 4f       	sbci	r31, 0xFF	; 255
     942:	0c 94 2c 20 	jmp	0x4058	; 0x4058 <__tablejump2__>
		break;
	case 5:
		setState(DRIVE_FORWARD);
		break;
	case 6:
		ownLaby_explore();
     946:	0e 94 89 08 	call	0x1112	; 0x1112 <ownLaby_explore>
		break;
	}
}
     94a:	61 96       	adiw	r28, 0x11	; 17
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	f8 94       	cli
     950:	de bf       	out	0x3e, r29	; 62
     952:	0f be       	out	0x3f, r0	; 63
     954:	cd bf       	out	0x3d, r28	; 61
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	1f 91       	pop	r17
     95c:	0f 91       	pop	r16
     95e:	ff 90       	pop	r15
     960:	ef 90       	pop	r14
     962:	df 90       	pop	r13
     964:	cf 90       	pop	r12
     966:	bf 90       	pop	r11
     968:	af 90       	pop	r10
     96a:	9f 90       	pop	r9
     96c:	8f 90       	pop	r8
     96e:	08 95       	ret
		_path.points[1].y = expectedPose->y + LABY_CELLSIZE + LABY_CELLSIZE_2;
		pathFollower_setNewPath(&_path);
		pathFollower_command(FOLLOWER_CMD_START);
		break;
	case 5:
		setState(DRIVE_FORWARD);
     970:	83 e0       	ldi	r24, 0x03	; 3
     972:	0e 94 94 0c 	call	0x1928	; 0x1928 <setState>
		break;
     976:	e9 cf       	rjmp	.-46     	; 0x94a <commUserCommand+0x4e>
	timeTask_getTimestamp(&startTime);

	UserCommand_t* cmd = (UserCommand_t*) packet;
    switch (cmd->id) {
    case 0: // command ID 0: stop motors
        setState(STOP);
     978:	89 e0       	ldi	r24, 0x09	; 9
     97a:	0e 94 94 0c 	call	0x1928	; 0x1928 <setState>
        break;
     97e:	e5 cf       	rjmp	.-54     	; 0x94a <commUserCommand+0x4e>
	case 1: // command ID 1: turn on spot
		setState(TURN_AROUND);
     980:	87 e0       	ldi	r24, 0x07	; 7
     982:	0e 94 94 0c 	call	0x1928	; 0x1928 <setState>
		break;
     986:	e1 cf       	rjmp	.-62     	; 0x94a <commUserCommand+0x4e>
    case 2: // command ID 2: Turn Left
		setState(TURN_LEFT);
     988:	85 e0       	ldi	r24, 0x05	; 5
     98a:	0e 94 94 0c 	call	0x1928	; 0x1928 <setState>
        break;
     98e:	dd cf       	rjmp	.-70     	; 0x94a <commUserCommand+0x4e>
    case 3: // command ID 3
		setState(TURN_RIGHT);
     990:	86 e0       	ldi	r24, 0x06	; 6
     992:	0e 94 94 0c 	call	0x1928	; 0x1928 <setState>
		break;
     996:	d9 cf       	rjmp	.-78     	; 0x94a <commUserCommand+0x4e>
	case 4: 
		expectedPose = position_getExpectedPose();
     998:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <position_getExpectedPose>
     99c:	8c 01       	movw	r16, r24
		Point_t points[2];
		_path.points = points; 
     99e:	ce 01       	movw	r24, r28
     9a0:	01 96       	adiw	r24, 0x01	; 1
     9a2:	99 8b       	std	Y+17, r25	; 0x11
     9a4:	88 8b       	std	Y+16, r24	; 0x10
		_path.pathLength = 2;
     9a6:	82 e0       	ldi	r24, 0x02	; 2
     9a8:	8f 87       	std	Y+15, r24	; 0x0f
		_path.points[0].x = expectedPose->x;
     9aa:	f8 01       	movw	r30, r16
     9ac:	60 81       	ld	r22, Z
     9ae:	71 81       	ldd	r23, Z+1	; 0x01
     9b0:	82 81       	ldd	r24, Z+2	; 0x02
     9b2:	93 81       	ldd	r25, Z+3	; 0x03
     9b4:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <__fixsfsi>
     9b8:	4b 01       	movw	r8, r22
     9ba:	5c 01       	movw	r10, r24
     9bc:	7a 83       	std	Y+2, r23	; 0x02
     9be:	69 83       	std	Y+1, r22	; 0x01
		_path.points[0].y = expectedPose->y - LABY_CELLSIZE_2;
     9c0:	d8 01       	movw	r26, r16
     9c2:	14 96       	adiw	r26, 0x04	; 4
     9c4:	cd 90       	ld	r12, X+
     9c6:	dd 90       	ld	r13, X+
     9c8:	ed 90       	ld	r14, X+
     9ca:	fc 90       	ld	r15, X
     9cc:	17 97       	sbiw	r26, 0x07	; 7
     9ce:	2d ec       	ldi	r18, 0xCD	; 205
     9d0:	3c e4       	ldi	r19, 0x4C	; 76
     9d2:	4d ef       	ldi	r20, 0xFD	; 253
     9d4:	52 e4       	ldi	r21, 0x42	; 66
     9d6:	c7 01       	movw	r24, r14
     9d8:	b6 01       	movw	r22, r12
     9da:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
     9de:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <__fixsfsi>
     9e2:	7c 83       	std	Y+4, r23	; 0x04
     9e4:	6b 83       	std	Y+3, r22	; 0x03
		_path.points[1].x = expectedPose->x;
     9e6:	9e 82       	std	Y+6, r9	; 0x06
     9e8:	8d 82       	std	Y+5, r8	; 0x05
		_path.points[1].y = expectedPose->y + LABY_CELLSIZE + LABY_CELLSIZE_2;
     9ea:	2d ec       	ldi	r18, 0xCD	; 205
     9ec:	3c e4       	ldi	r19, 0x4C	; 76
     9ee:	4d e7       	ldi	r20, 0x7D	; 125
     9f0:	53 e4       	ldi	r21, 0x43	; 67
     9f2:	c7 01       	movw	r24, r14
     9f4:	b6 01       	movw	r22, r12
     9f6:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__addsf3>
     9fa:	2d ec       	ldi	r18, 0xCD	; 205
     9fc:	3c e4       	ldi	r19, 0x4C	; 76
     9fe:	4d ef       	ldi	r20, 0xFD	; 253
     a00:	52 e4       	ldi	r21, 0x42	; 66
     a02:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__addsf3>
     a06:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <__fixsfsi>
     a0a:	78 87       	std	Y+8, r23	; 0x08
     a0c:	6f 83       	std	Y+7, r22	; 0x07
		pathFollower_setNewPath(&_path);
     a0e:	ce 01       	movw	r24, r28
     a10:	0f 96       	adiw	r24, 0x0f	; 15
     a12:	0e 94 13 12 	call	0x2426	; 0x2426 <pathFollower_setNewPath>
		pathFollower_command(FOLLOWER_CMD_START);
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	0e 94 19 12 	call	0x2432	; 0x2432 <pathFollower_command>
		break;
     a1c:	96 cf       	rjmp	.-212    	; 0x94a <commUserCommand+0x4e>

00000a1e <commDebug>:
 *******************************************************************************
 */

// callback function for communication channel CH_IN_DEBUG (Debug View in HWPCS)
static void commDebug(__attribute__((unused)) const uint8_t* packet, const uint16_t size) {
    communication_log(LEVEL_FINE, "received %" PRIu16 " bytes", size);
     a1e:	7f 93       	push	r23
     a20:	6f 93       	push	r22
     a22:	82 e3       	ldi	r24, 0x32	; 50
     a24:	92 e0       	ldi	r25, 0x02	; 2
     a26:	9f 93       	push	r25
     a28:	8f 93       	push	r24
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	8f 93       	push	r24
     a2e:	0e 94 05 10 	call	0x200a	; 0x200a <communication_log>
}
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0
     a3a:	0f 90       	pop	r0
     a3c:	08 95       	ret

00000a3e <main>:
}




int main(void) {
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
     a42:	cd b7       	in	r28, 0x3d	; 61
     a44:	de b7       	in	r29, 0x3e	; 62
     a46:	66 97       	sbiw	r28, 0x16	; 22
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	f8 94       	cli
     a4c:	de bf       	out	0x3e, r29	; 62
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	cd bf       	out	0x3d, r28	; 61
}


// initialization
static void init(void) {
    powerSaver_init(); // must be the first call!
     a52:	8f ee       	ldi	r24, 0xEF	; 239
     a54:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     a58:	8f e3       	ldi	r24, 0x3F	; 63
     a5a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
    LED_init();
     a5e:	81 b1       	in	r24, 0x01	; 1
     a60:	80 6c       	ori	r24, 0xC0	; 192
     a62:	81 b9       	out	0x01, r24	; 1
    uart_init();
     a64:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <uart_init>
    communication_init();		
     a68:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <communication_init>

    // register communication callback functions which are executed by
    // communication_readPackets() in main loop when a packet is received from
    // HWPCS on the corresponding communication channel
	communication_setCallback(CH_IN_DEBUG, commDebug);
     a6c:	6f e0       	ldi	r22, 0x0F	; 15
     a6e:	75 e0       	ldi	r23, 0x05	; 5
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <communication_setCallback>
	communication_setCallback(CH_IN_USER_COMMAND, commUserCommand);
     a76:	6e e7       	ldi	r22, 0x7E	; 126
     a78:	74 e0       	ldi	r23, 0x04	; 4
     a7a:	86 e0       	ldi	r24, 0x06	; 6
     a7c:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <communication_setCallback>
	communication_setCallback(CH_IN_ROBOT_PARAMS, commSendRobotParams);
     a80:	6a e7       	ldi	r22, 0x7A	; 122
     a82:	74 e0       	ldi	r23, 0x04	; 4
     a84:	82 e0       	ldi	r24, 0x02	; 2
     a86:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <communication_setCallback>
	communication_setCallback(CH_IN_POSE, commSetAprilTagPose);
     a8a:	6c e7       	ldi	r22, 0x7C	; 124
     a8c:	74 e0       	ldi	r23, 0x04	; 4
     a8e:	85 e0       	ldi	r24, 0x05	; 5
     a90:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <communication_setCallback>
	
	//TODO:  communication_setCallback(i, cbf) für alles was wir implementieren

    Motor_init();
     a94:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <Motor_init>
    timeTask_init();
     a98:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <timeTask_init>
	ADC_init(true);
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <ADC_init>
	pathFollower_init();	
     aa2:	0e 94 09 12 	call	0x2412	; 0x2412 <pathFollower_init>
	
	//position_init();
	bumper_init();
     aa6:	0e 94 14 02 	call	0x428	; 0x428 <bumper_init>
	encoder_init();
     aaa:	0e 94 e7 02 	call	0x5ce	; 0x5ce <encoder_init>
	ownLaby_init();
     aae:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <ownLaby_init>
	
    // global interrupt enable
    sei();
     ab2:	78 94       	sei


int main(void) {
    init();

    communication_log_P(LEVEL_INFO, PSTR("Booted"));
     ab4:	82 e3       	ldi	r24, 0x32	; 50
     ab6:	91 e0       	ldi	r25, 0x01	; 1
     ab8:	9f 93       	push	r25
     aba:	8f 93       	push	r24
     abc:	82 e0       	ldi	r24, 0x02	; 2
     abe:	8f 93       	push	r24
     ac0:	0e 94 3f 10 	call	0x207e	; 0x207e <communication_log_P>
     ac4:	0f 90       	pop	r0
     ac6:	0f 90       	pop	r0
     ac8:	0f 90       	pop	r0
			stateMachine(DRIVE_FORWARD);	//Aufruf von Control System in Hauptschleife. If Abfrage, damit nur einmalig der Dri
			i++;
		}*/

        TIMETASK(LED_TASK, 500) { // execute block approximately every 500ms
            LED2_TOGGLE();
     aca:	10 e4       	ldi	r17, 0x40	; 64
     acc:	23 c0       	rjmp	.+70     	; 0xb14 <L_getUptimeEnd357+0x30>
static inline uint16_t __attribute__((always_inline)) timeTask_getUptime(void) {
	extern uint16_t timeTask_uptime[2];

	uint16_t uptime;

    asm volatile (
     ace:	f0 99       	sbic	0x1e, 0	; 30
     ad0:	05 c0       	rjmp	.+10     	; 0xadc <L_getUptimeIndex1357>
     ad2:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <timeTask_uptime>
     ad6:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <timeTask_uptime+0x1>
     ada:	04 c0       	rjmp	.+8      	; 0xae4 <L_getUptimeEnd357>

00000adc <L_getUptimeIndex1357>:
     adc:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <timeTask_uptime+0x2>
     ae0:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <timeTask_uptime+0x3>

00000ae4 <L_getUptimeEnd357>:
				}
				communication_writePacket(CH_OUT_PATH_FOLLOW_STATUS, (uint8_t*)pathFollower_status, sizeof(*pathFollower_status)); // send pathFollower_status on channel CH_OUT_PATH_FOLLOW_STATUS
			}
		 }
		 
		 TIMETASK(WALL_TASK, 200) {
     ae4:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <WALL_TASK.2673>
     ae8:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <WALL_TASK.2673+0x1>
     aec:	ac 01       	movw	r20, r24
     aee:	42 1b       	sub	r20, r18
     af0:	53 0b       	sbc	r21, r19
     af2:	48 3c       	cpi	r20, 0xC8	; 200
     af4:	51 05       	cpc	r21, r1
     af6:	60 f0       	brcs	.+24     	; 0xb10 <L_getUptimeEnd357+0x2c>
     af8:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <WALL_TASK.2673+0x1>
     afc:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <WALL_TASK.2673>
			 const LabyrinthWalls_t* wallData = labyrinth_getAllWalls();
     b00:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <labyrinth_getAllWalls>
			 communication_writePacket(CH_OUT_LABY_WALLS, (uint8_t*)wallData, sizeof(*wallData));
     b04:	40 e1       	ldi	r20, 0x10	; 16
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	bc 01       	movw	r22, r24
     b0a:	84 e0       	ldi	r24, 0x04	; 4
     b0c:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <communication_writePacket>
		 }
		 
        // poll receive buffer (read and parse all available packets from UART buffer)
        // and execute registered callback functions
        communication_readPackets();
     b10:	0e 94 79 10 	call	0x20f2	; 0x20f2 <communication_readPackets>
    // do forever
    for (;;) {

        // TODO: Daten einlesen
		// 
		bumper_checkCollision();					//Lies Bumperwerte und schick sie als Telemetriedaten zu HWPCS
     b14:	0e 94 2a 02 	call	0x454	; 0x454 <bumper_checkCollision>
		
		stateMachine();
     b18:	0e 94 ca 0c 	call	0x1994	; 0x1994 <stateMachine>
     b1c:	f0 99       	sbic	0x1e, 0	; 30
     b1e:	05 c0       	rjmp	.+10     	; 0xb2a <L_getUptimeIndex1395>
     b20:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <timeTask_uptime>
     b24:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <timeTask_uptime+0x1>
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <L_getUptimeEnd395>

00000b2a <L_getUptimeIndex1395>:
     b2a:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <timeTask_uptime+0x2>
     b2e:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <timeTask_uptime+0x3>

00000b32 <L_getUptimeEnd395>:
		/*if(getState() == IDLE && i == 1) {
			stateMachine(DRIVE_FORWARD);	//Aufruf von Control System in Hauptschleife. If Abfrage, damit nur einmalig der Dri
			i++;
		}*/

        TIMETASK(LED_TASK, 500) { // execute block approximately every 500ms
     b32:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <LED_TASK.2647>
     b36:	30 91 7f 02 	lds	r19, 0x027F	; 0x80027f <LED_TASK.2647+0x1>
     b3a:	ac 01       	movw	r20, r24
     b3c:	42 1b       	sub	r20, r18
     b3e:	53 0b       	sbc	r21, r19
     b40:	9a 01       	movw	r18, r20
     b42:	24 3f       	cpi	r18, 0xF4	; 244
     b44:	31 40       	sbci	r19, 0x01	; 1
     b46:	38 f0       	brcs	.+14     	; 0xb56 <L_getUptimeEnd395+0x24>
     b48:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <LED_TASK.2647+0x1>
     b4c:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <LED_TASK.2647>
            LED2_TOGGLE();
     b50:	82 b1       	in	r24, 0x02	; 2
     b52:	81 27       	eor	r24, r17
     b54:	82 b9       	out	0x02, r24	; 2
     b56:	f0 99       	sbic	0x1e, 0	; 30
     b58:	05 c0       	rjmp	.+10     	; 0xb64 <L_getUptimeIndex1416>
     b5a:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <timeTask_uptime>
     b5e:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <timeTask_uptime+0x1>
     b62:	04 c0       	rjmp	.+8      	; 0xb6c <L_getUptimeEnd416>

00000b64 <L_getUptimeIndex1416>:
     b64:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <timeTask_uptime+0x2>
     b68:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <timeTask_uptime+0x3>

00000b6c <L_getUptimeEnd416>:
        }

        TIMETASK(TELEMETRY_TASK, 300) { // execute block approximately every 300ms
     b6c:	20 91 7c 02 	lds	r18, 0x027C	; 0x80027c <TELEMETRY_TASK.2650>
     b70:	30 91 7d 02 	lds	r19, 0x027D	; 0x80027d <TELEMETRY_TASK.2650+0x1>
     b74:	fc 01       	movw	r30, r24
     b76:	e2 1b       	sub	r30, r18
     b78:	f3 0b       	sbc	r31, r19
     b7a:	9f 01       	movw	r18, r30
     b7c:	2c 32       	cpi	r18, 0x2C	; 44
     b7e:	31 40       	sbci	r19, 0x01	; 1
     b80:	08 f4       	brcc	.+2      	; 0xb84 <L_getUptimeEnd416+0x18>
     b82:	43 c0       	rjmp	.+134    	; 0xc0a <L_getUptimeEnd416+0x9e>
     b84:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <TELEMETRY_TASK.2650+0x1>
     b88:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <TELEMETRY_TASK.2650>
            // send telemetry data to HWPCS
            Telemetry_t telemetry;
            telemetry.bumpers = bumper_getBumpers(); // initialize with zero
     b8c:	0e 94 24 02 	call	0x448	; 0x448 <bumper_getBumpers>
     b90:	89 83       	std	Y+1, r24	; 0x01
            telemetry.contacts = bumper_getContacts();
     b92:	0e 94 27 02 	call	0x44e	; 0x44e <bumper_getContacts>
     b96:	8a 83       	std	Y+2, r24	; 0x02
            telemetry.encoder1 = encoder_getCounterR();
     b98:	0e 94 00 03 	call	0x600	; 0x600 <encoder_getCounterR>
     b9c:	9c 83       	std	Y+4, r25	; 0x04
     b9e:	8b 83       	std	Y+3, r24	; 0x03
            telemetry.encoder2 = encoder_getCounterL();
     ba0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <encoder_getCounterL>
     ba4:	9e 83       	std	Y+6, r25	; 0x06
     ba6:	8d 83       	std	Y+5, r24	; 0x05
            telemetry.infrared1 = ADC_getFilteredValue(0); //Front
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <ADC_getFilteredValue>
     bae:	98 87       	std	Y+8, r25	; 0x08
     bb0:	8f 83       	std	Y+7, r24	; 0x07
            telemetry.infrared2 = ADC_getFilteredValue(1); //Right
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <ADC_getFilteredValue>
     bb8:	9a 87       	std	Y+10, r25	; 0x0a
     bba:	89 87       	std	Y+9, r24	; 0x09
            telemetry.infrared3 = ADC_getFilteredValue(2); //Left
     bbc:	82 e0       	ldi	r24, 0x02	; 2
     bbe:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <ADC_getFilteredValue>
     bc2:	9c 87       	std	Y+12, r25	; 0x0c
     bc4:	8b 87       	std	Y+11, r24	; 0x0b
            telemetry.infrared4 = 0;
     bc6:	1e 86       	std	Y+14, r1	; 0x0e
     bc8:	1d 86       	std	Y+13, r1	; 0x0d
            telemetry.infrared5 = 0;
     bca:	18 8a       	std	Y+16, r1	; 0x10
     bcc:	1f 86       	std	Y+15, r1	; 0x0f
            telemetry.user1 = position_getExpectedPose()->theta;
     bce:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <position_getExpectedPose>
     bd2:	fc 01       	movw	r30, r24
     bd4:	60 85       	ldd	r22, Z+8	; 0x08
     bd6:	71 85       	ldd	r23, Z+9	; 0x09
     bd8:	82 85       	ldd	r24, Z+10	; 0x0a
     bda:	93 85       	ldd	r25, Z+11	; 0x0b
     bdc:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <__fixsfsi>
     be0:	7a 8b       	std	Y+18, r23	; 0x12
     be2:	69 8b       	std	Y+17, r22	; 0x11
            telemetry.user2 = ownLaby_getRobotPose()->theta;
     be4:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <ownLaby_getRobotPose>
     be8:	fc 01       	movw	r30, r24
     bea:	80 85       	ldd	r24, Z+8	; 0x08
     bec:	91 85       	ldd	r25, Z+9	; 0x09
     bee:	a2 85       	ldd	r26, Z+10	; 0x0a
     bf0:	b3 85       	ldd	r27, Z+11	; 0x0b
     bf2:	8b 8b       	std	Y+19, r24	; 0x13
     bf4:	9c 8b       	std	Y+20, r25	; 0x14
     bf6:	ad 8b       	std	Y+21, r26	; 0x15
     bf8:	be 8b       	std	Y+22, r27	; 0x16
            communication_writePacket(CH_OUT_TELEMETRY, (uint8_t*)&telemetry, sizeof(telemetry));
     bfa:	46 e1       	ldi	r20, 0x16	; 22
     bfc:	50 e0       	ldi	r21, 0x00	; 0
     bfe:	be 01       	movw	r22, r28
     c00:	6f 5f       	subi	r22, 0xFF	; 255
     c02:	7f 4f       	sbci	r23, 0xFF	; 255
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <communication_writePacket>
     c0a:	f0 99       	sbic	0x1e, 0	; 30
     c0c:	05 c0       	rjmp	.+10     	; 0xc18 <L_getUptimeIndex1488>
     c0e:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <timeTask_uptime>
     c12:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <timeTask_uptime+0x1>
     c16:	04 c0       	rjmp	.+8      	; 0xc20 <L_getUptimeEnd488>

00000c18 <L_getUptimeIndex1488>:
     c18:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <timeTask_uptime+0x2>
     c1c:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <timeTask_uptime+0x3>

00000c20 <L_getUptimeEnd488>:
        }
	
		TIMETASK(POSE_TASK, 150) { // execute block approximately every 150ms				alter Timetask der OHNE APRILTAG arbeitet
     c20:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <POSE_TASK.2654>
     c24:	30 91 7b 02 	lds	r19, 0x027B	; 0x80027b <POSE_TASK.2654+0x1>
     c28:	ac 01       	movw	r20, r24
     c2a:	42 1b       	sub	r20, r18
     c2c:	53 0b       	sbc	r21, r19
     c2e:	46 39       	cpi	r20, 0x96	; 150
     c30:	51 05       	cpc	r21, r1
     c32:	80 f0       	brcs	.+32     	; 0xc54 <L_getUptimeEnd488+0x34>
     c34:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <POSE_TASK.2654+0x1>
     c38:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <POSE_TASK.2654>
			Pose_t* truePose = position_getAprilTagPose();
     c3c:	0e 94 66 0c 	call	0x18cc	; 0x18cc <position_getAprilTagPose>
			position_setExpectedPose(truePose);
     c40:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <position_setExpectedPose>
			const Pose_t* expectedPose = position_getExpectedPose();						
     c44:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <position_getExpectedPose>
			// send pose update to HWPCS
			communication_writePacket(CH_OUT_POSE, (uint8_t*)expectedPose, sizeof(*expectedPose));
     c48:	4c e0       	ldi	r20, 0x0C	; 12
     c4a:	50 e0       	ldi	r21, 0x00	; 0
     c4c:	bc 01       	movw	r22, r24
     c4e:	82 e0       	ldi	r24, 0x02	; 2
     c50:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <communication_writePacket>
     c54:	f0 99       	sbic	0x1e, 0	; 30
     c56:	05 c0       	rjmp	.+10     	; 0xc62 <L_getUptimeIndex1526>
     c58:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <timeTask_uptime>
     c5c:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <timeTask_uptime+0x1>
     c60:	04 c0       	rjmp	.+8      	; 0xc6a <L_getUptimeEnd526>

00000c62 <L_getUptimeIndex1526>:
     c62:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <timeTask_uptime+0x2>
     c66:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <timeTask_uptime+0x3>

00000c6a <L_getUptimeEnd526>:
		}
		
		TIMETASK(APRIL_TAG_TASK, 150){ //GetPose_t um Daten von MAIN_APRIL_TAG zu requesten
     c6a:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <APRIL_TAG_TASK.2659>
     c6e:	30 91 79 02 	lds	r19, 0x0279	; 0x800279 <APRIL_TAG_TASK.2659+0x1>
     c72:	fc 01       	movw	r30, r24
     c74:	e2 1b       	sub	r30, r18
     c76:	f3 0b       	sbc	r31, r19
     c78:	e6 39       	cpi	r30, 0x96	; 150
     c7a:	f1 05       	cpc	r31, r1
     c7c:	68 f0       	brcs	.+26     	; 0xc98 <L_getUptimeEnd526+0x2e>
     c7e:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <APRIL_TAG_TASK.2659+0x1>
     c82:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <APRIL_TAG_TASK.2659>
			GetPose_t aprilTag;
			aprilTag.aprilTagType = APRIL_TAG_MAIN;
     c86:	19 82       	std	Y+1, r1	; 0x01
			communication_writePacket(CH_OUT_GET_POSE, (uint8_t*)&aprilTag, sizeof(aprilTag));
     c88:	41 e0       	ldi	r20, 0x01	; 1
     c8a:	50 e0       	ldi	r21, 0x00	; 0
     c8c:	be 01       	movw	r22, r28
     c8e:	6f 5f       	subi	r22, 0xFF	; 255
     c90:	7f 4f       	sbci	r23, 0xFF	; 255
     c92:	85 e0       	ldi	r24, 0x05	; 5
     c94:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <communication_writePacket>
     c98:	f0 99       	sbic	0x1e, 0	; 30
     c9a:	05 c0       	rjmp	.+10     	; 0xca6 <L_getUptimeIndex1552>
     c9c:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <timeTask_uptime>
     ca0:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <timeTask_uptime+0x1>
     ca4:	04 c0       	rjmp	.+8      	; 0xcae <L_getUptimeEnd552>

00000ca6 <L_getUptimeIndex1552>:
     ca6:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <timeTask_uptime+0x2>
     caa:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <timeTask_uptime+0x3>

00000cae <L_getUptimeEnd552>:
		}
		
		TIMETASK(APRIL_POSE_TASK, 150) { // TimeTask der Pose von AprilTag nimmt
     cae:	20 91 76 02 	lds	r18, 0x0276	; 0x800276 <APRIL_POSE_TASK.2663>
     cb2:	30 91 77 02 	lds	r19, 0x0277	; 0x800277 <APRIL_POSE_TASK.2663+0x1>
     cb6:	ac 01       	movw	r20, r24
     cb8:	42 1b       	sub	r20, r18
     cba:	53 0b       	sbc	r21, r19
     cbc:	46 39       	cpi	r20, 0x96	; 150
     cbe:	51 05       	cpc	r21, r1
     cc0:	d0 f0       	brcs	.+52     	; 0xcf6 <L_getUptimeEnd552+0x48>
     cc2:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <APRIL_POSE_TASK.2663+0x1>
     cc6:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <APRIL_POSE_TASK.2663>
			Pose_t* truePose = position_getAprilTagPose();
     cca:	0e 94 66 0c 	call	0x18cc	; 0x18cc <position_getAprilTagPose>
     cce:	9a 83       	std	Y+2, r25	; 0x02
     cd0:	89 83       	std	Y+1, r24	; 0x01
			const LPose_t* labyPose = ownLaby_getPose();
     cd2:	0e 94 b6 06 	call	0xd6c	; 0xd6c <ownLaby_getPose>
     cd6:	7c 01       	movw	r14, r24
			//Pose_t* expectedPose = position_getAprilTagPose();
			ownLaby_setPose(truePose);
     cd8:	89 81       	ldd	r24, Y+1	; 0x01
     cda:	9a 81       	ldd	r25, Y+2	; 0x02
     cdc:	0e 94 b9 06 	call	0xd72	; 0xd72 <ownLaby_setPose>
			ownLaby_setRobotPose(labyPose);
     ce0:	c7 01       	movw	r24, r14
     ce2:	0e 94 5e 07 	call	0xebc	; 0xebc <ownLaby_setRobotPose>
			// send pose update to HWPCS
			communication_writePacket(CH_OUT_POSE, (uint8_t*)&truePose, sizeof(truePose));
     ce6:	42 e0       	ldi	r20, 0x02	; 2
     ce8:	50 e0       	ldi	r21, 0x00	; 0
     cea:	be 01       	movw	r22, r28
     cec:	6f 5f       	subi	r22, 0xFF	; 255
     cee:	7f 4f       	sbci	r23, 0xFF	; 255
     cf0:	82 e0       	ldi	r24, 0x02	; 2
     cf2:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <communication_writePacket>
     cf6:	f0 99       	sbic	0x1e, 0	; 30
     cf8:	05 c0       	rjmp	.+10     	; 0xd04 <L_getUptimeIndex1593>
     cfa:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <timeTask_uptime>
     cfe:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <timeTask_uptime+0x1>
     d02:	04 c0       	rjmp	.+8      	; 0xd0c <L_getUptimeEnd593>

00000d04 <L_getUptimeIndex1593>:
     d04:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <timeTask_uptime+0x2>
     d08:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <timeTask_uptime+0x3>

00000d0c <L_getUptimeEnd593>:
		}
        
		 TIMETASK(FOLLOWER_TASK, 20) {	
     d0c:	20 91 74 02 	lds	r18, 0x0274	; 0x800274 <FOLLOWER_TASK.2668>
     d10:	30 91 75 02 	lds	r19, 0x0275	; 0x800275 <FOLLOWER_TASK.2668+0x1>
     d14:	fc 01       	movw	r30, r24
     d16:	e2 1b       	sub	r30, r18
     d18:	f3 0b       	sbc	r31, r19
     d1a:	74 97       	sbiw	r30, 0x14	; 20
     d1c:	08 f4       	brcc	.+2      	; 0xd20 <L_getUptimeEnd593+0x14>
     d1e:	d7 ce       	rjmp	.-594    	; 0xace <main+0x90>
     d20:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <FOLLOWER_TASK.2668+0x1>
     d24:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <FOLLOWER_TASK.2668>
			const PathFollowerStatus_t* pathFollower_status = pathFollower_getStatus();
     d28:	0e 94 a5 1a 	call	0x354a	; 0x354a <pathFollower_getStatus>
     d2c:	7c 01       	movw	r14, r24
			if (pathFollower_status->enabled) {
     d2e:	fc 01       	movw	r30, r24
     d30:	80 81       	ld	r24, Z
     d32:	88 23       	and	r24, r24
     d34:	09 f4       	brne	.+2      	; 0xd38 <L_getUptimeEnd593+0x2c>
     d36:	cb ce       	rjmp	.-618    	; 0xace <main+0x90>
				const Pose_t* expectedPose = position_getExpectedPose();
     d38:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <position_getExpectedPose>
     d3c:	6c 01       	movw	r12, r24
				if (pathFollower_update(expectedPose))
     d3e:	0e 94 3f 12 	call	0x247e	; 0x247e <pathFollower_update>
     d42:	88 23       	and	r24, r24
     d44:	69 f0       	breq	.+26     	; 0xd60 <L_getUptimeEnd593+0x54>
					calculateDriveCommand(expectedPose, &pathFollower_status->lookahead);
     d46:	b7 01       	movw	r22, r14
     d48:	67 5f       	subi	r22, 0xF7	; 247
     d4a:	7f 4f       	sbci	r23, 0xFF	; 255
     d4c:	c6 01       	movw	r24, r12
     d4e:	0e 94 b5 0b 	call	0x176a	; 0x176a <calculateDriveCommand>
				else{
					Motor_stopAll();
					pathFollower_command(FOLLOWER_CMD_RESET);	
				}
				communication_writePacket(CH_OUT_PATH_FOLLOW_STATUS, (uint8_t*)pathFollower_status, sizeof(*pathFollower_status)); // send pathFollower_status on channel CH_OUT_PATH_FOLLOW_STATUS
     d52:	41 e1       	ldi	r20, 0x11	; 17
     d54:	50 e0       	ldi	r21, 0x00	; 0
     d56:	b7 01       	movw	r22, r14
     d58:	83 e0       	ldi	r24, 0x03	; 3
     d5a:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <communication_writePacket>
     d5e:	b7 ce       	rjmp	.-658    	; 0xace <main+0x90>
			if (pathFollower_status->enabled) {
				const Pose_t* expectedPose = position_getExpectedPose();
				if (pathFollower_update(expectedPose))
					calculateDriveCommand(expectedPose, &pathFollower_status->lookahead);
				else{
					Motor_stopAll();
     d60:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <Motor_stopAll>
					pathFollower_command(FOLLOWER_CMD_RESET);	
     d64:	83 e0       	ldi	r24, 0x03	; 3
     d66:	0e 94 19 12 	call	0x2432	; 0x2432 <pathFollower_command>
     d6a:	f3 cf       	rjmp	.-26     	; 0xd52 <L_getUptimeEnd593+0x46>

00000d6c <ownLaby_getPose>:
	bool canMove = true;
	if(robot_isWall(localDirection) == true){
		canMove = false;
	}
	return canMove;	
}
     d6c:	84 e1       	ldi	r24, 0x14	; 20
     d6e:	92 e0       	ldi	r25, 0x02	; 2
     d70:	08 95       	ret

00000d72 <ownLaby_setPose>:
     d72:	cf 92       	push	r12
     d74:	df 92       	push	r13
     d76:	ef 92       	push	r14
     d78:	ff 92       	push	r15
     d7a:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <position_getExpectedPose>
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	4a ef       	ldi	r20, 0xFA	; 250
     d84:	52 e4       	ldi	r21, 0x42	; 66
     d86:	fc 01       	movw	r30, r24
     d88:	60 81       	ld	r22, Z
     d8a:	71 81       	ldd	r23, Z+1	; 0x01
     d8c:	82 81       	ldd	r24, Z+2	; 0x02
     d8e:	93 81       	ldd	r25, Z+3	; 0x03
     d90:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__addsf3>
     d94:	2d ec       	ldi	r18, 0xCD	; 205
     d96:	3c e4       	ldi	r19, 0x4C	; 76
     d98:	4d e7       	ldi	r20, 0x7D	; 125
     d9a:	53 e4       	ldi	r21, 0x43	; 67
     d9c:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__divsf3>
     da0:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <floor>
     da4:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <__fixunssfsi>
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	40 e4       	ldi	r20, 0x40	; 64
     db8:	50 e4       	ldi	r21, 0x40	; 64
     dba:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__addsf3>
     dbe:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <__fixunssfsi>
     dc2:	60 93 14 02 	sts	0x0214, r22	; 0x800214 <labyPose>
     dc6:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <position_getExpectedPose>
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	4a ef       	ldi	r20, 0xFA	; 250
     dd0:	52 e4       	ldi	r21, 0x42	; 66
     dd2:	fc 01       	movw	r30, r24
     dd4:	64 81       	ldd	r22, Z+4	; 0x04
     dd6:	75 81       	ldd	r23, Z+5	; 0x05
     dd8:	86 81       	ldd	r24, Z+6	; 0x06
     dda:	97 81       	ldd	r25, Z+7	; 0x07
     ddc:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__addsf3>
     de0:	2d ec       	ldi	r18, 0xCD	; 205
     de2:	3c e4       	ldi	r19, 0x4C	; 76
     de4:	4d e7       	ldi	r20, 0x7D	; 125
     de6:	53 e4       	ldi	r21, 0x43	; 67
     de8:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__divsf3>
     dec:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <floor>
     df0:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <__fixunssfsi>
     df4:	70 e0       	ldi	r23, 0x00	; 0
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	40 e4       	ldi	r20, 0x40	; 64
     e04:	50 e4       	ldi	r21, 0x40	; 64
     e06:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__addsf3>
     e0a:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <__fixunssfsi>
     e0e:	60 93 15 02 	sts	0x0215, r22	; 0x800215 <labyPose+0x1>
     e12:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <position_getExpectedPose>
     e16:	2b ed       	ldi	r18, 0xDB	; 219
     e18:	3f e0       	ldi	r19, 0x0F	; 15
     e1a:	49 e4       	ldi	r20, 0x49	; 73
     e1c:	5f e3       	ldi	r21, 0x3F	; 63
     e1e:	fc 01       	movw	r30, r24
     e20:	60 85       	ldd	r22, Z+8	; 0x08
     e22:	71 85       	ldd	r23, Z+9	; 0x09
     e24:	82 85       	ldd	r24, Z+10	; 0x0a
     e26:	93 85       	ldd	r25, Z+11	; 0x0b
     e28:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__addsf3>
     e2c:	6b 01       	movw	r12, r22
     e2e:	7c 01       	movw	r14, r24
     e30:	2b ed       	ldi	r18, 0xDB	; 219
     e32:	3f e0       	ldi	r19, 0x0F	; 15
     e34:	49 ec       	ldi	r20, 0xC9	; 201
     e36:	50 e4       	ldi	r21, 0x40	; 64
     e38:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <__gesf2>
     e3c:	87 fd       	sbrc	r24, 7
     e3e:	0a c0       	rjmp	.+20     	; 0xe54 <ownLaby_setPose+0xe2>
     e40:	2b ed       	ldi	r18, 0xDB	; 219
     e42:	3f e0       	ldi	r19, 0x0F	; 15
     e44:	49 ec       	ldi	r20, 0xC9	; 201
     e46:	50 e4       	ldi	r21, 0x40	; 64
     e48:	c7 01       	movw	r24, r14
     e4a:	b6 01       	movw	r22, r12
     e4c:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
     e50:	6b 01       	movw	r12, r22
     e52:	7c 01       	movw	r14, r24
     e54:	2b ed       	ldi	r18, 0xDB	; 219
     e56:	3f e0       	ldi	r19, 0x0F	; 15
     e58:	49 ec       	ldi	r20, 0xC9	; 201
     e5a:	5f e3       	ldi	r21, 0x3F	; 63
     e5c:	c7 01       	movw	r24, r14
     e5e:	b6 01       	movw	r22, r12
     e60:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__divsf3>
     e64:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <floor>
     e68:	9b 01       	movw	r18, r22
     e6a:	ac 01       	movw	r20, r24
     e6c:	60 e0       	ldi	r22, 0x00	; 0
     e6e:	70 e0       	ldi	r23, 0x00	; 0
     e70:	80 ea       	ldi	r24, 0xA0	; 160
     e72:	90 e4       	ldi	r25, 0x40	; 64
     e74:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
     e78:	6b 01       	movw	r12, r22
     e7a:	7c 01       	movw	r14, r24
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	40 e8       	ldi	r20, 0x80	; 128
     e82:	50 e4       	ldi	r21, 0x40	; 64
     e84:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <__gesf2>
     e88:	87 fd       	sbrc	r24, 7
     e8a:	0a c0       	rjmp	.+20     	; 0xea0 <ownLaby_setPose+0x12e>
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	40 e8       	ldi	r20, 0x80	; 128
     e92:	50 e4       	ldi	r21, 0x40	; 64
     e94:	c7 01       	movw	r24, r14
     e96:	b6 01       	movw	r22, r12
     e98:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
     e9c:	6b 01       	movw	r12, r22
     e9e:	7c 01       	movw	r14, r24
     ea0:	c7 01       	movw	r24, r14
     ea2:	b6 01       	movw	r22, r12
     ea4:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <__fixunssfsi>
     ea8:	60 93 16 02 	sts	0x0216, r22	; 0x800216 <labyPose+0x2>
     eac:	ff 90       	pop	r15
     eae:	ef 90       	pop	r14
     eb0:	df 90       	pop	r13
     eb2:	cf 90       	pop	r12
     eb4:	08 95       	ret

00000eb6 <ownLaby_getRobotPose>:
     eb6:	88 e0       	ldi	r24, 0x08	; 8
     eb8:	92 e0       	ldi	r25, 0x02	; 2
     eba:	08 95       	ret

00000ebc <ownLaby_setRobotPose>:
     ebc:	cf 93       	push	r28
     ebe:	df 93       	push	r29
     ec0:	ec 01       	movw	r28, r24
     ec2:	68 81       	ld	r22, Y
     ec4:	70 e0       	ldi	r23, 0x00	; 0
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <__floatunsisf>
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	40 e4       	ldi	r20, 0x40	; 64
     ed4:	50 e4       	ldi	r21, 0x40	; 64
     ed6:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
     eda:	2d ec       	ldi	r18, 0xCD	; 205
     edc:	3c e4       	ldi	r19, 0x4C	; 76
     ede:	4d e7       	ldi	r20, 0x7D	; 125
     ee0:	53 e4       	ldi	r21, 0x43	; 67
     ee2:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <__mulsf3>
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	4a ef       	ldi	r20, 0xFA	; 250
     eec:	52 e4       	ldi	r21, 0x42	; 66
     eee:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
     ef2:	60 93 08 02 	sts	0x0208, r22	; 0x800208 <labyRobotPose>
     ef6:	70 93 09 02 	sts	0x0209, r23	; 0x800209 <labyRobotPose+0x1>
     efa:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <labyRobotPose+0x2>
     efe:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <labyRobotPose+0x3>
     f02:	69 81       	ldd	r22, Y+1	; 0x01
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <__floatunsisf>
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	40 e4       	ldi	r20, 0x40	; 64
     f14:	50 e4       	ldi	r21, 0x40	; 64
     f16:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
     f1a:	2d ec       	ldi	r18, 0xCD	; 205
     f1c:	3c e4       	ldi	r19, 0x4C	; 76
     f1e:	4d e7       	ldi	r20, 0x7D	; 125
     f20:	53 e4       	ldi	r21, 0x43	; 67
     f22:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <__mulsf3>
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	4a ef       	ldi	r20, 0xFA	; 250
     f2c:	52 e4       	ldi	r21, 0x42	; 66
     f2e:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
     f32:	60 93 0c 02 	sts	0x020C, r22	; 0x80020c <labyRobotPose+0x4>
     f36:	70 93 0d 02 	sts	0x020D, r23	; 0x80020d <labyRobotPose+0x5>
     f3a:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <labyRobotPose+0x6>
     f3e:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <labyRobotPose+0x7>
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	81 30       	cpi	r24, 0x01	; 1
     f46:	89 f0       	breq	.+34     	; 0xf6a <ownLaby_setRobotPose+0xae>
     f48:	81 11       	cpse	r24, r1
     f4a:	1a c0       	rjmp	.+52     	; 0xf80 <ownLaby_setRobotPose+0xc4>
     f4c:	8b ed       	ldi	r24, 0xDB	; 219
     f4e:	9f e0       	ldi	r25, 0x0F	; 15
     f50:	a9 ec       	ldi	r26, 0xC9	; 201
     f52:	bf e3       	ldi	r27, 0x3F	; 63
     f54:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <labyRobotPose+0x8>
     f58:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <labyRobotPose+0x9>
     f5c:	a0 93 12 02 	sts	0x0212, r26	; 0x800212 <labyRobotPose+0xa>
     f60:	b0 93 13 02 	sts	0x0213, r27	; 0x800213 <labyRobotPose+0xb>
     f64:	df 91       	pop	r29
     f66:	cf 91       	pop	r28
     f68:	08 95       	ret
     f6a:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <labyRobotPose+0x8>
     f6e:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <labyRobotPose+0x9>
     f72:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <labyRobotPose+0xa>
     f76:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <labyRobotPose+0xb>
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	08 95       	ret
     f80:	83 30       	cpi	r24, 0x03	; 3
     f82:	79 f4       	brne	.+30     	; 0xfa2 <ownLaby_setRobotPose+0xe6>
     f84:	8b ed       	ldi	r24, 0xDB	; 219
     f86:	9f e0       	ldi	r25, 0x0F	; 15
     f88:	a9 e4       	ldi	r26, 0x49	; 73
     f8a:	b0 e4       	ldi	r27, 0x40	; 64
     f8c:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <labyRobotPose+0x8>
     f90:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <labyRobotPose+0x9>
     f94:	a0 93 12 02 	sts	0x0212, r26	; 0x800212 <labyRobotPose+0xa>
     f98:	b0 93 13 02 	sts	0x0213, r27	; 0x800213 <labyRobotPose+0xb>
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	08 95       	ret
     fa2:	82 30       	cpi	r24, 0x02	; 2
     fa4:	f9 f6       	brne	.-66     	; 0xf64 <ownLaby_setRobotPose+0xa8>
     fa6:	84 ee       	ldi	r24, 0xE4	; 228
     fa8:	9b ec       	ldi	r25, 0xCB	; 203
     faa:	a6 e9       	ldi	r26, 0x96	; 150
     fac:	b0 e4       	ldi	r27, 0x40	; 64
     fae:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <labyRobotPose+0x8>
     fb2:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <labyRobotPose+0x9>
     fb6:	a0 93 12 02 	sts	0x0212, r26	; 0x800212 <labyRobotPose+0xa>
     fba:	b0 93 13 02 	sts	0x0213, r27	; 0x800213 <labyRobotPose+0xb>
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	08 95       	ret

00000fc4 <ownLaby_init>:
     fc4:	82 e6       	ldi	r24, 0x62	; 98
     fc6:	ef e0       	ldi	r30, 0x0F	; 15
     fc8:	f7 e0       	ldi	r31, 0x07	; 7
     fca:	df 01       	movw	r26, r30
     fcc:	1d 92       	st	X+, r1
     fce:	8a 95       	dec	r24
     fd0:	e9 f7       	brne	.-6      	; 0xfcc <ownLaby_init+0x8>
     fd2:	ab e0       	ldi	r26, 0x0B	; 11
     fd4:	b7 e0       	ldi	r27, 0x07	; 7
     fd6:	11 96       	adiw	r26, 0x01	; 1
     fd8:	8c 91       	ld	r24, X
     fda:	11 97       	sbiw	r26, 0x01	; 1
     fdc:	ed e0       	ldi	r30, 0x0D	; 13
     fde:	f7 e0       	ldi	r31, 0x07	; 7
     fe0:	9c 91       	ld	r25, X
     fe2:	93 50       	subi	r25, 0x03	; 3
     fe4:	90 83       	st	Z, r25
     fe6:	83 50       	subi	r24, 0x03	; 3
     fe8:	81 83       	std	Z+1, r24	; 0x01
     fea:	08 95       	ret

00000fec <robot_rotate>:
     fec:	88 23       	and	r24, r24
     fee:	29 f0       	breq	.+10     	; 0xffa <robot_rotate+0xe>
     ff0:	82 30       	cpi	r24, 0x02	; 2
     ff2:	49 f0       	breq	.+18     	; 0x1006 <__EEPROM_REGION_LENGTH__+0x6>
     ff4:	83 30       	cpi	r24, 0x03	; 3
     ff6:	21 f0       	breq	.+8      	; 0x1000 <__EEPROM_REGION_LENGTH__>
     ff8:	08 95       	ret
     ffa:	85 e0       	ldi	r24, 0x05	; 5
     ffc:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <setState>
    1000:	87 e0       	ldi	r24, 0x07	; 7
    1002:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <setState>
    1006:	86 e0       	ldi	r24, 0x06	; 6
    1008:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <setState>

0000100c <robot_isWall>:
    100c:	cf 92       	push	r12
    100e:	df 92       	push	r13
    1010:	ef 92       	push	r14
    1012:	ff 92       	push	r15
    1014:	0f 93       	push	r16
    1016:	1f 93       	push	r17
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
    101c:	e8 2e       	mov	r14, r24
    101e:	c0 90 14 02 	lds	r12, 0x0214	; 0x800214 <labyPose>
    1022:	d0 90 15 02 	lds	r13, 0x0215	; 0x800215 <labyPose+0x1>
    1026:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <labyPose+0x2>
    102a:	8e 0d       	add	r24, r14
    102c:	cf ef       	ldi	r28, 0xFF	; 255
    102e:	c8 0f       	add	r28, r24
    1030:	c4 30       	cpi	r28, 0x04	; 4
    1032:	14 f0       	brlt	.+4      	; 0x1038 <robot_isWall+0x2c>
    1034:	cb ef       	ldi	r28, 0xFB	; 251
    1036:	c8 0f       	add	r28, r24
    1038:	c7 fd       	sbrc	r28, 7
    103a:	4b c0       	rjmp	.+150    	; 0x10d2 <robot_isWall+0xc6>
    103c:	6d 2d       	mov	r22, r13
    103e:	8c 2d       	mov	r24, r12
    1040:	0e 94 cd 1a 	call	0x359a	; 0x359a <labyrinth_getWalls>
    1044:	f8 2e       	mov	r15, r24
    1046:	d8 2f       	mov	r29, r24
    1048:	df 70       	andi	r29, 0x0F	; 15
    104a:	01 e0       	ldi	r16, 0x01	; 1
    104c:	10 e0       	ldi	r17, 0x00	; 0
    104e:	0c 2e       	mov	r0, r28
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <robot_isWall+0x4a>
    1052:	00 0f       	add	r16, r16
    1054:	11 1f       	adc	r17, r17
    1056:	0a 94       	dec	r0
    1058:	e2 f7       	brpl	.-8      	; 0x1052 <robot_isWall+0x46>
    105a:	8d 2f       	mov	r24, r29
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	80 23       	and	r24, r16
    1060:	91 23       	and	r25, r17
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <robot_isWall+0x5c>
    1064:	95 95       	asr	r25
    1066:	87 95       	ror	r24
    1068:	ca 95       	dec	r28
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <robot_isWall+0x58>
    106c:	c1 e0       	ldi	r28, 0x01	; 1
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	91 05       	cpc	r25, r1
    1072:	09 f0       	breq	.+2      	; 0x1076 <robot_isWall+0x6a>
    1074:	c0 e0       	ldi	r28, 0x00	; 0
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	11 f1       	breq	.+68     	; 0x10be <robot_isWall+0xb2>
    107a:	0e 94 77 04 	call	0x8ee	; 0x8ee <IR_getIR_value>
    107e:	21 e0       	ldi	r18, 0x01	; 1
    1080:	e2 16       	cp	r14, r18
    1082:	49 f1       	breq	.+82     	; 0x10d6 <robot_isWall+0xca>
    1084:	e1 10       	cpse	r14, r1
    1086:	2f c0       	rjmp	.+94     	; 0x10e6 <robot_isWall+0xda>
    1088:	fc 01       	movw	r30, r24
    108a:	64 81       	ldd	r22, Z+4	; 0x04
    108c:	75 81       	ldd	r23, Z+5	; 0x05
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <__floatunsisf>
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	48 e4       	ldi	r20, 0x48	; 72
    109c:	52 e4       	ldi	r21, 0x42	; 66
    109e:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <__cmpsf2>
    10a2:	87 ff       	sbrs	r24, 7
    10a4:	0c c0       	rjmp	.+24     	; 0x10be <robot_isWall+0xb2>
    10a6:	0d 2b       	or	r16, r29
    10a8:	0f 70       	andi	r16, 0x0F	; 15
    10aa:	8f 2d       	mov	r24, r15
    10ac:	80 7f       	andi	r24, 0xF0	; 240
    10ae:	f8 2e       	mov	r15, r24
    10b0:	f0 2a       	or	r15, r16
    10b2:	4f 2d       	mov	r20, r15
    10b4:	6d 2d       	mov	r22, r13
    10b6:	8c 2d       	mov	r24, r12
    10b8:	0e 94 42 1b 	call	0x3684	; 0x3684 <labyrinth_setWalls>
    10bc:	c1 e0       	ldi	r28, 0x01	; 1
    10be:	8c 2f       	mov	r24, r28
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	1f 91       	pop	r17
    10c6:	0f 91       	pop	r16
    10c8:	ff 90       	pop	r15
    10ca:	ef 90       	pop	r14
    10cc:	df 90       	pop	r13
    10ce:	cf 90       	pop	r12
    10d0:	08 95       	ret
    10d2:	cc 5f       	subi	r28, 0xFC	; 252
    10d4:	b3 cf       	rjmp	.-154    	; 0x103c <robot_isWall+0x30>
    10d6:	fc 01       	movw	r30, r24
    10d8:	60 81       	ld	r22, Z
    10da:	71 81       	ldd	r23, Z+1	; 0x01
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <__floatunsisf>
    10e4:	d8 cf       	rjmp	.-80     	; 0x1096 <robot_isWall+0x8a>
    10e6:	f2 e0       	ldi	r31, 0x02	; 2
    10e8:	ef 12       	cpse	r14, r31
    10ea:	e9 cf       	rjmp	.-46     	; 0x10be <robot_isWall+0xb2>
    10ec:	fc 01       	movw	r30, r24
    10ee:	62 81       	ldd	r22, Z+2	; 0x02
    10f0:	73 81       	ldd	r23, Z+3	; 0x03
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <__floatunsisf>
    10fa:	cd cf       	rjmp	.-102    	; 0x1096 <robot_isWall+0x8a>

000010fc <robot_move.part.0>:
    10fc:	0e 94 06 08 	call	0x100c	; 0x100c <robot_isWall>
    1100:	88 23       	and	r24, r24
    1102:	11 f0       	breq	.+4      	; 0x1108 <robot_move.part.0+0xc>
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	08 95       	ret
    1108:	83 e0       	ldi	r24, 0x03	; 3
    110a:	0e 94 94 0c 	call	0x1928	; 0x1928 <setState>
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	08 95       	ret

00001112 <ownLaby_explore>:

void ownLaby_explore(){
    1112:	0f 93       	push	r16
    1114:	1f 93       	push	r17
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29

int8_t robot_getExitDirection()
{
	int8_t exitDirection = -1;
	
	if ((ownLaby_getPose()->row == 0) && (ownLaby_getPose()->column == 3)){
    111a:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <labyPose>
    111e:	81 11       	cpse	r24, r1
    1120:	05 c0       	rjmp	.+10     	; 0x112c <ownLaby_explore+0x1a>
    1122:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <labyPose+0x1>
    1126:	83 30       	cpi	r24, 0x03	; 3
    1128:	09 f4       	brne	.+2      	; 0x112c <ownLaby_explore+0x1a>
    112a:	ea c0       	rjmp	.+468    	; 0x1300 <ownLaby_explore+0x1ee>
	if (exitDir > -1) {
		robot_rotate((RobotDirection_t)exitDir);
		robot_move(FORWARD);
	}
	else {
		LPose_t pose = *ownLaby_getPose();        
    112c:	d0 91 16 02 	lds	r29, 0x0216	; 0x800216 <labyPose+0x2>

		visit_count[current_position.x][current_position.y]++;
    1130:	e0 91 0b 07 	lds	r30, 0x070B	; 0x80070b <current_position>
    1134:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <current_position+0x1>
    1138:	97 e0       	ldi	r25, 0x07	; 7
    113a:	e9 02       	muls	r30, r25
    113c:	f0 01       	movw	r30, r0
    113e:	11 24       	eor	r1, r1
    1140:	e8 0f       	add	r30, r24
    1142:	f1 1d       	adc	r31, r1
    1144:	87 fd       	sbrc	r24, 7
    1146:	fa 95       	dec	r31
    1148:	ee 0f       	add	r30, r30
    114a:	ff 1f       	adc	r31, r31
    114c:	e1 5f       	subi	r30, 0xF1	; 241
    114e:	f8 4f       	sbci	r31, 0xF8	; 248
    1150:	80 81       	ld	r24, Z
    1152:	91 81       	ldd	r25, Z+1	; 0x01
    1154:	02 96       	adiw	r24, 0x02	; 2
    1156:	91 83       	std	Z+1, r25	; 0x01
    1158:	80 83       	st	Z, r24
	return isWall;
}

bool robot_canMove(RobotDirection_t localDirection){
	bool canMove = true;
	if(robot_isWall(localDirection) == true){
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	0e 94 06 08 	call	0x100c	; 0x100c <robot_isWall>
    1160:	c1 e0       	ldi	r28, 0x01	; 1
    1162:	08 2f       	mov	r16, r24
    1164:	0c 27       	eor	r16, r28
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	0e 94 06 08 	call	0x100c	; 0x100c <robot_isWall>
    116c:	18 2f       	mov	r17, r24
    116e:	1c 27       	eor	r17, r28
    1170:	82 e0       	ldi	r24, 0x02	; 2
    1172:	0e 94 06 08 	call	0x100c	; 0x100c <robot_isWall>
    1176:	c8 27       	eor	r28, r24
		if (robot_canMove(LEFT))	{canMoveLeft	= true;}
		if (robot_canMove(FORWARD))	{canMoveForward	= true;}
	    if (robot_canMove(RIGHT))	{canMoveRight	= true;}
	                   
	    //Check direction robot is facing and calculating distances relative to its direction
	    if (pose.cardinalDirection == DIRECTION_NORTH){
    1178:	dd 23       	and	r29, r29
    117a:	09 f4       	brne	.+2      	; 0x117e <ownLaby_explore+0x6c>
    117c:	75 c0       	rjmp	.+234    	; 0x1268 <ownLaby_explore+0x156>
				ownLaby_setTargetTile(current_position, 0, -1);
			}
		}
	            	
		//Check that happens if Robot is facing Left
		if (pose.cardinalDirection == DIRECTION_WEST){
    117e:	d3 30       	cpi	r29, 0x03	; 3
    1180:	09 f0       	breq	.+2      	; 0x1184 <ownLaby_explore+0x72>
    1182:	e3 c0       	rjmp	.+454    	; 0x134a <ownLaby_explore+0x238>
			if (canMoveForward == true ) {
    1184:	11 23       	and	r17, r17
    1186:	09 f4       	brne	.+2      	; 0x118a <ownLaby_explore+0x78>
    1188:	4a c1       	rjmp	.+660    	; 0x141e <ownLaby_explore+0x30c>
				lowestVisitCount = *visit_count[current_position.x-1][current_position.y];
    118a:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <current_position>
    118e:	90 91 0c 07 	lds	r25, 0x070C	; 0x80070c <current_position+0x1>
    1192:	28 2f       	mov	r18, r24
    1194:	08 2e       	mov	r0, r24
    1196:	00 0c       	add	r0, r0
    1198:	33 0b       	sbc	r19, r19
    119a:	21 50       	subi	r18, 0x01	; 1
    119c:	31 09       	sbc	r19, r1
    119e:	f9 01       	movw	r30, r18
    11a0:	ee 0f       	add	r30, r30
    11a2:	ff 1f       	adc	r31, r31
    11a4:	ee 0f       	add	r30, r30
    11a6:	ff 1f       	adc	r31, r31
    11a8:	ee 0f       	add	r30, r30
    11aa:	ff 1f       	adc	r31, r31
    11ac:	e2 1b       	sub	r30, r18
    11ae:	f3 0b       	sbc	r31, r19
    11b0:	e9 0f       	add	r30, r25
    11b2:	f1 1d       	adc	r31, r1
    11b4:	97 fd       	sbrc	r25, 7
    11b6:	fa 95       	dec	r31
    11b8:	ee 0f       	add	r30, r30
    11ba:	ff 1f       	adc	r31, r31
    11bc:	e1 5f       	subi	r30, 0xF1	; 241
    11be:	f8 4f       	sbci	r31, 0xF8	; 248
    11c0:	01 90       	ld	r0, Z+
    11c2:	f0 81       	ld	r31, Z
    11c4:	e0 2d       	mov	r30, r0
    11c6:	40 81       	ld	r20, Z
const Position* ownLaby_getTargetTile(){
	return &target_tile;
}

void ownLaby_setTargetTile(Position current_position, int8_t x_change, int8_t y_change){
	target_tile.x = current_position.x + x_change;
    11c8:	81 50       	subi	r24, 0x01	; 1
    11ca:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <target_tile>
	target_tile.y = current_position.y + y_change;
    11ce:	90 93 0e 07 	sts	0x070E, r25	; 0x80070e <target_tile+0x1>
			if (canMoveForward == true ) {
				lowestVisitCount = *visit_count[current_position.x-1][current_position.y];
				leastVisitedDirection = FORWARD;
				ownLaby_setTargetTile(current_position, -1, 0);
			}
			if (canMoveLeft == true){
    11d2:	00 23       	and	r16, r16
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <ownLaby_explore+0xc6>
    11d6:	14 c1       	rjmp	.+552    	; 0x1400 <ownLaby_explore+0x2ee>
				if (lowestVisitCount > *visit_count[current_position.x][current_position.y-1]){
    11d8:	10 91 0b 07 	lds	r17, 0x070B	; 0x80070b <current_position>
    11dc:	61 2f       	mov	r22, r17
    11de:	01 2e       	mov	r0, r17
    11e0:	00 0c       	add	r0, r0
    11e2:	77 0b       	sbc	r23, r23
    11e4:	d0 91 0c 07 	lds	r29, 0x070C	; 0x80070c <current_position+0x1>
    11e8:	2d 2f       	mov	r18, r29
    11ea:	0d 2e       	mov	r0, r29
    11ec:	00 0c       	add	r0, r0
    11ee:	33 0b       	sbc	r19, r19
    11f0:	fb 01       	movw	r30, r22
    11f2:	ee 0f       	add	r30, r30
    11f4:	ff 1f       	adc	r31, r31
    11f6:	ee 0f       	add	r30, r30
    11f8:	ff 1f       	adc	r31, r31
    11fa:	ee 0f       	add	r30, r30
    11fc:	ff 1f       	adc	r31, r31
    11fe:	df 01       	movw	r26, r30
    1200:	a6 1b       	sub	r26, r22
    1202:	b7 0b       	sbc	r27, r23
    1204:	c9 01       	movw	r24, r18
    1206:	01 97       	sbiw	r24, 0x01	; 1
    1208:	a8 0f       	add	r26, r24
    120a:	b9 1f       	adc	r27, r25
    120c:	aa 0f       	add	r26, r26
    120e:	bb 1f       	adc	r27, r27
    1210:	a1 5f       	subi	r26, 0xF1	; 241
    1212:	b8 4f       	sbci	r27, 0xF8	; 248
    1214:	0d 90       	ld	r0, X+
    1216:	bc 91       	ld	r27, X
    1218:	a0 2d       	mov	r26, r0
    121a:	8d 91       	ld	r24, X+
    121c:	9c 91       	ld	r25, X
    121e:	a4 2f       	mov	r26, r20
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	8a 17       	cp	r24, r26
    1224:	9b 07       	cpc	r25, r27
    1226:	0c f4       	brge	.+2      	; 0x122a <ownLaby_explore+0x118>
    1228:	89 c1       	rjmp	.+786    	; 0x153c <ownLaby_explore+0x42a>
    122a:	81 e0       	ldi	r24, 0x01	; 1
					lowestVisitCount = *visit_count[current_position.x][current_position.y-1];
					leastVisitedDirection = LEFT;
					ownLaby_setTargetTile(current_position, 0, -1);
				}
			}
			if (canMoveRight == true){
    122c:	cc 23       	and	r28, r28
    122e:	09 f4       	brne	.+2      	; 0x1232 <ownLaby_explore+0x120>
    1230:	84 c0       	rjmp	.+264    	; 0x133a <ownLaby_explore+0x228>
				if (lowestVisitCount > *visit_count[current_position.x][current_position.y+1]){
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	e6 1b       	sub	r30, r22
    1236:	f7 0b       	sbc	r31, r23
    1238:	2f 5f       	subi	r18, 0xFF	; 255
    123a:	3f 4f       	sbci	r19, 0xFF	; 255
    123c:	e2 0f       	add	r30, r18
    123e:	f3 1f       	adc	r31, r19
    1240:	ee 0f       	add	r30, r30
    1242:	ff 1f       	adc	r31, r31
    1244:	e1 5f       	subi	r30, 0xF1	; 241
    1246:	f8 4f       	sbci	r31, 0xF8	; 248
    1248:	01 90       	ld	r0, Z+
    124a:	f0 81       	ld	r31, Z
    124c:	e0 2d       	mov	r30, r0
    124e:	20 81       	ld	r18, Z
    1250:	31 81       	ldd	r19, Z+1	; 0x01
    1252:	24 17       	cp	r18, r20
    1254:	35 07       	cpc	r19, r21
    1256:	0c f0       	brlt	.+2      	; 0x125a <ownLaby_explore+0x148>
    1258:	70 c0       	rjmp	.+224    	; 0x133a <ownLaby_explore+0x228>
const Position* ownLaby_getTargetTile(){
	return &target_tile;
}

void ownLaby_setTargetTile(Position current_position, int8_t x_change, int8_t y_change){
	target_tile.x = current_position.x + x_change;
    125a:	10 93 0d 07 	sts	0x070D, r17	; 0x80070d <target_tile>
	target_tile.y = current_position.y + y_change;
    125e:	df 5f       	subi	r29, 0xFF	; 255
    1260:	d0 93 0e 07 	sts	0x070E, r29	; 0x80070e <target_tile+0x1>
				}
			}
			if (canMoveRight == true){
				if (lowestVisitCount > *visit_count[current_position.x][current_position.y+1]){
					lowestVisitCount = *visit_count[current_position.x][current_position.y+1];
					leastVisitedDirection = RIGHT;
    1264:	82 e0       	ldi	r24, 0x02	; 2
    1266:	69 c0       	rjmp	.+210    	; 0x133a <ownLaby_explore+0x228>
		if (robot_canMove(FORWARD))	{canMoveForward	= true;}
	    if (robot_canMove(RIGHT))	{canMoveRight	= true;}
	                   
	    //Check direction robot is facing and calculating distances relative to its direction
	    if (pose.cardinalDirection == DIRECTION_NORTH){
			if (canMoveForward == true) {
    1268:	11 23       	and	r17, r17
    126a:	09 f4       	brne	.+2      	; 0x126e <ownLaby_explore+0x15c>
    126c:	6c c0       	rjmp	.+216    	; 0x1346 <ownLaby_explore+0x234>
				lowestVisitCount = *visit_count[current_position.x][current_position.y+1];
    126e:	90 91 0b 07 	lds	r25, 0x070B	; 0x80070b <current_position>
    1272:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <current_position+0x1>
    1276:	e8 2f       	mov	r30, r24
    1278:	08 2e       	mov	r0, r24
    127a:	00 0c       	add	r0, r0
    127c:	ff 0b       	sbc	r31, r31
    127e:	31 96       	adiw	r30, 0x01	; 1
    1280:	27 e0       	ldi	r18, 0x07	; 7
    1282:	92 02       	muls	r25, r18
    1284:	e0 0d       	add	r30, r0
    1286:	f1 1d       	adc	r31, r1
    1288:	11 24       	eor	r1, r1
    128a:	ee 0f       	add	r30, r30
    128c:	ff 1f       	adc	r31, r31
    128e:	e1 5f       	subi	r30, 0xF1	; 241
    1290:	f8 4f       	sbci	r31, 0xF8	; 248
    1292:	01 90       	ld	r0, Z+
    1294:	f0 81       	ld	r31, Z
    1296:	e0 2d       	mov	r30, r0
    1298:	20 81       	ld	r18, Z
const Position* ownLaby_getTargetTile(){
	return &target_tile;
}

void ownLaby_setTargetTile(Position current_position, int8_t x_change, int8_t y_change){
	target_tile.x = current_position.x + x_change;
    129a:	90 93 0d 07 	sts	0x070D, r25	; 0x80070d <target_tile>
	target_tile.y = current_position.y + y_change;
    129e:	8f 5f       	subi	r24, 0xFF	; 255
    12a0:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <target_tile+0x1>
			if (canMoveForward == true) {
				lowestVisitCount = *visit_count[current_position.x][current_position.y+1];
				leastVisitedDirection = FORWARD;
				ownLaby_setTargetTile(current_position, 0, 1);
			}
			if (canMoveLeft == true){
    12a4:	00 23       	and	r16, r16
    12a6:	d9 f1       	breq	.+118    	; 0x131e <ownLaby_explore+0x20c>
				if (lowestVisitCount > *visit_count[current_position.x-1][current_position.y]){
    12a8:	90 91 0b 07 	lds	r25, 0x070B	; 0x80070b <current_position>
    12ac:	69 2f       	mov	r22, r25
    12ae:	09 2e       	mov	r0, r25
    12b0:	00 0c       	add	r0, r0
    12b2:	77 0b       	sbc	r23, r23
    12b4:	d0 91 0c 07 	lds	r29, 0x070C	; 0x80070c <current_position+0x1>
    12b8:	4d 2f       	mov	r20, r29
    12ba:	0d 2e       	mov	r0, r29
    12bc:	00 0c       	add	r0, r0
    12be:	55 0b       	sbc	r21, r21
    12c0:	fb 01       	movw	r30, r22
    12c2:	31 97       	sbiw	r30, 0x01	; 1
    12c4:	df 01       	movw	r26, r30
    12c6:	aa 0f       	add	r26, r26
    12c8:	bb 1f       	adc	r27, r27
    12ca:	aa 0f       	add	r26, r26
    12cc:	bb 1f       	adc	r27, r27
    12ce:	aa 0f       	add	r26, r26
    12d0:	bb 1f       	adc	r27, r27
    12d2:	ae 1b       	sub	r26, r30
    12d4:	bf 0b       	sbc	r27, r31
    12d6:	a4 0f       	add	r26, r20
    12d8:	b5 1f       	adc	r27, r21
    12da:	aa 0f       	add	r26, r26
    12dc:	bb 1f       	adc	r27, r27
    12de:	a1 5f       	subi	r26, 0xF1	; 241
    12e0:	b8 4f       	sbci	r27, 0xF8	; 248
    12e2:	ed 91       	ld	r30, X+
    12e4:	fc 91       	ld	r31, X
    12e6:	01 90       	ld	r0, Z+
    12e8:	f0 81       	ld	r31, Z
    12ea:	e0 2d       	mov	r30, r0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	e2 17       	cp	r30, r18
    12f0:	f3 07       	cpc	r31, r19
    12f2:	0c f4       	brge	.+2      	; 0x12f6 <ownLaby_explore+0x1e4>
    12f4:	f9 c0       	rjmp	.+498    	; 0x14e8 <ownLaby_explore+0x3d6>
					lowestVisitCount = *visit_count[current_position.x-1][current_position.y];
					leastVisitedDirection = LEFT;
					ownLaby_setTargetTile(current_position, -1, 0);
				}
			}
			if (canMoveRight == true){
    12f6:	cc 23       	and	r28, r28
    12f8:	09 f4       	brne	.+2      	; 0x12fc <ownLaby_explore+0x1ea>
    12fa:	36 c1       	rjmp	.+620    	; 0x1568 <ownLaby_explore+0x456>
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	d3 c0       	rjmp	.+422    	; 0x14a6 <ownLaby_explore+0x394>
	
	if ((ownLaby_getPose()->row == 0) && (ownLaby_getPose()->column == 3)){
		if ((ownLaby_getPose()->cardinalDirection == DIRECTION_NORTH))
			exitDirection = 1;
		
		if ((ownLaby_getPose()->cardinalDirection == DIRECTION_EAST)){
    1300:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <labyPose+0x2>
    1304:	81 30       	cpi	r24, 0x01	; 1
    1306:	09 f4       	brne	.+2      	; 0x130a <ownLaby_explore+0x1f8>
    1308:	31 c1       	rjmp	.+610    	; 0x156c <ownLaby_explore+0x45a>
    130a:	82 e0       	ldi	r24, 0x02	; 2
	bool canMoveForward = false;
	char lowestVisitCount = 127;
	int8_t exitDir = robot_getExitDirection();
	
	if (exitDir > -1) {
		robot_rotate((RobotDirection_t)exitDir);
    130c:	0e 94 f6 07 	call	0xfec	; 0xfec <robot_rotate>
    1310:	81 e0       	ldi	r24, 0x01	; 1
	                fprintf(stderr, "Visited (%d)\n", visit_count[current_position.x][current_position.y]);
	                fprintf(stderr, "Current position: (%d, %d)\n", current_position.x, current_position.y);
	                fprintf(stderr, "Currently facing: %s\n", directionToString(currentFacingDirection));
	*/                   
	}
}
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	1f 91       	pop	r17
    1318:	0f 91       	pop	r16
    131a:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <robot_move.part.0>
					lowestVisitCount = *visit_count[current_position.x-1][current_position.y];
					leastVisitedDirection = LEFT;
					ownLaby_setTargetTile(current_position, -1, 0);
				}
			}
			if (canMoveRight == true){
    131e:	c1 11       	cpse	r28, r1
    1320:	b4 c0       	rjmp	.+360    	; 0x148a <ownLaby_explore+0x378>
					lowestVisitCount = *visit_count[current_position.x+1][current_position.y];
					leastVisitedDirection = RIGHT;
					ownLaby_setTargetTile(current_position, 1, 0);
				}
			}
			if (!canMoveRight && !canMoveLeft && !canMoveForward){
    1322:	11 11       	cpse	r17, r1
    1324:	21 c1       	rjmp	.+578    	; 0x1568 <ownLaby_explore+0x456>
    1326:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <current_position+0x1>
const Position* ownLaby_getTargetTile(){
	return &target_tile;
}

void ownLaby_setTargetTile(Position current_position, int8_t x_change, int8_t y_change){
	target_tile.x = current_position.x + x_change;
    132a:	90 91 0b 07 	lds	r25, 0x070B	; 0x80070b <current_position>
    132e:	90 93 0d 07 	sts	0x070D, r25	; 0x80070d <target_tile>
	target_tile.y = current_position.y + y_change;
    1332:	81 50       	subi	r24, 0x01	; 1
    1334:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <target_tile+0x1>
					leastVisitedDirection = RIGHT;
					ownLaby_setTargetTile(current_position, 1, 0);
				}
			}
			if (!canMoveRight && !canMoveLeft && !canMoveForward){
				leastVisitedDirection = BACKWARD;
    1338:	83 e0       	ldi	r24, 0x03	; 3
	                fprintf(stderr, "Visited (%d)\n", visit_count[current_position.x][current_position.y]);
	                fprintf(stderr, "Current position: (%d, %d)\n", current_position.x, current_position.y);
	                fprintf(stderr, "Currently facing: %s\n", directionToString(currentFacingDirection));
	*/                   
	}
}
    133a:	df 91       	pop	r29
    133c:	cf 91       	pop	r28
    133e:	1f 91       	pop	r17
    1340:	0f 91       	pop	r16
				ownLaby_setTargetTile(current_position, 0, 1);
			}
		}
	            		        
		//fprintf(stderr, "Rotating: %s\n", directionToString(leastVisitedDirection));
		robot_rotate(leastVisitedDirection);
    1342:	0c 94 f6 07 	jmp	0xfec	; 0xfec <robot_rotate>
void ownLaby_explore(){
	RobotDirection_t leastVisitedDirection = FORWARD;
	bool canMoveLeft	= false;
	bool canMoveRight	= false;
	bool canMoveForward = false;
	char lowestVisitCount = 127;
    1346:	2f e7       	ldi	r18, 0x7F	; 127
    1348:	ad cf       	rjmp	.-166    	; 0x12a4 <ownLaby_explore+0x192>
				ownLaby_setTargetTile(current_position, 1, 0);
			}
		}
	            	
		//Check that happens if Robot is facing Right       	
		if (pose.cardinalDirection == DIRECTION_EAST){
    134a:	d1 30       	cpi	r29, 0x01	; 1
    134c:	09 f0       	breq	.+2      	; 0x1350 <ownLaby_explore+0x23e>
    134e:	10 c1       	rjmp	.+544    	; 0x1570 <ownLaby_explore+0x45e>
			if (canMoveForward == true ) {
    1350:	11 23       	and	r17, r17
    1352:	09 f4       	brne	.+2      	; 0x1356 <ownLaby_explore+0x244>
    1354:	98 c0       	rjmp	.+304    	; 0x1486 <ownLaby_explore+0x374>
				lowestVisitCount = *visit_count[current_position.x+1][current_position.y];
    1356:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <current_position>
    135a:	90 91 0c 07 	lds	r25, 0x070C	; 0x80070c <current_position+0x1>
    135e:	28 2f       	mov	r18, r24
    1360:	08 2e       	mov	r0, r24
    1362:	00 0c       	add	r0, r0
    1364:	33 0b       	sbc	r19, r19
    1366:	2f 5f       	subi	r18, 0xFF	; 255
    1368:	3f 4f       	sbci	r19, 0xFF	; 255
    136a:	f9 01       	movw	r30, r18
    136c:	ee 0f       	add	r30, r30
    136e:	ff 1f       	adc	r31, r31
    1370:	ee 0f       	add	r30, r30
    1372:	ff 1f       	adc	r31, r31
    1374:	ee 0f       	add	r30, r30
    1376:	ff 1f       	adc	r31, r31
    1378:	e2 1b       	sub	r30, r18
    137a:	f3 0b       	sbc	r31, r19
    137c:	e9 0f       	add	r30, r25
    137e:	f1 1d       	adc	r31, r1
    1380:	97 fd       	sbrc	r25, 7
    1382:	fa 95       	dec	r31
    1384:	ee 0f       	add	r30, r30
    1386:	ff 1f       	adc	r31, r31
    1388:	e1 5f       	subi	r30, 0xF1	; 241
    138a:	f8 4f       	sbci	r31, 0xF8	; 248
    138c:	01 90       	ld	r0, Z+
    138e:	f0 81       	ld	r31, Z
    1390:	e0 2d       	mov	r30, r0
    1392:	40 81       	ld	r20, Z
const Position* ownLaby_getTargetTile(){
	return &target_tile;
}

void ownLaby_setTargetTile(Position current_position, int8_t x_change, int8_t y_change){
	target_tile.x = current_position.x + x_change;
    1394:	8f 5f       	subi	r24, 0xFF	; 255
    1396:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <target_tile>
	target_tile.y = current_position.y + y_change;
    139a:	90 93 0e 07 	sts	0x070E, r25	; 0x80070e <target_tile+0x1>
			if (canMoveForward == true ) {
				lowestVisitCount = *visit_count[current_position.x+1][current_position.y];
				leastVisitedDirection = FORWARD;
				ownLaby_setTargetTile(current_position, 1, 0);
			}
			if (canMoveLeft == true){
    139e:	00 23       	and	r16, r16
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <ownLaby_explore+0x292>
    13a2:	3f c0       	rjmp	.+126    	; 0x1422 <ownLaby_explore+0x310>
				if (lowestVisitCount > *visit_count[current_position.x][current_position.y+1]){
    13a4:	10 91 0b 07 	lds	r17, 0x070B	; 0x80070b <current_position>
    13a8:	61 2f       	mov	r22, r17
    13aa:	01 2e       	mov	r0, r17
    13ac:	00 0c       	add	r0, r0
    13ae:	77 0b       	sbc	r23, r23
    13b0:	d0 91 0c 07 	lds	r29, 0x070C	; 0x80070c <current_position+0x1>
    13b4:	2d 2f       	mov	r18, r29
    13b6:	0d 2e       	mov	r0, r29
    13b8:	00 0c       	add	r0, r0
    13ba:	33 0b       	sbc	r19, r19
    13bc:	fb 01       	movw	r30, r22
    13be:	ee 0f       	add	r30, r30
    13c0:	ff 1f       	adc	r31, r31
    13c2:	ee 0f       	add	r30, r30
    13c4:	ff 1f       	adc	r31, r31
    13c6:	ee 0f       	add	r30, r30
    13c8:	ff 1f       	adc	r31, r31
    13ca:	df 01       	movw	r26, r30
    13cc:	a6 1b       	sub	r26, r22
    13ce:	b7 0b       	sbc	r27, r23
    13d0:	c9 01       	movw	r24, r18
    13d2:	01 96       	adiw	r24, 0x01	; 1
    13d4:	a8 0f       	add	r26, r24
    13d6:	b9 1f       	adc	r27, r25
    13d8:	aa 0f       	add	r26, r26
    13da:	bb 1f       	adc	r27, r27
    13dc:	a1 5f       	subi	r26, 0xF1	; 241
    13de:	b8 4f       	sbci	r27, 0xF8	; 248
    13e0:	0d 90       	ld	r0, X+
    13e2:	bc 91       	ld	r27, X
    13e4:	a0 2d       	mov	r26, r0
    13e6:	8d 91       	ld	r24, X+
    13e8:	9c 91       	ld	r25, X
    13ea:	a4 2f       	mov	r26, r20
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	8a 17       	cp	r24, r26
    13f0:	9b 07       	cpc	r25, r27
    13f2:	0c f4       	brge	.+2      	; 0x13f6 <ownLaby_explore+0x2e4>
    13f4:	9a c0       	rjmp	.+308    	; 0x152a <ownLaby_explore+0x418>
    13f6:	81 e0       	ldi	r24, 0x01	; 1
					lowestVisitCount = *visit_count[current_position.x][current_position.y+1];
					leastVisitedDirection = LEFT;
					ownLaby_setTargetTile(current_position, 0, 1);
				}
			}
			if (canMoveRight == true){
    13f8:	cc 23       	and	r28, r28
    13fa:	09 f4       	brne	.+2      	; 0x13fe <ownLaby_explore+0x2ec>
    13fc:	9e cf       	rjmp	.-196    	; 0x133a <ownLaby_explore+0x228>
    13fe:	28 c0       	rjmp	.+80     	; 0x1450 <ownLaby_explore+0x33e>
					lowestVisitCount = *visit_count[current_position.x][current_position.y-1];
					leastVisitedDirection = LEFT;
					ownLaby_setTargetTile(current_position, 0, -1);
				}
			}
			if (canMoveRight == true){
    1400:	c1 11       	cpse	r28, r1
    1402:	7e c0       	rjmp	.+252    	; 0x1500 <ownLaby_explore+0x3ee>
					lowestVisitCount = *visit_count[current_position.x][current_position.y+1];
					leastVisitedDirection = RIGHT;
					ownLaby_setTargetTile(current_position, 0, 1);
				}
			}
			if (!canMoveRight && !canMoveLeft && !canMoveForward){
    1404:	11 11       	cpse	r17, r1
    1406:	b0 c0       	rjmp	.+352    	; 0x1568 <ownLaby_explore+0x456>
    1408:	90 91 0c 07 	lds	r25, 0x070C	; 0x80070c <current_position+0x1>
const Position* ownLaby_getTargetTile(){
	return &target_tile;
}

void ownLaby_setTargetTile(Position current_position, int8_t x_change, int8_t y_change){
	target_tile.x = current_position.x + x_change;
    140c:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <current_position>
    1410:	8f 5f       	subi	r24, 0xFF	; 255
    1412:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <target_tile>
	target_tile.y = current_position.y + y_change;
    1416:	90 93 0e 07 	sts	0x070E, r25	; 0x80070e <target_tile+0x1>
					leastVisitedDirection = RIGHT;
					ownLaby_setTargetTile(current_position, 0, 1);
				}
			}
			if (!canMoveRight && !canMoveLeft && !canMoveForward){
				leastVisitedDirection = BACKWARD;
    141a:	83 e0       	ldi	r24, 0x03	; 3
    141c:	8e cf       	rjmp	.-228    	; 0x133a <ownLaby_explore+0x228>
void ownLaby_explore(){
	RobotDirection_t leastVisitedDirection = FORWARD;
	bool canMoveLeft	= false;
	bool canMoveRight	= false;
	bool canMoveForward = false;
	char lowestVisitCount = 127;
    141e:	4f e7       	ldi	r20, 0x7F	; 127
    1420:	d8 ce       	rjmp	.-592    	; 0x11d2 <ownLaby_explore+0xc0>
					lowestVisitCount = *visit_count[current_position.x][current_position.y+1];
					leastVisitedDirection = LEFT;
					ownLaby_setTargetTile(current_position, 0, 1);
				}
			}
			if (canMoveRight == true){
    1422:	cc 23       	and	r28, r28
    1424:	09 f4       	brne	.+2      	; 0x1428 <ownLaby_explore+0x316>
    1426:	93 c0       	rjmp	.+294    	; 0x154e <ownLaby_explore+0x43c>
    1428:	10 91 0b 07 	lds	r17, 0x070B	; 0x80070b <current_position>
    142c:	61 2f       	mov	r22, r17
    142e:	01 2e       	mov	r0, r17
    1430:	00 0c       	add	r0, r0
    1432:	77 0b       	sbc	r23, r23
    1434:	d0 91 0c 07 	lds	r29, 0x070C	; 0x80070c <current_position+0x1>
    1438:	2d 2f       	mov	r18, r29
    143a:	0d 2e       	mov	r0, r29
    143c:	00 0c       	add	r0, r0
    143e:	33 0b       	sbc	r19, r19
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	fb 01       	movw	r30, r22
    1444:	ee 0f       	add	r30, r30
    1446:	ff 1f       	adc	r31, r31
    1448:	ee 0f       	add	r30, r30
    144a:	ff 1f       	adc	r31, r31
    144c:	ee 0f       	add	r30, r30
    144e:	ff 1f       	adc	r31, r31
				if (lowestVisitCount > *visit_count[current_position.x][current_position.y-1]){
    1450:	50 e0       	ldi	r21, 0x00	; 0
    1452:	e6 1b       	sub	r30, r22
    1454:	f7 0b       	sbc	r31, r23
    1456:	21 50       	subi	r18, 0x01	; 1
    1458:	31 09       	sbc	r19, r1
    145a:	e2 0f       	add	r30, r18
    145c:	f3 1f       	adc	r31, r19
    145e:	ee 0f       	add	r30, r30
    1460:	ff 1f       	adc	r31, r31
    1462:	e1 5f       	subi	r30, 0xF1	; 241
    1464:	f8 4f       	sbci	r31, 0xF8	; 248
    1466:	01 90       	ld	r0, Z+
    1468:	f0 81       	ld	r31, Z
    146a:	e0 2d       	mov	r30, r0
    146c:	20 81       	ld	r18, Z
    146e:	31 81       	ldd	r19, Z+1	; 0x01
    1470:	24 17       	cp	r18, r20
    1472:	35 07       	cpc	r19, r21
    1474:	0c f0       	brlt	.+2      	; 0x1478 <ownLaby_explore+0x366>
    1476:	61 cf       	rjmp	.-318    	; 0x133a <ownLaby_explore+0x228>
const Position* ownLaby_getTargetTile(){
	return &target_tile;
}

void ownLaby_setTargetTile(Position current_position, int8_t x_change, int8_t y_change){
	target_tile.x = current_position.x + x_change;
    1478:	10 93 0d 07 	sts	0x070D, r17	; 0x80070d <target_tile>
	target_tile.y = current_position.y + y_change;
    147c:	d1 50       	subi	r29, 0x01	; 1
    147e:	d0 93 0e 07 	sts	0x070E, r29	; 0x80070e <target_tile+0x1>
				}
			}
			if (canMoveRight == true){
				if (lowestVisitCount > *visit_count[current_position.x][current_position.y-1]){
					lowestVisitCount = *visit_count[current_position.x][current_position.y-1];
					leastVisitedDirection = RIGHT;
    1482:	82 e0       	ldi	r24, 0x02	; 2
    1484:	5a cf       	rjmp	.-332    	; 0x133a <ownLaby_explore+0x228>
void ownLaby_explore(){
	RobotDirection_t leastVisitedDirection = FORWARD;
	bool canMoveLeft	= false;
	bool canMoveRight	= false;
	bool canMoveForward = false;
	char lowestVisitCount = 127;
    1486:	4f e7       	ldi	r20, 0x7F	; 127
    1488:	8a cf       	rjmp	.-236    	; 0x139e <ownLaby_explore+0x28c>
    148a:	90 91 0b 07 	lds	r25, 0x070B	; 0x80070b <current_position>
    148e:	69 2f       	mov	r22, r25
    1490:	09 2e       	mov	r0, r25
    1492:	00 0c       	add	r0, r0
    1494:	77 0b       	sbc	r23, r23
    1496:	d0 91 0c 07 	lds	r29, 0x070C	; 0x80070c <current_position+0x1>
    149a:	4d 2f       	mov	r20, r29
    149c:	0d 2e       	mov	r0, r29
    149e:	00 0c       	add	r0, r0
    14a0:	55 0b       	sbc	r21, r21
					lowestVisitCount = *visit_count[current_position.x-1][current_position.y];
					leastVisitedDirection = LEFT;
					ownLaby_setTargetTile(current_position, -1, 0);
				}
			}
			if (canMoveRight == true){
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	30 e0       	ldi	r19, 0x00	; 0
				if (lowestVisitCount > *visit_count[current_position.x+1][current_position.y]){
    14a6:	6f 5f       	subi	r22, 0xFF	; 255
    14a8:	7f 4f       	sbci	r23, 0xFF	; 255
    14aa:	fb 01       	movw	r30, r22
    14ac:	ee 0f       	add	r30, r30
    14ae:	ff 1f       	adc	r31, r31
    14b0:	ee 0f       	add	r30, r30
    14b2:	ff 1f       	adc	r31, r31
    14b4:	ee 0f       	add	r30, r30
    14b6:	ff 1f       	adc	r31, r31
    14b8:	e6 1b       	sub	r30, r22
    14ba:	f7 0b       	sbc	r31, r23
    14bc:	e4 0f       	add	r30, r20
    14be:	f5 1f       	adc	r31, r21
    14c0:	ee 0f       	add	r30, r30
    14c2:	ff 1f       	adc	r31, r31
    14c4:	e1 5f       	subi	r30, 0xF1	; 241
    14c6:	f8 4f       	sbci	r31, 0xF8	; 248
    14c8:	01 90       	ld	r0, Z+
    14ca:	f0 81       	ld	r31, Z
    14cc:	e0 2d       	mov	r30, r0
    14ce:	40 81       	ld	r20, Z
    14d0:	51 81       	ldd	r21, Z+1	; 0x01
    14d2:	42 17       	cp	r20, r18
    14d4:	53 07       	cpc	r21, r19
    14d6:	0c f0       	brlt	.+2      	; 0x14da <ownLaby_explore+0x3c8>
    14d8:	30 cf       	rjmp	.-416    	; 0x133a <ownLaby_explore+0x228>
const Position* ownLaby_getTargetTile(){
	return &target_tile;
}

void ownLaby_setTargetTile(Position current_position, int8_t x_change, int8_t y_change){
	target_tile.x = current_position.x + x_change;
    14da:	9f 5f       	subi	r25, 0xFF	; 255
    14dc:	90 93 0d 07 	sts	0x070D, r25	; 0x80070d <target_tile>
	target_tile.y = current_position.y + y_change;
    14e0:	d0 93 0e 07 	sts	0x070E, r29	; 0x80070e <target_tile+0x1>
				}
			}
			if (canMoveRight == true){
				if (lowestVisitCount > *visit_count[current_position.x+1][current_position.y]){
					lowestVisitCount = *visit_count[current_position.x+1][current_position.y];
					leastVisitedDirection = RIGHT;
    14e4:	82 e0       	ldi	r24, 0x02	; 2
    14e6:	29 cf       	rjmp	.-430    	; 0x133a <ownLaby_explore+0x228>
				leastVisitedDirection = FORWARD;
				ownLaby_setTargetTile(current_position, 0, 1);
			}
			if (canMoveLeft == true){
				if (lowestVisitCount > *visit_count[current_position.x-1][current_position.y]){
					lowestVisitCount = *visit_count[current_position.x-1][current_position.y];
    14e8:	2e 2f       	mov	r18, r30
const Position* ownLaby_getTargetTile(){
	return &target_tile;
}

void ownLaby_setTargetTile(Position current_position, int8_t x_change, int8_t y_change){
	target_tile.x = current_position.x + x_change;
    14ea:	8f ef       	ldi	r24, 0xFF	; 255
    14ec:	89 0f       	add	r24, r25
    14ee:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <target_tile>
	target_tile.y = current_position.y + y_change;
    14f2:	d0 93 0e 07 	sts	0x070E, r29	; 0x80070e <target_tile+0x1>
				ownLaby_setTargetTile(current_position, 0, 1);
			}
			if (canMoveLeft == true){
				if (lowestVisitCount > *visit_count[current_position.x-1][current_position.y]){
					lowestVisitCount = *visit_count[current_position.x-1][current_position.y];
					leastVisitedDirection = LEFT;
    14f6:	80 e0       	ldi	r24, 0x00	; 0
					ownLaby_setTargetTile(current_position, -1, 0);
				}
			}
			if (canMoveRight == true){
    14f8:	cc 23       	and	r28, r28
    14fa:	09 f4       	brne	.+2      	; 0x14fe <ownLaby_explore+0x3ec>
    14fc:	1e cf       	rjmp	.-452    	; 0x133a <ownLaby_explore+0x228>
    14fe:	d2 cf       	rjmp	.-92     	; 0x14a4 <ownLaby_explore+0x392>
    1500:	10 91 0b 07 	lds	r17, 0x070B	; 0x80070b <current_position>
    1504:	61 2f       	mov	r22, r17
    1506:	01 2e       	mov	r0, r17
    1508:	00 0c       	add	r0, r0
    150a:	77 0b       	sbc	r23, r23
    150c:	d0 91 0c 07 	lds	r29, 0x070C	; 0x80070c <current_position+0x1>
    1510:	2d 2f       	mov	r18, r29
    1512:	0d 2e       	mov	r0, r29
    1514:	00 0c       	add	r0, r0
    1516:	33 0b       	sbc	r19, r19
					lowestVisitCount = *visit_count[current_position.x][current_position.y-1];
					leastVisitedDirection = LEFT;
					ownLaby_setTargetTile(current_position, 0, -1);
				}
			}
			if (canMoveRight == true){
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	fb 01       	movw	r30, r22
    151c:	ee 0f       	add	r30, r30
    151e:	ff 1f       	adc	r31, r31
    1520:	ee 0f       	add	r30, r30
    1522:	ff 1f       	adc	r31, r31
    1524:	ee 0f       	add	r30, r30
    1526:	ff 1f       	adc	r31, r31
    1528:	84 ce       	rjmp	.-760    	; 0x1232 <ownLaby_explore+0x120>
				leastVisitedDirection = FORWARD;
				ownLaby_setTargetTile(current_position, 1, 0);
			}
			if (canMoveLeft == true){
				if (lowestVisitCount > *visit_count[current_position.x][current_position.y+1]){
					lowestVisitCount = *visit_count[current_position.x][current_position.y+1];
    152a:	48 2f       	mov	r20, r24
const Position* ownLaby_getTargetTile(){
	return &target_tile;
}

void ownLaby_setTargetTile(Position current_position, int8_t x_change, int8_t y_change){
	target_tile.x = current_position.x + x_change;
    152c:	10 93 0d 07 	sts	0x070D, r17	; 0x80070d <target_tile>
	target_tile.y = current_position.y + y_change;
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	8d 0f       	add	r24, r29
    1534:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <target_tile+0x1>
				ownLaby_setTargetTile(current_position, 1, 0);
			}
			if (canMoveLeft == true){
				if (lowestVisitCount > *visit_count[current_position.x][current_position.y+1]){
					lowestVisitCount = *visit_count[current_position.x][current_position.y+1];
					leastVisitedDirection = LEFT;
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	5e cf       	rjmp	.-324    	; 0x13f8 <ownLaby_explore+0x2e6>
				leastVisitedDirection = FORWARD;
				ownLaby_setTargetTile(current_position, -1, 0);
			}
			if (canMoveLeft == true){
				if (lowestVisitCount > *visit_count[current_position.x][current_position.y-1]){
					lowestVisitCount = *visit_count[current_position.x][current_position.y-1];
    153c:	48 2f       	mov	r20, r24
const Position* ownLaby_getTargetTile(){
	return &target_tile;
}

void ownLaby_setTargetTile(Position current_position, int8_t x_change, int8_t y_change){
	target_tile.x = current_position.x + x_change;
    153e:	10 93 0d 07 	sts	0x070D, r17	; 0x80070d <target_tile>
	target_tile.y = current_position.y + y_change;
    1542:	8f ef       	ldi	r24, 0xFF	; 255
    1544:	8d 0f       	add	r24, r29
    1546:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <target_tile+0x1>
				ownLaby_setTargetTile(current_position, -1, 0);
			}
			if (canMoveLeft == true){
				if (lowestVisitCount > *visit_count[current_position.x][current_position.y-1]){
					lowestVisitCount = *visit_count[current_position.x][current_position.y-1];
					leastVisitedDirection = LEFT;
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	6f ce       	rjmp	.-802    	; 0x122c <ownLaby_explore+0x11a>
					lowestVisitCount = *visit_count[current_position.x][current_position.y-1];
					leastVisitedDirection = RIGHT;
					ownLaby_setTargetTile(current_position, 0, -1);
				}
			}
			if (!canMoveRight && !canMoveLeft && !canMoveForward){
    154e:	11 11       	cpse	r17, r1
    1550:	0b c0       	rjmp	.+22     	; 0x1568 <ownLaby_explore+0x456>
    1552:	90 91 0c 07 	lds	r25, 0x070C	; 0x80070c <current_position+0x1>
const Position* ownLaby_getTargetTile(){
	return &target_tile;
}

void ownLaby_setTargetTile(Position current_position, int8_t x_change, int8_t y_change){
	target_tile.x = current_position.x + x_change;
    1556:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <current_position>
    155a:	81 50       	subi	r24, 0x01	; 1
    155c:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <target_tile>
	target_tile.y = current_position.y + y_change;
    1560:	90 93 0e 07 	sts	0x070E, r25	; 0x80070e <target_tile+0x1>
					leastVisitedDirection = RIGHT;
					ownLaby_setTargetTile(current_position, 0, -1);
				}
			}
			if (!canMoveRight && !canMoveLeft && !canMoveForward){
				leastVisitedDirection = BACKWARD;
    1564:	83 e0       	ldi	r24, 0x03	; 3
    1566:	e9 ce       	rjmp	.-558    	; 0x133a <ownLaby_explore+0x228>
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	e7 ce       	rjmp	.-562    	; 0x133a <ownLaby_explore+0x228>
	
	if ((ownLaby_getPose()->row == 0) && (ownLaby_getPose()->column == 3)){
		if ((ownLaby_getPose()->cardinalDirection == DIRECTION_NORTH))
			exitDirection = 1;
		
		if ((ownLaby_getPose()->cardinalDirection == DIRECTION_EAST)){
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	ce ce       	rjmp	.-612    	; 0x130c <ownLaby_explore+0x1fa>
				ownLaby_setTargetTile(current_position, -1, 0);
			}
		}
	            	
		//Robot is facing Downwards
		if (pose.cardinalDirection == DIRECTION_SOUTH){
    1570:	d2 30       	cpi	r29, 0x02	; 2
    1572:	d1 f7       	brne	.-12     	; 0x1568 <ownLaby_explore+0x456>
			if (canMoveForward == true ) {
    1574:	11 23       	and	r17, r17
    1576:	09 f4       	brne	.+2      	; 0x157a <ownLaby_explore+0x468>
    1578:	73 c0       	rjmp	.+230    	; 0x1660 <ownLaby_explore+0x54e>
				lowestVisitCount = *visit_count[current_position.x][current_position.y-1];
    157a:	90 91 0b 07 	lds	r25, 0x070B	; 0x80070b <current_position>
    157e:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <current_position+0x1>
    1582:	e8 2f       	mov	r30, r24
    1584:	08 2e       	mov	r0, r24
    1586:	00 0c       	add	r0, r0
    1588:	ff 0b       	sbc	r31, r31
    158a:	31 97       	sbiw	r30, 0x01	; 1
    158c:	27 e0       	ldi	r18, 0x07	; 7
    158e:	92 02       	muls	r25, r18
    1590:	e0 0d       	add	r30, r0
    1592:	f1 1d       	adc	r31, r1
    1594:	11 24       	eor	r1, r1
    1596:	ee 0f       	add	r30, r30
    1598:	ff 1f       	adc	r31, r31
    159a:	e1 5f       	subi	r30, 0xF1	; 241
    159c:	f8 4f       	sbci	r31, 0xF8	; 248
    159e:	01 90       	ld	r0, Z+
    15a0:	f0 81       	ld	r31, Z
    15a2:	e0 2d       	mov	r30, r0
    15a4:	60 81       	ld	r22, Z
const Position* ownLaby_getTargetTile(){
	return &target_tile;
}

void ownLaby_setTargetTile(Position current_position, int8_t x_change, int8_t y_change){
	target_tile.x = current_position.x + x_change;
    15a6:	90 93 0d 07 	sts	0x070D, r25	; 0x80070d <target_tile>
	target_tile.y = current_position.y + y_change;
    15aa:	81 50       	subi	r24, 0x01	; 1
    15ac:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <target_tile+0x1>
			if (canMoveForward == true ) {
				lowestVisitCount = *visit_count[current_position.x][current_position.y-1];
				leastVisitedDirection = FORWARD;
				ownLaby_setTargetTile(current_position, 0, -1);
			}
			if (canMoveLeft == true){
    15b0:	00 23       	and	r16, r16
    15b2:	09 f4       	brne	.+2      	; 0x15b6 <ownLaby_explore+0x4a4>
    15b4:	57 c0       	rjmp	.+174    	; 0x1664 <ownLaby_explore+0x552>
				if (lowestVisitCount > *visit_count[current_position.x+1][current_position.y]){
    15b6:	90 91 0b 07 	lds	r25, 0x070B	; 0x80070b <current_position>
    15ba:	29 2f       	mov	r18, r25
    15bc:	09 2e       	mov	r0, r25
    15be:	00 0c       	add	r0, r0
    15c0:	33 0b       	sbc	r19, r19
    15c2:	d0 91 0c 07 	lds	r29, 0x070C	; 0x80070c <current_position+0x1>
    15c6:	4d 2f       	mov	r20, r29
    15c8:	0d 2e       	mov	r0, r29
    15ca:	00 0c       	add	r0, r0
    15cc:	55 0b       	sbc	r21, r21
    15ce:	f9 01       	movw	r30, r18
    15d0:	31 96       	adiw	r30, 0x01	; 1
    15d2:	df 01       	movw	r26, r30
    15d4:	aa 0f       	add	r26, r26
    15d6:	bb 1f       	adc	r27, r27
    15d8:	aa 0f       	add	r26, r26
    15da:	bb 1f       	adc	r27, r27
    15dc:	aa 0f       	add	r26, r26
    15de:	bb 1f       	adc	r27, r27
    15e0:	ae 1b       	sub	r26, r30
    15e2:	bf 0b       	sbc	r27, r31
    15e4:	a4 0f       	add	r26, r20
    15e6:	b5 1f       	adc	r27, r21
    15e8:	aa 0f       	add	r26, r26
    15ea:	bb 1f       	adc	r27, r27
    15ec:	a1 5f       	subi	r26, 0xF1	; 241
    15ee:	b8 4f       	sbci	r27, 0xF8	; 248
    15f0:	ed 91       	ld	r30, X+
    15f2:	fc 91       	ld	r31, X
    15f4:	01 90       	ld	r0, Z+
    15f6:	f0 81       	ld	r31, Z
    15f8:	e0 2d       	mov	r30, r0
    15fa:	a6 2f       	mov	r26, r22
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	ea 17       	cp	r30, r26
    1600:	fb 07       	cpc	r31, r27
    1602:	0c f0       	brlt	.+2      	; 0x1606 <ownLaby_explore+0x4f4>
    1604:	3f c0       	rjmp	.+126    	; 0x1684 <ownLaby_explore+0x572>
					lowestVisitCount = *visit_count[current_position.x+1][current_position.y];
    1606:	6e 2f       	mov	r22, r30
const Position* ownLaby_getTargetTile(){
	return &target_tile;
}

void ownLaby_setTargetTile(Position current_position, int8_t x_change, int8_t y_change){
	target_tile.x = current_position.x + x_change;
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	89 0f       	add	r24, r25
    160c:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <target_tile>
	target_tile.y = current_position.y + y_change;
    1610:	d0 93 0e 07 	sts	0x070E, r29	; 0x80070e <target_tile+0x1>
				ownLaby_setTargetTile(current_position, 0, -1);
			}
			if (canMoveLeft == true){
				if (lowestVisitCount > *visit_count[current_position.x+1][current_position.y]){
					lowestVisitCount = *visit_count[current_position.x+1][current_position.y];
					leastVisitedDirection = LEFT;
    1614:	80 e0       	ldi	r24, 0x00	; 0
					ownLaby_setTargetTile(current_position, 1, 0);
				}
			}
			if (canMoveRight == true){
    1616:	cc 23       	and	r28, r28
    1618:	09 f4       	brne	.+2      	; 0x161c <ownLaby_explore+0x50a>
    161a:	8f ce       	rjmp	.-738    	; 0x133a <ownLaby_explore+0x228>
				if (lowestVisitCount > *visit_count[current_position.x-1][current_position.y]){
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	21 50       	subi	r18, 0x01	; 1
    1620:	31 09       	sbc	r19, r1
    1622:	f9 01       	movw	r30, r18
    1624:	ee 0f       	add	r30, r30
    1626:	ff 1f       	adc	r31, r31
    1628:	ee 0f       	add	r30, r30
    162a:	ff 1f       	adc	r31, r31
    162c:	ee 0f       	add	r30, r30
    162e:	ff 1f       	adc	r31, r31
    1630:	e2 1b       	sub	r30, r18
    1632:	f3 0b       	sbc	r31, r19
    1634:	e4 0f       	add	r30, r20
    1636:	f5 1f       	adc	r31, r21
    1638:	ee 0f       	add	r30, r30
    163a:	ff 1f       	adc	r31, r31
    163c:	e1 5f       	subi	r30, 0xF1	; 241
    163e:	f8 4f       	sbci	r31, 0xF8	; 248
    1640:	01 90       	ld	r0, Z+
    1642:	f0 81       	ld	r31, Z
    1644:	e0 2d       	mov	r30, r0
    1646:	20 81       	ld	r18, Z
    1648:	31 81       	ldd	r19, Z+1	; 0x01
    164a:	26 17       	cp	r18, r22
    164c:	37 07       	cpc	r19, r23
    164e:	0c f0       	brlt	.+2      	; 0x1652 <ownLaby_explore+0x540>
    1650:	74 ce       	rjmp	.-792    	; 0x133a <ownLaby_explore+0x228>
const Position* ownLaby_getTargetTile(){
	return &target_tile;
}

void ownLaby_setTargetTile(Position current_position, int8_t x_change, int8_t y_change){
	target_tile.x = current_position.x + x_change;
    1652:	91 50       	subi	r25, 0x01	; 1
    1654:	90 93 0d 07 	sts	0x070D, r25	; 0x80070d <target_tile>
	target_tile.y = current_position.y + y_change;
    1658:	d0 93 0e 07 	sts	0x070E, r29	; 0x80070e <target_tile+0x1>
				}
			}
			if (canMoveRight == true){
				if (lowestVisitCount > *visit_count[current_position.x-1][current_position.y]){
					lowestVisitCount = *visit_count[current_position.x-1][current_position.y];
					leastVisitedDirection = RIGHT;
    165c:	82 e0       	ldi	r24, 0x02	; 2
    165e:	6d ce       	rjmp	.-806    	; 0x133a <ownLaby_explore+0x228>
void ownLaby_explore(){
	RobotDirection_t leastVisitedDirection = FORWARD;
	bool canMoveLeft	= false;
	bool canMoveRight	= false;
	bool canMoveForward = false;
	char lowestVisitCount = 127;
    1660:	6f e7       	ldi	r22, 0x7F	; 127
    1662:	a6 cf       	rjmp	.-180    	; 0x15b0 <ownLaby_explore+0x49e>
					lowestVisitCount = *visit_count[current_position.x+1][current_position.y];
					leastVisitedDirection = LEFT;
					ownLaby_setTargetTile(current_position, 1, 0);
				}
			}
			if (canMoveRight == true){
    1664:	cc 23       	and	r28, r28
    1666:	81 f0       	breq	.+32     	; 0x1688 <ownLaby_explore+0x576>
    1668:	90 91 0b 07 	lds	r25, 0x070B	; 0x80070b <current_position>
    166c:	29 2f       	mov	r18, r25
    166e:	09 2e       	mov	r0, r25
    1670:	00 0c       	add	r0, r0
    1672:	33 0b       	sbc	r19, r19
    1674:	d0 91 0c 07 	lds	r29, 0x070C	; 0x80070c <current_position+0x1>
    1678:	4d 2f       	mov	r20, r29
    167a:	0d 2e       	mov	r0, r29
    167c:	00 0c       	add	r0, r0
    167e:	55 0b       	sbc	r21, r21
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	cc cf       	rjmp	.-104    	; 0x161c <ownLaby_explore+0x50a>
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	c7 cf       	rjmp	.-114    	; 0x1616 <ownLaby_explore+0x504>
					lowestVisitCount = *visit_count[current_position.x-1][current_position.y];
					leastVisitedDirection = RIGHT;
					ownLaby_setTargetTile(current_position, -1, 0);
				}
			}
			if (!canMoveRight && !canMoveLeft && !canMoveForward){
    1688:	11 11       	cpse	r17, r1
    168a:	6e cf       	rjmp	.-292    	; 0x1568 <ownLaby_explore+0x456>
    168c:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <current_position+0x1>
const Position* ownLaby_getTargetTile(){
	return &target_tile;
}

void ownLaby_setTargetTile(Position current_position, int8_t x_change, int8_t y_change){
	target_tile.x = current_position.x + x_change;
    1690:	90 91 0b 07 	lds	r25, 0x070B	; 0x80070b <current_position>
    1694:	90 93 0d 07 	sts	0x070D, r25	; 0x80070d <target_tile>
	target_tile.y = current_position.y + y_change;
    1698:	8f 5f       	subi	r24, 0xFF	; 255
    169a:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <target_tile+0x1>
					leastVisitedDirection = RIGHT;
					ownLaby_setTargetTile(current_position, -1, 0);
				}
			}
			if (!canMoveRight && !canMoveLeft && !canMoveForward){
				leastVisitedDirection = BACKWARD;
    169e:	83 e0       	ldi	r24, 0x03	; 3
    16a0:	4c ce       	rjmp	.-872    	; 0x133a <ownLaby_explore+0x228>

000016a2 <calcDifAngle>:
		pwmR = MAX_PWM;
	
	Motor_setPWM(pwmL,pwmR);
}

float calcDifAngle(const Pose_t* pose, const FPoint_t* lookahead){
    16a2:	8f 92       	push	r8
    16a4:	9f 92       	push	r9
    16a6:	af 92       	push	r10
    16a8:	bf 92       	push	r11
    16aa:	cf 92       	push	r12
    16ac:	df 92       	push	r13
    16ae:	ef 92       	push	r14
    16b0:	ff 92       	push	r15
    16b2:	cf 93       	push	r28
    16b4:	df 93       	push	r29
    16b6:	ec 01       	movw	r28, r24
    16b8:	7b 01       	movw	r14, r22
	float pLy = lookahead->y;
	float pRx = pose->x;
	float pRy = pose->y;
	float a = pLy - pRy;
	float b = pLx - pRx;
	float gamma = atan2(a, b);
    16ba:	28 81       	ld	r18, Y
    16bc:	39 81       	ldd	r19, Y+1	; 0x01
    16be:	4a 81       	ldd	r20, Y+2	; 0x02
    16c0:	5b 81       	ldd	r21, Y+3	; 0x03
    16c2:	fb 01       	movw	r30, r22
    16c4:	60 81       	ld	r22, Z
    16c6:	71 81       	ldd	r23, Z+1	; 0x01
    16c8:	82 81       	ldd	r24, Z+2	; 0x02
    16ca:	93 81       	ldd	r25, Z+3	; 0x03
    16cc:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
    16d0:	4b 01       	movw	r8, r22
    16d2:	5c 01       	movw	r10, r24
    16d4:	2c 81       	ldd	r18, Y+4	; 0x04
    16d6:	3d 81       	ldd	r19, Y+5	; 0x05
    16d8:	4e 81       	ldd	r20, Y+6	; 0x06
    16da:	5f 81       	ldd	r21, Y+7	; 0x07
    16dc:	f7 01       	movw	r30, r14
    16de:	64 81       	ldd	r22, Z+4	; 0x04
    16e0:	75 81       	ldd	r23, Z+5	; 0x05
    16e2:	86 81       	ldd	r24, Z+6	; 0x06
    16e4:	97 81       	ldd	r25, Z+7	; 0x07
    16e6:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
    16ea:	a5 01       	movw	r20, r10
    16ec:	94 01       	movw	r18, r8
    16ee:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <atan2>
	float dif = gamma - pose->theta;
    16f2:	28 85       	ldd	r18, Y+8	; 0x08
    16f4:	39 85       	ldd	r19, Y+9	; 0x09
    16f6:	4a 85       	ldd	r20, Y+10	; 0x0a
    16f8:	5b 85       	ldd	r21, Y+11	; 0x0b
    16fa:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
    16fe:	6b 01       	movw	r12, r22
    1700:	7c 01       	movw	r14, r24
	
	if(dif < -M_PI){
    1702:	2b ed       	ldi	r18, 0xDB	; 219
    1704:	3f e0       	ldi	r19, 0x0F	; 15
    1706:	49 e4       	ldi	r20, 0x49	; 73
    1708:	50 ec       	ldi	r21, 0xC0	; 192
    170a:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <__cmpsf2>
    170e:	87 fd       	sbrc	r24, 7
    1710:	21 c0       	rjmp	.+66     	; 0x1754 <calcDifAngle+0xb2>
		dif += 2.0f * M_PI;
	}
	else if(dif > M_PI){
    1712:	2b ed       	ldi	r18, 0xDB	; 219
    1714:	3f e0       	ldi	r19, 0x0F	; 15
    1716:	49 e4       	ldi	r20, 0x49	; 73
    1718:	50 e4       	ldi	r21, 0x40	; 64
    171a:	c7 01       	movw	r24, r14
    171c:	b6 01       	movw	r22, r12
    171e:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <__gesf2>
    1722:	18 16       	cp	r1, r24
    1724:	54 f4       	brge	.+20     	; 0x173a <calcDifAngle+0x98>
		dif -= 2.0f * M_PI;
    1726:	2b ed       	ldi	r18, 0xDB	; 219
    1728:	3f e0       	ldi	r19, 0x0F	; 15
    172a:	49 ec       	ldi	r20, 0xC9	; 201
    172c:	50 e4       	ldi	r21, 0x40	; 64
    172e:	c7 01       	movw	r24, r14
    1730:	b6 01       	movw	r22, r12
    1732:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
    1736:	6b 01       	movw	r12, r22
    1738:	7c 01       	movw	r14, r24
	}
	
	return dif;
}
    173a:	c7 01       	movw	r24, r14
    173c:	b6 01       	movw	r22, r12
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	ff 90       	pop	r15
    1744:	ef 90       	pop	r14
    1746:	df 90       	pop	r13
    1748:	cf 90       	pop	r12
    174a:	bf 90       	pop	r11
    174c:	af 90       	pop	r10
    174e:	9f 90       	pop	r9
    1750:	8f 90       	pop	r8
    1752:	08 95       	ret
	float b = pLx - pRx;
	float gamma = atan2(a, b);
	float dif = gamma - pose->theta;
	
	if(dif < -M_PI){
		dif += 2.0f * M_PI;
    1754:	2b ed       	ldi	r18, 0xDB	; 219
    1756:	3f e0       	ldi	r19, 0x0F	; 15
    1758:	49 ec       	ldi	r20, 0xC9	; 201
    175a:	50 e4       	ldi	r21, 0x40	; 64
    175c:	c7 01       	movw	r24, r14
    175e:	b6 01       	movw	r22, r12
    1760:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__addsf3>
    1764:	6b 01       	movw	r12, r22
    1766:	7c 01       	movw	r14, r24
    1768:	e8 cf       	rjmp	.-48     	; 0x173a <calcDifAngle+0x98>

0000176a <calculateDriveCommand>:
#define MAX_V 380.0f

float calcDifAngle(const Pose_t* pose, const FPoint_t* lookahead);
//static float thetaRobot = pose.theta;

void calculateDriveCommand(const Pose_t* pose, const FPoint_t* lookahead){
    176a:	4f 92       	push	r4
    176c:	5f 92       	push	r5
    176e:	6f 92       	push	r6
    1770:	7f 92       	push	r7
    1772:	8f 92       	push	r8
    1774:	9f 92       	push	r9
    1776:	af 92       	push	r10
    1778:	bf 92       	push	r11
    177a:	cf 92       	push	r12
    177c:	df 92       	push	r13
    177e:	ef 92       	push	r14
    1780:	ff 92       	push	r15
    1782:	0f 93       	push	r16
    1784:	1f 93       	push	r17
    1786:	cf 93       	push	r28
    1788:	df 93       	push	r29
	float dif;
	dif = calcDifAngle(pose, lookahead);
    178a:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <calcDifAngle>
	float normalV = 50.0f;//mm pro s
	//float speedToPWM = 10.0f;//true Value unknown
	float vDif = 2.5f * dif * value_robotParams.axleWidth / 2.0f;
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	40 e2       	ldi	r20, 0x20	; 32
    1794:	50 e4       	ldi	r21, 0x40	; 64
    1796:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <__mulsf3>
    179a:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <value_robotParams>
    179e:	30 91 18 02 	lds	r19, 0x0218	; 0x800218 <value_robotParams+0x1>
    17a2:	40 91 19 02 	lds	r20, 0x0219	; 0x800219 <value_robotParams+0x2>
    17a6:	50 91 1a 02 	lds	r21, 0x021A	; 0x80021a <value_robotParams+0x3>
    17aa:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <__mulsf3>
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	40 e0       	ldi	r20, 0x00	; 0
    17b4:	5f e3       	ldi	r21, 0x3F	; 63
    17b6:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <__mulsf3>
    17ba:	4b 01       	movw	r8, r22
    17bc:	5c 01       	movw	r10, r24
	float mappingValue = 19.0476f;
	
	float vL = normalV - vDif;
    17be:	9b 01       	movw	r18, r22
    17c0:	ac 01       	movw	r20, r24
    17c2:	60 e0       	ldi	r22, 0x00	; 0
    17c4:	70 e0       	ldi	r23, 0x00	; 0
    17c6:	88 e4       	ldi	r24, 0x48	; 72
    17c8:	92 e4       	ldi	r25, 0x42	; 66
    17ca:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
    17ce:	2b 01       	movw	r4, r22
    17d0:	3c 01       	movw	r6, r24
	int16_t pwmL = vL * mappingValue + MIN_PWM;
    17d2:	2c e7       	ldi	r18, 0x7C	; 124
    17d4:	31 e6       	ldi	r19, 0x61	; 97
    17d6:	48 e9       	ldi	r20, 0x98	; 152
    17d8:	51 e4       	ldi	r21, 0x41	; 65
    17da:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <__mulsf3>
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e8       	ldi	r19, 0x80	; 128
    17e2:	44 e5       	ldi	r20, 0x54	; 84
    17e4:	54 e4       	ldi	r21, 0x44	; 68
    17e6:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__addsf3>
    17ea:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <__fixsfsi>
    17ee:	6b 01       	movw	r12, r22
    17f0:	7c 01       	movw	r14, r24
    17f2:	8b 01       	movw	r16, r22
	if (vL < 0.0f)
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	a9 01       	movw	r20, r18
    17fa:	c3 01       	movw	r24, r6
    17fc:	b2 01       	movw	r22, r4
    17fe:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <__cmpsf2>
    1802:	87 fd       	sbrc	r24, 7
    1804:	44 c0       	rjmp	.+136    	; 0x188e <calculateDriveCommand+0x124>
    1806:	e8 01       	movw	r28, r16
    1808:	01 15       	cp	r16, r1
    180a:	10 42       	sbci	r17, 0x20	; 32
    180c:	14 f0       	brlt	.+4      	; 0x1812 <calculateDriveCommand+0xa8>
    180e:	cf ef       	ldi	r28, 0xFF	; 255
    1810:	df e1       	ldi	r29, 0x1F	; 31
		pwmL = pwmL * -1.0f;
	if(pwmL > MAX_PWM)
		pwmL = MAX_PWM;
	
	
	float vR = normalV + vDif;
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	48 e4       	ldi	r20, 0x48	; 72
    1818:	52 e4       	ldi	r21, 0x42	; 66
    181a:	c5 01       	movw	r24, r10
    181c:	b4 01       	movw	r22, r8
    181e:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__addsf3>
    1822:	4b 01       	movw	r8, r22
    1824:	5c 01       	movw	r10, r24
	int16_t pwmR = vR * mappingValue + MIN_PWM;
    1826:	2c e7       	ldi	r18, 0x7C	; 124
    1828:	31 e6       	ldi	r19, 0x61	; 97
    182a:	48 e9       	ldi	r20, 0x98	; 152
    182c:	51 e4       	ldi	r21, 0x41	; 65
    182e:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <__mulsf3>
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e8       	ldi	r19, 0x80	; 128
    1836:	44 e5       	ldi	r20, 0x54	; 84
    1838:	54 e4       	ldi	r21, 0x44	; 68
    183a:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__addsf3>
    183e:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <__fixsfsi>
    1842:	6b 01       	movw	r12, r22
    1844:	7c 01       	movw	r14, r24
    1846:	3b 01       	movw	r6, r22
	if (vR < 0.0f)
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	a9 01       	movw	r20, r18
    184e:	c5 01       	movw	r24, r10
    1850:	b4 01       	movw	r22, r8
    1852:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <__cmpsf2>
    1856:	87 fd       	sbrc	r24, 7
    1858:	25 c0       	rjmp	.+74     	; 0x18a4 <calculateDriveCommand+0x13a>
		pwmR = pwmR * -1.0f;
	if(pwmR > MAX_PWM)
		pwmR = MAX_PWM;
	
	Motor_setPWM(pwmL,pwmR);
    185a:	b3 01       	movw	r22, r6
    185c:	61 14       	cp	r6, r1
    185e:	80 e2       	ldi	r24, 0x20	; 32
    1860:	78 06       	cpc	r7, r24
    1862:	14 f0       	brlt	.+4      	; 0x1868 <calculateDriveCommand+0xfe>
    1864:	6f ef       	ldi	r22, 0xFF	; 255
    1866:	7f e1       	ldi	r23, 0x1F	; 31
    1868:	ce 01       	movw	r24, r28
}
    186a:	df 91       	pop	r29
    186c:	cf 91       	pop	r28
    186e:	1f 91       	pop	r17
    1870:	0f 91       	pop	r16
    1872:	ff 90       	pop	r15
    1874:	ef 90       	pop	r14
    1876:	df 90       	pop	r13
    1878:	cf 90       	pop	r12
    187a:	bf 90       	pop	r11
    187c:	af 90       	pop	r10
    187e:	9f 90       	pop	r9
    1880:	8f 90       	pop	r8
    1882:	7f 90       	pop	r7
    1884:	6f 90       	pop	r6
    1886:	5f 90       	pop	r5
    1888:	4f 90       	pop	r4
	if (vR < 0.0f)
		pwmR = pwmR * -1.0f;
	if(pwmR > MAX_PWM)
		pwmR = MAX_PWM;
	
	Motor_setPWM(pwmL,pwmR);
    188a:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <Motor_setPWM>
	float mappingValue = 19.0476f;
	
	float vL = normalV - vDif;
	int16_t pwmL = vL * mappingValue + MIN_PWM;
	if (vL < 0.0f)
		pwmL = pwmL * -1.0f;
    188e:	b6 01       	movw	r22, r12
    1890:	dd 0c       	add	r13, r13
    1892:	88 0b       	sbc	r24, r24
    1894:	99 0b       	sbc	r25, r25
    1896:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
    189a:	90 58       	subi	r25, 0x80	; 128
    189c:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <__fixsfsi>
    18a0:	8b 01       	movw	r16, r22
    18a2:	b1 cf       	rjmp	.-158    	; 0x1806 <calculateDriveCommand+0x9c>
	
	
	float vR = normalV + vDif;
	int16_t pwmR = vR * mappingValue + MIN_PWM;
	if (vR < 0.0f)
		pwmR = pwmR * -1.0f;
    18a4:	b6 01       	movw	r22, r12
    18a6:	dd 0c       	add	r13, r13
    18a8:	88 0b       	sbc	r24, r24
    18aa:	99 0b       	sbc	r25, r25
    18ac:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
    18b0:	90 58       	subi	r25, 0x80	; 128
    18b2:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <__fixsfsi>
    18b6:	3b 01       	movw	r6, r22
    18b8:	d0 cf       	rjmp	.-96     	; 0x185a <calculateDriveCommand+0xf0>

000018ba <position_setRobotParams>:
	float dy;
	int16_t diffLR = r - l;
	if (diffLR == 0) {
		float d = (float) r * value_robotParams.distPerTick;
		dx = d * cosf(expectedPose->theta);
		dy = d * sinf(expectedPose->theta);
    18ba:	fc 01       	movw	r30, r24
    18bc:	90 e1       	ldi	r25, 0x10	; 16
    18be:	a7 e1       	ldi	r26, 0x17	; 23
    18c0:	b2 e0       	ldi	r27, 0x02	; 2
    18c2:	01 90       	ld	r0, Z+
    18c4:	0d 92       	st	X+, r0
    18c6:	9a 95       	dec	r25
    18c8:	e1 f7       	brne	.-8      	; 0x18c2 <position_setRobotParams+0x8>
    18ca:	08 95       	ret

000018cc <position_getAprilTagPose>:
    18cc:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <truePose>
    18d0:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <truePose+0x1>
    18d4:	08 95       	ret

000018d6 <position_setAprilTagPose>:
    18d6:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <truePose+0x1>
    18da:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <truePose>
    18de:	08 95       	ret

000018e0 <position_getExpectedPose>:
	expectedPose->y		+= dy;
}

Pose_t* position_getExpectedPose(){
	return expectedPose;
}
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	08 95       	ret

000018e6 <position_setExpectedPose>:

void position_setExpectedPose(Pose_t* truePose){
    18e6:	dc 01       	movw	r26, r24
	expectedPose->x = truePose->x;
    18e8:	4d 91       	ld	r20, X+
    18ea:	5d 91       	ld	r21, X+
    18ec:	6d 91       	ld	r22, X+
    18ee:	7c 91       	ld	r23, X
    18f0:	13 97       	sbiw	r26, 0x03	; 3
    18f2:	e0 e0       	ldi	r30, 0x00	; 0
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	40 83       	st	Z, r20
    18f8:	51 83       	std	Z+1, r21	; 0x01
    18fa:	62 83       	std	Z+2, r22	; 0x02
    18fc:	73 83       	std	Z+3, r23	; 0x03
	expectedPose->y = truePose->y;
    18fe:	14 96       	adiw	r26, 0x04	; 4
    1900:	4d 91       	ld	r20, X+
    1902:	5d 91       	ld	r21, X+
    1904:	6d 91       	ld	r22, X+
    1906:	7c 91       	ld	r23, X
    1908:	17 97       	sbiw	r26, 0x07	; 7
    190a:	44 83       	std	Z+4, r20	; 0x04
    190c:	55 83       	std	Z+5, r21	; 0x05
    190e:	66 83       	std	Z+6, r22	; 0x06
    1910:	77 83       	std	Z+7, r23	; 0x07
	expectedPose->theta = truePose->theta;
    1912:	18 96       	adiw	r26, 0x08	; 8
    1914:	8d 91       	ld	r24, X+
    1916:	9d 91       	ld	r25, X+
    1918:	0d 90       	ld	r0, X+
    191a:	bc 91       	ld	r27, X
    191c:	a0 2d       	mov	r26, r0
    191e:	80 87       	std	Z+8, r24	; 0x08
    1920:	91 87       	std	Z+9, r25	; 0x09
    1922:	a2 87       	std	Z+10, r26	; 0x0a
    1924:	b3 87       	std	Z+11, r27	; 0x0b
    1926:	08 95       	ret

00001928 <setState>:
	robot_isWall(1);
	robot_isWall(2);
	setState(CHOOSE_DIRECTION);
}

void chooseDirection(){
    1928:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <state>
    192c:	08 95       	ret

0000192e <getState>:
    192e:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <state>
    1932:	08 95       	ret

00001934 <wait_90>:
    1934:	cf 93       	push	r28
    1936:	df 93       	push	r29
    1938:	00 d0       	rcall	.+0      	; 0x193a <wait_90+0x6>
    193a:	00 d0       	rcall	.+0      	; 0x193c <wait_90+0x8>
    193c:	00 d0       	rcall	.+0      	; 0x193e <wait_90+0xa>
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
    1942:	ce 01       	movw	r24, r28
    1944:	01 96       	adiw	r24, 0x01	; 1
    1946:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <timeTask_getTimestamp>
    194a:	be 01       	movw	r22, r28
    194c:	6f 5f       	subi	r22, 0xFF	; 255
    194e:	7f 4f       	sbci	r23, 0xFF	; 255
    1950:	82 e8       	ldi	r24, 0x82	; 130
    1952:	92 e0       	ldi	r25, 0x02	; 2
    1954:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <timeTask_getDuration>
    1958:	61 39       	cpi	r22, 0x91	; 145
    195a:	75 40       	sbci	r23, 0x05	; 5
    195c:	80 41       	sbci	r24, 0x10	; 16
    195e:	91 05       	cpc	r25, r1
    1960:	18 f0       	brcs	.+6      	; 0x1968 <wait_90+0x34>
    1962:	89 e0       	ldi	r24, 0x09	; 9
    1964:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <state>
    1968:	26 96       	adiw	r28, 0x06	; 6
    196a:	0f b6       	in	r0, 0x3f	; 63
    196c:	f8 94       	cli
    196e:	de bf       	out	0x3e, r29	; 62
    1970:	0f be       	out	0x3f, r0	; 63
    1972:	cd bf       	out	0x3d, r28	; 61
    1974:	df 91       	pop	r29
    1976:	cf 91       	pop	r28
    1978:	08 95       	ret

0000197a <checkSensors>:
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	0e 94 06 08 	call	0x100c	; 0x100c <robot_isWall>
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	0e 94 06 08 	call	0x100c	; 0x100c <robot_isWall>
    1986:	82 e0       	ldi	r24, 0x02	; 2
    1988:	0e 94 06 08 	call	0x100c	; 0x100c <robot_isWall>
    198c:	82 e0       	ldi	r24, 0x02	; 2
    198e:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <state>
    1992:	08 95       	ret

00001994 <stateMachine>:
	
}

// Funktion zur Steuerung des Roboters
void stateMachine() {
	switch (state) {
    1994:	e0 91 88 02 	lds	r30, 0x0288	; 0x800288 <state>
    1998:	8e 2f       	mov	r24, r30
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	fc 01       	movw	r30, r24
    199e:	31 97       	sbiw	r30, 0x01	; 1
    19a0:	e9 30       	cpi	r30, 0x09	; 9
    19a2:	f1 05       	cpc	r31, r1
    19a4:	08 f0       	brcs	.+2      	; 0x19a8 <stateMachine+0x14>
    19a6:	08 95       	ret
    19a8:	e7 58       	subi	r30, 0x87	; 135
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	0c 94 2c 20 	jmp	0x4058	; 0x4058 <__tablejump2__>
void turnLeft() {
	Motor_setPWM(-3000, 3000);
}

void turnRight() {
	Motor_setPWM(3000, -3000);
    19b0:	68 e4       	ldi	r22, 0x48	; 72
    19b2:	74 ef       	ldi	r23, 0xF4	; 244
    19b4:	88 eb       	ldi	r24, 0xB8	; 184
    19b6:	9b e0       	ldi	r25, 0x0B	; 11
    19b8:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <Motor_setPWM>
	if (timeTask_getDuration(&startTime, &now) > 1050000UL)
	setState(STOP);
}

void turnLeft() {
	Motor_setPWM(-3000, 3000);
    19bc:	68 eb       	ldi	r22, 0xB8	; 184
    19be:	7b e0       	ldi	r23, 0x0B	; 11
    19c0:	88 e4       	ldi	r24, 0x48	; 72
    19c2:	94 ef       	ldi	r25, 0xF4	; 244
    19c4:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <Motor_setPWM>
void stateMachine() {
	switch (state) {
		case IDLE:
			break;
		case CHECK_SENSORS:
			checkSensors();
    19c8:	0e 94 bd 0c 	call	0x197a	; 0x197a <checkSensors>
timeTask_time_t getStartTime(){
	return startTime;
}

void driveForward() {
	Motor_setPWM(3000, 3010);
    19cc:	62 ec       	ldi	r22, 0xC2	; 194
    19ce:	7b e0       	ldi	r23, 0x0B	; 11
    19d0:	88 eb       	ldi	r24, 0xB8	; 184
    19d2:	9b e0       	ldi	r25, 0x0B	; 11
    19d4:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <Motor_setPWM>
		case DRIVE_ADJUST:
			driveAdjust();
			break;
		*/
		case WAIT_90:
			wait_90();
    19d8:	0c 94 9a 0c 	jmp	0x1934	; 0x1934 <wait_90>
			break;
		case TURN_ADJUST:
			turnRight();
			break;
		case STOP:
			Motor_stopAll();
    19dc:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <Motor_stopAll>

static state_t state = IDLE;
static timeTask_time_t startTime;		//timeTask_getTimestamp();

void setState(const state_t newState) {
	state = newState;
    19e0:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <state>
    19e4:	08 95       	ret

000019e6 <__vector_default>:
 * an interrupt fires which has no ISR explicitly defined in the code.
 *
 * This implementation just enters an infinite loop and toggles both LEDs
 * alternately with a delay of 100ms in order to give the user a feedback.
 */
ISR(BADISR_vect) {
    19e6:	1f 92       	push	r1
    19e8:	0f 92       	push	r0
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	0f 92       	push	r0
    19ee:	11 24       	eor	r1, r1
	LED1_ON();
    19f0:	17 9a       	sbi	0x02, 7	; 2
	LED2_OFF();
    19f2:	16 98       	cbi	0x02, 6	; 2

	for (;;) {
		_delay_ms(100);
		LED1_TOGGLE();
		LED2_TOGGLE();
    19f4:	90 e4       	ldi	r25, 0x40	; 64
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    19f6:	2f ef       	ldi	r18, 0xFF	; 255
    19f8:	30 e7       	ldi	r19, 0x70	; 112
    19fa:	82 e0       	ldi	r24, 0x02	; 2
    19fc:	21 50       	subi	r18, 0x01	; 1
    19fe:	30 40       	sbci	r19, 0x00	; 0
    1a00:	80 40       	sbci	r24, 0x00	; 0
    1a02:	e1 f7       	brne	.-8      	; 0x19fc <__vector_default+0x16>
    1a04:	00 c0       	rjmp	.+0      	; 0x1a06 <__vector_default+0x20>
    1a06:	00 00       	nop
	LED1_ON();
	LED2_OFF();

	for (;;) {
		_delay_ms(100);
		LED1_TOGGLE();
    1a08:	82 b1       	in	r24, 0x02	; 2
    1a0a:	80 58       	subi	r24, 0x80	; 128
    1a0c:	82 b9       	out	0x02, r24	; 2
		LED2_TOGGLE();
    1a0e:	82 b1       	in	r24, 0x02	; 2
    1a10:	89 27       	eor	r24, r25
    1a12:	82 b9       	out	0x02, r24	; 2
    1a14:	f0 cf       	rjmp	.-32     	; 0x19f6 <__vector_default+0x10>

00001a16 <timeTask_init>:


// initialize timer 5 to fire interrupt every millisecond at an 8MHz clock
void timeTask_init(void) {
    // prevent multiple initializations
    if ((GPIOR0 & _BV(GPIOR0_INIT_BIT)) == 0) {
    1a16:	f1 99       	sbic	0x1e, 1	; 30
    1a18:	08 95       	ret
    	GPIOR0 |= _BV(GPIOR0_INIT_BIT);
    1a1a:	f1 9a       	sbi	0x1e, 1	; 30

        // disable power reduction of timer 5
        PRR1 &= ~_BV(PRTIM5);
    1a1c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
    1a20:	8f 7d       	andi	r24, 0xDF	; 223
    1a22:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>

        TCCR5B = 0x00;  // stop timer 5 by selecting no clock
    1a26:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <__TEXT_REGION_LENGTH__+0x7e0121>

        ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { // disable interrupts just in case because of TEMP register used by TCNT5 and OCR5A, see Section 17.3 of datasheet
    1a2a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1a2c:	f8 94       	cli
			// set counter value to zero
			TCNT5 = 0;
    1a2e:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7e0125>
    1a32:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7e0124>

			// set timer 5 to CTC mode (clear timer on compare match with OCR5A)
			// use prescaler of 8 => timer frequency of 1MHz
			// TOP = max value of counter is defined by OCR5A
			// set OCR5A to 1000 = 0x03E8, produces a compare match interrupt frequency of 1kHz = 1ms
			OCR5A = 0x03E8;
    1a36:	28 ee       	ldi	r18, 0xE8	; 232
    1a38:	33 e0       	ldi	r19, 0x03	; 3
    1a3a:	30 93 29 01 	sts	0x0129, r19	; 0x800129 <__TEXT_REGION_LENGTH__+0x7e0129>
    1a3e:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <__TEXT_REGION_LENGTH__+0x7e0128>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1a42:	8f bf       	out	0x3f, r24	; 63
        }

        TCCR5C = 0x00; // no force output compare
    1a44:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <__TEXT_REGION_LENGTH__+0x7e0122>
        TCCR5A = 0x00; // WGM51=0, WGM50=0, COM5A0/1=0, COM5B0/1=0, COM5C0/1=0 (no compare output mode)
    1a48:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x7e0120>
        TIMSK5 = _BV(OCIE5A); // timer 5 output compare A match interrupt enable
    1a4c:	82 e0       	ldi	r24, 0x02	; 2
    1a4e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
        TCCR5B = _BV(WGM52) | _BV(CS51); // CTC mode (TOP=OCR5A), Clock Select 1 => Prescaler 8, Timer frequency: 1MHz, start timer
    1a52:	8a e0       	ldi	r24, 0x0A	; 10
    1a54:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x7e0121>
    1a58:	08 95       	ret

00001a5a <timeTask_getTimestamp>:

void timeTask_getTimestamp(timeTask_time_t* timestamp) {
    register uint16_t time_us;
    register uint32_t time_ms;

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1a5a:	ef b7       	in	r30, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1a5c:	f8 94       	cli
        time_us = TCNT5;
    1a5e:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <__TEXT_REGION_LENGTH__+0x7e0124>
    1a62:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <__TEXT_REGION_LENGTH__+0x7e0125>
        time_ms = timeTask_time_ms;
    1a66:	40 91 89 02 	lds	r20, 0x0289	; 0x800289 <timeTask_time_ms>
    1a6a:	50 91 8a 02 	lds	r21, 0x028A	; 0x80028a <timeTask_time_ms+0x1>
    1a6e:	60 91 8b 02 	lds	r22, 0x028B	; 0x80028b <timeTask_time_ms+0x2>
    1a72:	70 91 8c 02 	lds	r23, 0x028C	; 0x80028c <timeTask_time_ms+0x3>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1a76:	ef bf       	out	0x3f, r30	; 63
    }

    timestamp->time_ms = time_ms;
    1a78:	fc 01       	movw	r30, r24
    1a7a:	40 83       	st	Z, r20
    1a7c:	51 83       	std	Z+1, r21	; 0x01
    1a7e:	62 83       	std	Z+2, r22	; 0x02
    1a80:	73 83       	std	Z+3, r23	; 0x03
    timestamp->time_us = time_us;
    1a82:	35 83       	std	Z+5, r19	; 0x05
    1a84:	24 83       	std	Z+4, r18	; 0x04
    1a86:	08 95       	ret

00001a88 <timeTask_getDuration>:
}


uint32_t timeTask_getDuration(const timeTask_time_t* startTime, const timeTask_time_t* stopTime) {
    1a88:	0f 93       	push	r16
    1a8a:	1f 93       	push	r17
    1a8c:	cf 93       	push	r28
    1a8e:	df 93       	push	r29
    1a90:	fc 01       	movw	r30, r24
    1a92:	eb 01       	movw	r28, r22
	return ((stopTime->time_ms - startTime->time_ms) * 1000) + ((int16_t)stopTime->time_us - (int16_t)startTime->time_us);
    1a94:	48 81       	ld	r20, Y
    1a96:	59 81       	ldd	r21, Y+1	; 0x01
    1a98:	6a 81       	ldd	r22, Y+2	; 0x02
    1a9a:	7b 81       	ldd	r23, Y+3	; 0x03
    1a9c:	80 81       	ld	r24, Z
    1a9e:	91 81       	ldd	r25, Z+1	; 0x01
    1aa0:	a2 81       	ldd	r26, Z+2	; 0x02
    1aa2:	b3 81       	ldd	r27, Z+3	; 0x03
    1aa4:	9a 01       	movw	r18, r20
    1aa6:	ab 01       	movw	r20, r22
    1aa8:	28 1b       	sub	r18, r24
    1aaa:	39 0b       	sbc	r19, r25
    1aac:	4a 0b       	sbc	r20, r26
    1aae:	5b 0b       	sbc	r21, r27
    1ab0:	a8 ee       	ldi	r26, 0xE8	; 232
    1ab2:	b3 e0       	ldi	r27, 0x03	; 3
    1ab4:	0e 94 35 20 	call	0x406a	; 0x406a <__muluhisi3>
    1ab8:	4c 81       	ldd	r20, Y+4	; 0x04
    1aba:	5d 81       	ldd	r21, Y+5	; 0x05
    1abc:	24 81       	ldd	r18, Z+4	; 0x04
    1abe:	35 81       	ldd	r19, Z+5	; 0x05
    1ac0:	fa 01       	movw	r30, r20
    1ac2:	e2 1b       	sub	r30, r18
    1ac4:	f3 0b       	sbc	r31, r19
    1ac6:	8f 01       	movw	r16, r30
    1ac8:	ff 0f       	add	r31, r31
    1aca:	22 0b       	sbc	r18, r18
    1acc:	33 0b       	sbc	r19, r19
    1ace:	60 0f       	add	r22, r16
    1ad0:	71 1f       	adc	r23, r17
    1ad2:	82 1f       	adc	r24, r18
    1ad4:	93 1f       	adc	r25, r19
}
    1ad6:	df 91       	pop	r29
    1ad8:	cf 91       	pop	r28
    1ada:	1f 91       	pop	r17
    1adc:	0f 91       	pop	r16
    1ade:	08 95       	ret

00001ae0 <Motor_init>:
    __asm__ volatile ("" ::: "memory");
    1ae0:	cf 93       	push	r28
    1ae2:	df 93       	push	r29
    1ae4:	e5 e6       	ldi	r30, 0x65	; 101
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	87 7e       	andi	r24, 0xE7	; 231
    1aec:	80 83       	st	Z, r24
    1aee:	a1 e9       	ldi	r26, 0x91	; 145
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	1c 92       	st	X, r1
    1af4:	e1 ea       	ldi	r30, 0xA1	; 161
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	10 82       	st	Z, r1
    1afa:	82 ef       	ldi	r24, 0xF2	; 242
    1afc:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    1b00:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    1b04:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__TEXT_REGION_LENGTH__+0x7e0092>
    1b08:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
    1b0c:	2f b7       	in	r18, 0x3f	; 63
    1b0e:	f8 94       	cli
    1b10:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    1b14:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
    1b18:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
    1b1c:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
    1b20:	8f ef       	ldi	r24, 0xFF	; 255
    1b22:	9f e1       	ldi	r25, 0x1F	; 31
    1b24:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
    1b28:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
    1b2c:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    1b30:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1b34:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    1b38:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    1b3c:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    1b40:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    1b44:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1b48:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
    1b4c:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
    1b50:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1b54:	8d b1       	in	r24, 0x0d	; 13
    1b56:	88 61       	ori	r24, 0x18	; 24
    1b58:	8d b9       	out	0x0d, r24	; 13
    1b5a:	c1 e0       	ldi	r28, 0x01	; 1
    1b5c:	d1 e0       	ldi	r29, 0x01	; 1
    1b5e:	88 81       	ld	r24, Y
    1b60:	88 61       	ori	r24, 0x18	; 24
    1b62:	88 83       	st	Y, r24
    1b64:	81 e8       	ldi	r24, 0x81	; 129
    1b66:	83 bd       	out	0x23, r24	; 35
    1b68:	81 e1       	ldi	r24, 0x11	; 17
    1b6a:	8c 93       	st	X, r24
    1b6c:	80 83       	st	Z, r24
    1b6e:	13 bc       	out	0x23, r1	; 35
    1b70:	2f bf       	out	0x3f, r18	; 63
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	08 95       	ret

00001b78 <Motor_setPWM>:
    1b78:	97 fd       	sbrc	r25, 7
    1b7a:	18 c0       	rjmp	.+48     	; 0x1bac <L_pwmAneg102>
    1b7c:	9f 71       	andi	r25, 0x1F	; 31
    1b7e:	0f b6       	in	r0, 0x3f	; 63
    1b80:	f8 94       	cli
    1b82:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    1b86:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    1b8a:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    1b8e:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    1b92:	77 fd       	sbrc	r23, 7
    1b94:	1b c0       	rjmp	.+54     	; 0x1bcc <L_pwmBneg102>

00001b96 <L_pwmBpos102>:
    1b96:	7f 71       	andi	r23, 0x1F	; 31
    1b98:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1b9c:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
    1ba0:	70 93 ab 00 	sts	0x00AB, r23	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
    1ba4:	60 93 aa 00 	sts	0x00AA, r22	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1ba8:	0f be       	out	0x3f, r0	; 63
    1baa:	08 95       	ret

00001bac <L_pwmAneg102>:
    1bac:	91 95       	neg	r25
    1bae:	81 95       	neg	r24
    1bb0:	91 09       	sbc	r25, r1
    1bb2:	9f 71       	andi	r25, 0x1F	; 31
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	f8 94       	cli
    1bb8:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    1bbc:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    1bc0:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    1bc4:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    1bc8:	77 ff       	sbrs	r23, 7
    1bca:	e5 cf       	rjmp	.-54     	; 0x1b96 <L_pwmBpos102>

00001bcc <L_pwmBneg102>:
    1bcc:	71 95       	neg	r23
    1bce:	61 95       	neg	r22
    1bd0:	71 09       	sbc	r23, r1
    1bd2:	7f 71       	andi	r23, 0x1F	; 31
    1bd4:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
    1bd8:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1bdc:	70 93 a9 00 	sts	0x00A9, r23	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1be0:	60 93 a8 00 	sts	0x00A8, r22	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	08 95       	ret

00001be8 <Motor_stopAll>:
        OCR4B = 0x1FFF;
    }
}

void Motor_stopAll(void) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1be8:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1bea:	f8 94       	cli
        OCR3A = 0x1FFF;
    1bec:	8f ef       	ldi	r24, 0xFF	; 255
    1bee:	9f e1       	ldi	r25, 0x1F	; 31
    1bf0:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    1bf4:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
        OCR3B = 0x1FFF;
    1bf8:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    1bfc:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
        OCR4A = 0x1FFF;
    1c00:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1c04:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
        OCR4B = 0x1FFF;
    1c08:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
    1c0c:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1c10:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    1c12:	08 95       	ret

00001c14 <uart_write1>:
    uart_readMacro(1)
    uart_availableMacro(1)
    uart_TXBufSpaceAvailableMacro(1)
    uart_getTXBufSpaceMacro(1)
    uart_waitRXAvailableMacro(1)
    uart_isRXBufOverflowMacro(1)
    1c14:	20 91 8f 02 	lds	r18, 0x028F	; 0x80028f <uart1+0x2>
    1c18:	2f 5f       	subi	r18, 0xFF	; 255
    1c1a:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <uart1+0x3>
    1c1e:	29 17       	cp	r18, r25
    1c20:	e1 f3       	breq	.-8      	; 0x1c1a <uart_write1+0x6>
    1c22:	e2 2f       	mov	r30, r18
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	ef 50       	subi	r30, 0x0F	; 15
    1c28:	f8 4f       	sbci	r31, 0xF8	; 248
    1c2a:	80 83       	st	Z, r24
    1c2c:	20 93 8f 02 	sts	0x028F, r18	; 0x80028f <uart1+0x2>
    1c30:	88 eb       	ldi	r24, 0xB8	; 184
    1c32:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    1c36:	08 95       	ret

00001c38 <uart_read1>:
    1c38:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <uart1>
    1c3c:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <uart1+0x1>
    1c40:	98 17       	cp	r25, r24
    1c42:	d1 f3       	breq	.-12     	; 0x1c38 <uart_read1>
    1c44:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <uart1+0x1>
    1c48:	9f 5f       	subi	r25, 0xFF	; 255
    1c4a:	9f 77       	andi	r25, 0x7F	; 127
    1c4c:	e9 2f       	mov	r30, r25
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	ef 58       	subi	r30, 0x8F	; 143
    1c52:	f8 4f       	sbci	r31, 0xF8	; 248
    1c54:	80 81       	ld	r24, Z
    1c56:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <uart1+0x1>
    1c5a:	08 95       	ret

00001c5c <uart_available1>:
    1c5c:	20 91 8d 02 	lds	r18, 0x028D	; 0x80028d <uart1>
    1c60:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <uart1+0x1>
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	29 13       	cpse	r18, r25
    1c68:	08 95       	ret
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	08 95       	ret

00001c6e <uart_init>:
    uart_initMacro(0)
#endif

#ifdef USE_UART1
    // disable power reduction of USART1
    PRR1 &= ~_BV(PRUSART1);
    1c6e:	e5 e6       	ldi	r30, 0x65	; 101
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	8e 7f       	andi	r24, 0xFE	; 254
    1c76:	80 83       	st	Z, r24
    uart_initMacro(1)
    1c78:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    1c7c:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    1c80:	80 e4       	ldi	r24, 0x40	; 64
    1c82:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1c86:	88 e9       	ldi	r24, 0x98	; 152
    1c88:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    1c8c:	86 e0       	ldi	r24, 0x06	; 6
    1c8e:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    1c92:	08 95       	ret

00001c94 <ADC_init>:

// pointer into channels array with currently sampled channel
ADCChannel_t* ADC_currentChannel;


void ADC_init(const bool disableJTAG) {
    1c94:	cf 93       	push	r28
    1c96:	df 93       	push	r29
    if (disableJTAG) {
    1c98:	88 23       	and	r24, r24
    1c9a:	39 f0       	breq	.+14     	; 0x1caa <ADC_init+0x16>
        // atomically disable the JTAG interface
        ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1c9c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1c9e:	f8 94       	cli
            // read MCUCR and set bit for disabling JTAG
            uint8_t mcucr = MCUCR | _BV(JTD);
    1ca0:	85 b7       	in	r24, 0x35	; 53
    1ca2:	80 68       	ori	r24, 0x80	; 128

            // New value for MCUCR must be written twice within four clock cycles
            // in order to have JTAG disabled
            MCUCR = mcucr;
    1ca4:	85 bf       	out	0x35, r24	; 53
            MCUCR = mcucr;
    1ca6:	85 bf       	out	0x35, r24	; 53
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1ca8:	9f bf       	out	0x3f, r25	; 63
        }
    }

    // disable power reduction of ADC
    PRR0 &= ~_BV(PRADC);
    1caa:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
    1cae:	8e 7f       	andi	r24, 0xFE	; 254
    1cb0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>

    // disable ADC for now
    ADCSRA = 0x00;
    1cb4:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    // switch off analog comparator
    ACSR |= _BV(ACD);
    1cb8:	80 b7       	in	r24, 0x30	; 48
    1cba:	80 68       	ori	r24, 0x80	; 128
    1cbc:	80 bf       	out	0x30, r24	; 48
    #if (ADC_FILTER_SIZE & (ADC_FILTER_SIZE - 1))
        #error ADC_FILTER_SIZE is not a power of 2
    #endif

    // initialize data structure
    memset((void*)(ADC_channels), 0, sizeof(ADC_channels));
    1cbe:	e3 ef       	ldi	r30, 0xF3	; 243
    1cc0:	f8 e0       	ldi	r31, 0x08	; 8
    1cc2:	88 ed       	ldi	r24, 0xD8	; 216
    1cc4:	df 01       	movw	r26, r30
    1cc6:	1d 92       	st	X+, r1
    1cc8:	8a 95       	dec	r24
    1cca:	e9 f7       	brne	.-6      	; 0x1cc6 <ADC_init+0x32>

    ADC_currentChannel = &ADC_channels[0];
    1ccc:	f0 93 f2 08 	sts	0x08F2, r31	; 0x8008f2 <ADC_currentChannel+0x1>
    1cd0:	e0 93 f1 08 	sts	0x08F1, r30	; 0x8008f1 <ADC_currentChannel>

    // set mapping between virtual and physical ADC channels in data structure
    ADC_CHANNEL_INIT
    1cd4:	8f e0       	ldi	r24, 0x0F	; 15
    1cd6:	80 93 f6 08 	sts	0x08F6, r24	; 0x8008f6 <ADC_channels+0x3>
    1cda:	8e e0       	ldi	r24, 0x0E	; 14
    1cdc:	80 93 3e 09 	sts	0x093E, r24	; 0x80093e <ADC_channels+0x4b>
    1ce0:	8d e0       	ldi	r24, 0x0D	; 13
    1ce2:	80 93 86 09 	sts	0x0986, r24	; 0x800986 <ADC_channels+0x93>
    1ce6:	ab ec       	ldi	r26, 0xCB	; 203
    1ce8:	b9 e0       	ldi	r27, 0x09	; 9
    1cea:	8f e0       	ldi	r24, 0x0F	; 15
    // Configure ADC_channels[i].admux and ADC_channels[i].adcsrb for all channels.
    // Also disable digital input buffers for used ADC channels in order to save
    // some power, especially if analog voltage is close to Vcc/2
    uint8_t
        didr0 = 0,
        didr2 = 0;
    1cec:	30 e0       	ldi	r19, 0x00	; 0

    // Configure ADC_channels[i].admux and ADC_channels[i].adcsrb for all channels.
    // Also disable digital input buffers for used ADC channels in order to save
    // some power, especially if analog voltage is close to Vcc/2
    uint8_t
        didr0 = 0,
    1cee:	40 e0       	ldi	r20, 0x00	; 0
        if (physicalChannel & _BV(3)) {
            didr2 |= _BV(physicalChannelAND0x07);
            // if channel > 7, MUX5 (ADCSRB bit 3) has to be set, otherwise cleared
            ADC_channels[i].adcsrb = _BV(MUX5);
        } else {
            didr0 |= _BV(physicalChannelAND0x07);
    1cf0:	61 e0       	ldi	r22, 0x01	; 1
    1cf2:	70 e0       	ldi	r23, 0x00	; 0
        ADC_channels[i].admux = _BV(REFS0) | physicalChannelAND0x07;

        if (physicalChannel & _BV(3)) {
            didr2 |= _BV(physicalChannelAND0x07);
            // if channel > 7, MUX5 (ADCSRB bit 3) has to be set, otherwise cleared
            ADC_channels[i].adcsrb = _BV(MUX5);
    1cf4:	58 e0       	ldi	r21, 0x08	; 8
    uint8_t
        didr0 = 0,
        didr2 = 0;
    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; ++i) {
    	// clear up-to-date flag and constrain channel numbers to range from 0 to 15
		ADC_channels[i].channel &= 0x0F;
    1cf6:	98 2f       	mov	r25, r24
    1cf8:	9f 70       	andi	r25, 0x0F	; 15
    1cfa:	93 83       	std	Z+3, r25	; 0x03

		register uint8_t
            physicalChannel = ADC_channels[i].channel,
            physicalChannelAND0x07 = physicalChannel & 0x07;
    1cfc:	98 2f       	mov	r25, r24
    1cfe:	97 70       	andi	r25, 0x07	; 7

        // voltage reference for ADC is AVCC pin (connected to 3.3V)
        ADC_channels[i].admux = _BV(REFS0) | physicalChannelAND0x07;
    1d00:	29 2f       	mov	r18, r25
    1d02:	20 64       	ori	r18, 0x40	; 64
    1d04:	21 83       	std	Z+1, r18	; 0x01

        if (physicalChannel & _BV(3)) {
            didr2 |= _BV(physicalChannelAND0x07);
    1d06:	eb 01       	movw	r28, r22
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <ADC_init+0x7a>
    1d0a:	cc 0f       	add	r28, r28
    1d0c:	dd 1f       	adc	r29, r29
    1d0e:	9a 95       	dec	r25
    1d10:	e2 f7       	brpl	.-8      	; 0x1d0a <ADC_init+0x76>
            physicalChannelAND0x07 = physicalChannel & 0x07;

        // voltage reference for ADC is AVCC pin (connected to 3.3V)
        ADC_channels[i].admux = _BV(REFS0) | physicalChannelAND0x07;

        if (physicalChannel & _BV(3)) {
    1d12:	83 ff       	sbrs	r24, 3
    1d14:	09 c0       	rjmp	.+18     	; 0x1d28 <ADC_init+0x94>
            didr2 |= _BV(physicalChannelAND0x07);
    1d16:	3c 2b       	or	r19, r28
            // if channel > 7, MUX5 (ADCSRB bit 3) has to be set, otherwise cleared
            ADC_channels[i].adcsrb = _BV(MUX5);
    1d18:	52 83       	std	Z+2, r21	; 0x02
    1d1a:	e8 5b       	subi	r30, 0xB8	; 184
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    // Also disable digital input buffers for used ADC channels in order to save
    // some power, especially if analog voltage is close to Vcc/2
    uint8_t
        didr0 = 0,
        didr2 = 0;
    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; ++i) {
    1d1e:	ae 17       	cp	r26, r30
    1d20:	bf 07       	cpc	r27, r31
    1d22:	41 f0       	breq	.+16     	; 0x1d34 <ADC_init+0xa0>
    1d24:	83 81       	ldd	r24, Z+3	; 0x03
    1d26:	e7 cf       	rjmp	.-50     	; 0x1cf6 <ADC_init+0x62>
        if (physicalChannel & _BV(3)) {
            didr2 |= _BV(physicalChannelAND0x07);
            // if channel > 7, MUX5 (ADCSRB bit 3) has to be set, otherwise cleared
            ADC_channels[i].adcsrb = _BV(MUX5);
        } else {
            didr0 |= _BV(physicalChannelAND0x07);
    1d28:	4c 2b       	or	r20, r28
    1d2a:	e8 5b       	subi	r30, 0xB8	; 184
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    // Also disable digital input buffers for used ADC channels in order to save
    // some power, especially if analog voltage is close to Vcc/2
    uint8_t
        didr0 = 0,
        didr2 = 0;
    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; ++i) {
    1d2e:	ae 17       	cp	r26, r30
    1d30:	bf 07       	cpc	r27, r31
    1d32:	c1 f7       	brne	.-16     	; 0x1d24 <ADC_init+0x90>
        } else {
            didr0 |= _BV(physicalChannelAND0x07);
            // note: ADC_channels[i].adcsrb = 0 per initialization
        }
    }
    DIDR0 = didr0;
    1d34:	40 93 7e 00 	sts	0x007E, r20	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    DIDR2 = didr2;
    1d38:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <__TEXT_REGION_LENGTH__+0x7e007d>

    // configure ADC to sample the first channel
    ADMUX = ADC_channels[0].admux;
    1d3c:	80 91 f4 08 	lds	r24, 0x08F4	; 0x8008f4 <ADC_channels+0x1>
    1d40:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    ADCSRB = ADC_channels[0].adcsrb;
    1d44:	80 91 f5 08 	lds	r24, 0x08F5	; 0x8008f5 <ADC_channels+0x2>
    1d48:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>

    // ADC is now fully setup and the next run of TIMER5_COMPA_vect can start
    // the conversion. Bit GPIOR0_ADC_BIT of GPIOR0 is set to 1
    GPIOR0 |= _BV(GPIOR0_ADC_BIT);
    1d4c:	f2 9a       	sbi	0x1e, 2	; 30

    // initialize timeTask since starting of ADC conversion is triggered
    // by compare match interrupt of timer 5
    timeTask_init();
}
    1d4e:	df 91       	pop	r29
    1d50:	cf 91       	pop	r28
    // the conversion. Bit GPIOR0_ADC_BIT of GPIOR0 is set to 1
    GPIOR0 |= _BV(GPIOR0_ADC_BIT);

    // initialize timeTask since starting of ADC conversion is triggered
    // by compare match interrupt of timer 5
    timeTask_init();
    1d52:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <timeTask_init>

00001d56 <ADC_getFilteredValue>:


uint16_t ADC_getFilteredValue(const uint8_t channel) {
    // perform atomic read on ADC_channels[channel].sum

    ADCChannel_t *c = &ADC_channels[channel];
    1d56:	28 e4       	ldi	r18, 0x48	; 72
    1d58:	82 9f       	mul	r24, r18
    1d5a:	c0 01       	movw	r24, r0
    1d5c:	11 24       	eor	r1, r1
    1d5e:	fc 01       	movw	r30, r24
    1d60:	ed 50       	subi	r30, 0x0D	; 13
    1d62:	f7 4f       	sbci	r31, 0xF7	; 247
    // block. Otherwise the compiler would place this code after cli. This
    // ensures that interrupts are disabled for the smallest possible time.
    asm volatile ("" : : "r" (c) : "memory");

    uint32_t sum;
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1d64:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1d66:	f8 94       	cli
        sum = c->sum;
    1d68:	84 81       	ldd	r24, Z+4	; 0x04
    1d6a:	95 81       	ldd	r25, Z+5	; 0x05
    1d6c:	a6 81       	ldd	r26, Z+6	; 0x06
    1d6e:	b7 81       	ldd	r27, Z+7	; 0x07
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1d70:	2f bf       	out	0x3f, r18	; 63
    }

    // calculate average
    return (uint16_t)(sum / ADC_FILTER_SIZE);
    1d72:	25 e0       	ldi	r18, 0x05	; 5
    1d74:	b6 95       	lsr	r27
    1d76:	a7 95       	ror	r26
    1d78:	97 95       	ror	r25
    1d7a:	87 95       	ror	r24
    1d7c:	2a 95       	dec	r18
    1d7e:	d1 f7       	brne	.-12     	; 0x1d74 <ADC_getFilteredValue+0x1e>
}
    1d80:	08 95       	ret

00001d82 <readPackets>:
	communication_ChannelReceivers[channel] = callback;
}


void communication_clearCallback(const Channel_t channel) {
	communication_ChannelReceivers[channel] = 0;
    1d82:	ef 92       	push	r14
    1d84:	ff 92       	push	r15
    1d86:	0f 93       	push	r16
    1d88:	1f 93       	push	r17
    1d8a:	cf 93       	push	r28
    1d8c:	df 93       	push	r29
    1d8e:	00 91 93 02 	lds	r16, 0x0293	; 0x800293 <inChksum>
    1d92:	c0 91 95 02 	lds	r28, 0x0295	; 0x800295 <inBufLen>
    1d96:	d0 91 96 02 	lds	r29, 0x0296	; 0x800296 <inBufLen+0x1>
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	89 56       	subi	r24, 0x69	; 105
    1d9e:	9d 4f       	sbci	r25, 0xFD	; 253
    1da0:	7c 01       	movw	r14, r24
    1da2:	10 91 94 02 	lds	r17, 0x0294	; 0x800294 <isESC>
    1da6:	09 c0       	rjmp	.+18     	; 0x1dba <readPackets+0x38>
    1da8:	9f ef       	ldi	r25, 0xFF	; 255
    1daa:	e9 1a       	sub	r14, r25
    1dac:	f9 0a       	sbc	r15, r25
    1dae:	08 27       	eor	r16, r24
    1db0:	10 e0       	ldi	r17, 0x00	; 0
    1db2:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <uart_available1>
    1db6:	88 23       	and	r24, r24
    1db8:	01 f1       	breq	.+64     	; 0x1dfa <readPackets+0x78>
    1dba:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <uart_read1>
    1dbe:	11 11       	cpse	r17, r1
    1dc0:	04 c0       	rjmp	.+8      	; 0x1dca <readPackets+0x48>
    1dc2:	81 31       	cpi	r24, 0x11	; 17
    1dc4:	51 f1       	breq	.+84     	; 0x1e1a <readPackets+0x98>
    1dc6:	8b 32       	cpi	r24, 0x2B	; 43
    1dc8:	51 f1       	breq	.+84     	; 0x1e1e <readPackets+0x9c>
    1dca:	f7 01       	movw	r30, r14
    1dcc:	80 83       	st	Z, r24
    1dce:	21 96       	adiw	r28, 0x01	; 1
    1dd0:	c1 15       	cp	r28, r1
    1dd2:	f4 e0       	ldi	r31, 0x04	; 4
    1dd4:	df 07       	cpc	r29, r31
    1dd6:	41 f7       	brne	.-48     	; 0x1da8 <readPackets+0x26>
    1dd8:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <errors>
    1ddc:	81 60       	ori	r24, 0x01	; 1
    1dde:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <errors>
    1de2:	10 e0       	ldi	r17, 0x00	; 0
    1de4:	87 e9       	ldi	r24, 0x97	; 151
    1de6:	e8 2e       	mov	r14, r24
    1de8:	82 e0       	ldi	r24, 0x02	; 2
    1dea:	f8 2e       	mov	r15, r24
    1dec:	c0 e0       	ldi	r28, 0x00	; 0
    1dee:	d0 e0       	ldi	r29, 0x00	; 0
    1df0:	00 e0       	ldi	r16, 0x00	; 0
    1df2:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <uart_available1>
    1df6:	81 11       	cpse	r24, r1
    1df8:	e0 cf       	rjmp	.-64     	; 0x1dba <readPackets+0x38>
    1dfa:	00 93 93 02 	sts	0x0293, r16	; 0x800293 <inChksum>
    1dfe:	d0 93 96 02 	sts	0x0296, r29	; 0x800296 <inBufLen+0x1>
    1e02:	c0 93 95 02 	sts	0x0295, r28	; 0x800295 <inBufLen>
    1e06:	11 70       	andi	r17, 0x01	; 1
    1e08:	10 93 94 02 	sts	0x0294, r17	; 0x800294 <isESC>
    1e0c:	df 91       	pop	r29
    1e0e:	cf 91       	pop	r28
    1e10:	1f 91       	pop	r17
    1e12:	0f 91       	pop	r16
    1e14:	ff 90       	pop	r15
    1e16:	ef 90       	pop	r14
    1e18:	08 95       	ret
    1e1a:	11 e0       	ldi	r17, 0x01	; 1
    1e1c:	ca cf       	rjmp	.-108    	; 0x1db2 <readPackets+0x30>
    1e1e:	c4 30       	cpi	r28, 0x04	; 4
    1e20:	d1 05       	cpc	r29, r1
    1e22:	f0 f0       	brcs	.+60     	; 0x1e60 <readPackets+0xde>
    1e24:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <inBuf>
    1e28:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <inBuf+0x1>
    1e2c:	89 27       	eor	r24, r25
    1e2e:	98 2f       	mov	r25, r24
    1e30:	92 95       	swap	r25
    1e32:	9f 70       	andi	r25, 0x0F	; 15
    1e34:	8f 70       	andi	r24, 0x0F	; 15
    1e36:	89 27       	eor	r24, r25
    1e38:	e0 91 99 02 	lds	r30, 0x0299	; 0x800299 <inBuf+0x2>
    1e3c:	9e 2f       	mov	r25, r30
    1e3e:	92 95       	swap	r25
    1e40:	9f 70       	andi	r25, 0x0F	; 15
    1e42:	89 17       	cp	r24, r25
    1e44:	d1 f0       	breq	.+52     	; 0x1e7a <readPackets+0xf8>
    1e46:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <errors>
    1e4a:	84 60       	ori	r24, 0x04	; 4
    1e4c:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <errors>
    1e50:	27 e9       	ldi	r18, 0x97	; 151
    1e52:	e2 2e       	mov	r14, r18
    1e54:	22 e0       	ldi	r18, 0x02	; 2
    1e56:	f2 2e       	mov	r15, r18
    1e58:	c0 e0       	ldi	r28, 0x00	; 0
    1e5a:	d0 e0       	ldi	r29, 0x00	; 0
    1e5c:	00 e0       	ldi	r16, 0x00	; 0
    1e5e:	a9 cf       	rjmp	.-174    	; 0x1db2 <readPackets+0x30>
    1e60:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <errors>
    1e64:	82 60       	ori	r24, 0x02	; 2
    1e66:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <errors>
    1e6a:	97 e9       	ldi	r25, 0x97	; 151
    1e6c:	e9 2e       	mov	r14, r25
    1e6e:	92 e0       	ldi	r25, 0x02	; 2
    1e70:	f9 2e       	mov	r15, r25
    1e72:	c0 e0       	ldi	r28, 0x00	; 0
    1e74:	d0 e0       	ldi	r29, 0x00	; 0
    1e76:	00 e0       	ldi	r16, 0x00	; 0
    1e78:	9c cf       	rjmp	.-200    	; 0x1db2 <readPackets+0x30>
    1e7a:	60 91 97 02 	lds	r22, 0x0297	; 0x800297 <inBuf>
    1e7e:	70 91 98 02 	lds	r23, 0x0298	; 0x800298 <inBuf+0x1>
    1e82:	24 97       	sbiw	r28, 0x04	; 4
    1e84:	6c 17       	cp	r22, r28
    1e86:	7d 07       	cpc	r23, r29
    1e88:	69 f0       	breq	.+26     	; 0x1ea4 <readPackets+0x122>
    1e8a:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <errors>
    1e8e:	88 60       	ori	r24, 0x08	; 8
    1e90:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <errors>
    1e94:	37 e9       	ldi	r19, 0x97	; 151
    1e96:	e3 2e       	mov	r14, r19
    1e98:	32 e0       	ldi	r19, 0x02	; 2
    1e9a:	f3 2e       	mov	r15, r19
    1e9c:	c0 e0       	ldi	r28, 0x00	; 0
    1e9e:	d0 e0       	ldi	r29, 0x00	; 0
    1ea0:	00 e0       	ldi	r16, 0x00	; 0
    1ea2:	87 cf       	rjmp	.-242    	; 0x1db2 <readPackets+0x30>
    1ea4:	01 11       	cpse	r16, r1
    1ea6:	15 c0       	rjmp	.+42     	; 0x1ed2 <readPackets+0x150>
    1ea8:	ef 70       	andi	r30, 0x0F	; 15
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	ee 0f       	add	r30, r30
    1eae:	ff 1f       	adc	r31, r31
    1eb0:	e9 56       	subi	r30, 0x69	; 105
    1eb2:	f9 4f       	sbci	r31, 0xF9	; 249
    1eb4:	01 90       	ld	r0, Z+
    1eb6:	f0 81       	ld	r31, Z
    1eb8:	e0 2d       	mov	r30, r0
    1eba:	30 97       	sbiw	r30, 0x00	; 0
    1ebc:	b9 f0       	breq	.+46     	; 0x1eec <readPackets+0x16a>
    1ebe:	8a e9       	ldi	r24, 0x9A	; 154
    1ec0:	92 e0       	ldi	r25, 0x02	; 2
    1ec2:	09 95       	icall
    1ec4:	67 e9       	ldi	r22, 0x97	; 151
    1ec6:	e6 2e       	mov	r14, r22
    1ec8:	62 e0       	ldi	r22, 0x02	; 2
    1eca:	f6 2e       	mov	r15, r22
    1ecc:	c0 e0       	ldi	r28, 0x00	; 0
    1ece:	d0 e0       	ldi	r29, 0x00	; 0
    1ed0:	70 cf       	rjmp	.-288    	; 0x1db2 <readPackets+0x30>
    1ed2:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <errors>
    1ed6:	80 61       	ori	r24, 0x10	; 16
    1ed8:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <errors>
    1edc:	47 e9       	ldi	r20, 0x97	; 151
    1ede:	e4 2e       	mov	r14, r20
    1ee0:	42 e0       	ldi	r20, 0x02	; 2
    1ee2:	f4 2e       	mov	r15, r20
    1ee4:	c0 e0       	ldi	r28, 0x00	; 0
    1ee6:	d0 e0       	ldi	r29, 0x00	; 0
    1ee8:	00 e0       	ldi	r16, 0x00	; 0
    1eea:	63 cf       	rjmp	.-314    	; 0x1db2 <readPackets+0x30>
    1eec:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <errors>
    1ef0:	80 62       	ori	r24, 0x20	; 32
    1ef2:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <errors>
    1ef6:	57 e9       	ldi	r21, 0x97	; 151
    1ef8:	e5 2e       	mov	r14, r21
    1efa:	52 e0       	ldi	r21, 0x02	; 2
    1efc:	f5 2e       	mov	r15, r21
    1efe:	c0 e0       	ldi	r28, 0x00	; 0
    1f00:	d0 e0       	ldi	r29, 0x00	; 0
    1f02:	57 cf       	rjmp	.-338    	; 0x1db2 <readPackets+0x30>

00001f04 <communication_init>:
    1f04:	80 e2       	ldi	r24, 0x20	; 32
    1f06:	e7 e9       	ldi	r30, 0x97	; 151
    1f08:	f6 e0       	ldi	r31, 0x06	; 6
    1f0a:	df 01       	movw	r26, r30
    1f0c:	1d 92       	st	X+, r1
    1f0e:	8a 95       	dec	r24
    1f10:	e9 f7       	brne	.-6      	; 0x1f0c <communication_init+0x8>
    1f12:	08 95       	ret

00001f14 <communication_setCallback>:
    1f14:	e8 2f       	mov	r30, r24
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	ee 0f       	add	r30, r30
    1f1a:	ff 1f       	adc	r31, r31
    1f1c:	e9 56       	subi	r30, 0x69	; 105
    1f1e:	f9 4f       	sbci	r31, 0xF9	; 249
    1f20:	71 83       	std	Z+1, r23	; 0x01
    1f22:	60 83       	st	Z, r22
    1f24:	08 95       	ret

00001f26 <communication_writePacket>:
    communication_writePacket(CH_OUT_DEBUG, (uint8_t *)buff, size > 256 ? 257 : (size+1));
    free(buff);
}


void communication_writePacket(const Channel_t channel, const uint8_t* packet, const uint16_t size) {
    1f26:	cf 92       	push	r12
    1f28:	df 92       	push	r13
    1f2a:	ef 92       	push	r14
    1f2c:	ff 92       	push	r15
    1f2e:	0f 93       	push	r16
    1f30:	1f 93       	push	r17
    1f32:	cf 93       	push	r28
    1f34:	df 93       	push	r29
    1f36:	c8 2f       	mov	r28, r24
    1f38:	6b 01       	movw	r12, r22
    1f3a:	7a 01       	movw	r14, r20
    // while writing each byte, the global checksum is calculated over the whole
    // transmitted data including the header information

    // transmit low byte of payload size
    register uint8_t chksum = (uint8_t)size;
    uart_writeEscaped(chksum);
    1f3c:	41 31       	cpi	r20, 0x11	; 17
    1f3e:	09 f4       	brne	.+2      	; 0x1f42 <communication_writePacket+0x1c>
    1f40:	60 c0       	rjmp	.+192    	; 0x2002 <__DATA_REGION_LENGTH__+0x2>
    1f42:	4b 32       	cpi	r20, 0x2B	; 43
    1f44:	09 f4       	brne	.+2      	; 0x1f48 <communication_writePacket+0x22>
    1f46:	5d c0       	rjmp	.+186    	; 0x2002 <__DATA_REGION_LENGTH__+0x2>
    1f48:	8e 2d       	mov	r24, r14
    1f4a:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <uart_write1>

    // transmit high byte of payload size
    register uint8_t byte = (uint8_t)(size >> 8);
    1f4e:	8f 2d       	mov	r24, r15
    uart_writeEscaped(byte);
    1f50:	81 31       	cpi	r24, 0x11	; 17
    1f52:	09 f4       	brne	.+2      	; 0x1f56 <communication_writePacket+0x30>
    1f54:	52 c0       	rjmp	.+164    	; 0x1ffa <communication_writePacket+0xd4>
    1f56:	8b 32       	cpi	r24, 0x2B	; 43
    1f58:	09 f4       	brne	.+2      	; 0x1f5c <communication_writePacket+0x36>
    1f5a:	4f c0       	rjmp	.+158    	; 0x1ffa <communication_writePacket+0xd4>
    1f5c:	8f 2d       	mov	r24, r15
    1f5e:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <uart_write1>
    chksum ^= byte;
    1f62:	1f 2d       	mov	r17, r15
    1f64:	1e 25       	eor	r17, r14

    // compute 4-bit checksum of size and place it in high nibble,
    // place channel number in low nibble and transmit
    byte = (((chksum << 4) & 0xFF) ^ (chksum & 0xF0)) | (channel & 0x0F);
    1f66:	20 e1       	ldi	r18, 0x10	; 16
    1f68:	12 9f       	mul	r17, r18
    1f6a:	c0 01       	movw	r24, r0
    1f6c:	11 24       	eor	r1, r1
    1f6e:	d1 2f       	mov	r29, r17
    1f70:	d0 7f       	andi	r29, 0xF0	; 240
    1f72:	d8 27       	eor	r29, r24
    1f74:	cf 70       	andi	r28, 0x0F	; 15
    1f76:	dc 2b       	or	r29, r28
    uart_writeEscaped(byte);
    1f78:	d1 31       	cpi	r29, 0x11	; 17
    1f7a:	d9 f1       	breq	.+118    	; 0x1ff2 <communication_writePacket+0xcc>
    1f7c:	db 32       	cpi	r29, 0x2B	; 43
    1f7e:	c9 f1       	breq	.+114    	; 0x1ff2 <communication_writePacket+0xcc>
    1f80:	8d 2f       	mov	r24, r29
    1f82:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <uart_write1>
    chksum ^= byte;
    1f86:	d1 27       	eor	r29, r17

    // transmit packet payload and update checksum
    for (uint16_t i = 0; i < size; i++) {
    1f88:	e1 14       	cp	r14, r1
    1f8a:	f1 04       	cpc	r15, r1
    1f8c:	e1 f0       	breq	.+56     	; 0x1fc6 <communication_writePacket+0xa0>
    1f8e:	86 01       	movw	r16, r12
    1f90:	ec 0c       	add	r14, r12
    1f92:	fd 1c       	adc	r15, r13
    1f94:	07 c0       	rjmp	.+14     	; 0x1fa4 <communication_writePacket+0x7e>
        register uint8_t tmp = packet[i];
        uart_writeEscaped(tmp);
    1f96:	8c 2f       	mov	r24, r28
    1f98:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <uart_write1>
        chksum ^= tmp;
    1f9c:	dc 27       	eor	r29, r28
    byte = (((chksum << 4) & 0xFF) ^ (chksum & 0xF0)) | (channel & 0x0F);
    uart_writeEscaped(byte);
    chksum ^= byte;

    // transmit packet payload and update checksum
    for (uint16_t i = 0; i < size; i++) {
    1f9e:	0e 15       	cp	r16, r14
    1fa0:	1f 05       	cpc	r17, r15
    1fa2:	89 f0       	breq	.+34     	; 0x1fc6 <communication_writePacket+0xa0>
        register uint8_t tmp = packet[i];
    1fa4:	f8 01       	movw	r30, r16
    1fa6:	c1 91       	ld	r28, Z+
    1fa8:	8f 01       	movw	r16, r30
        uart_writeEscaped(tmp);
    1faa:	c1 31       	cpi	r28, 0x11	; 17
    1fac:	11 f0       	breq	.+4      	; 0x1fb2 <communication_writePacket+0x8c>
    1fae:	cb 32       	cpi	r28, 0x2B	; 43
    1fb0:	91 f7       	brne	.-28     	; 0x1f96 <communication_writePacket+0x70>
    1fb2:	81 e1       	ldi	r24, 0x11	; 17
    1fb4:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <uart_write1>
    1fb8:	8c 2f       	mov	r24, r28
    1fba:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <uart_write1>
        chksum ^= tmp;
    1fbe:	dc 27       	eor	r29, r28
    byte = (((chksum << 4) & 0xFF) ^ (chksum & 0xF0)) | (channel & 0x0F);
    uart_writeEscaped(byte);
    chksum ^= byte;

    // transmit packet payload and update checksum
    for (uint16_t i = 0; i < size; i++) {
    1fc0:	0e 15       	cp	r16, r14
    1fc2:	1f 05       	cpc	r17, r15
    1fc4:	79 f7       	brne	.-34     	; 0x1fa4 <communication_writePacket+0x7e>
        uart_writeEscaped(tmp);
        chksum ^= tmp;
    }

    // transmit checksum
    uart_writeEscaped(chksum);
    1fc6:	d1 31       	cpi	r29, 0x11	; 17
    1fc8:	81 f0       	breq	.+32     	; 0x1fea <communication_writePacket+0xc4>
    1fca:	db 32       	cpi	r29, 0x2B	; 43
    1fcc:	71 f0       	breq	.+28     	; 0x1fea <communication_writePacket+0xc4>
    1fce:	8d 2f       	mov	r24, r29
    1fd0:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <uart_write1>
    // transmit packet delimiter
    uart_write(DELIM);
    1fd4:	8b e2       	ldi	r24, 0x2B	; 43
}
    1fd6:	df 91       	pop	r29
    1fd8:	cf 91       	pop	r28
    1fda:	1f 91       	pop	r17
    1fdc:	0f 91       	pop	r16
    1fde:	ff 90       	pop	r15
    1fe0:	ef 90       	pop	r14
    1fe2:	df 90       	pop	r13
    1fe4:	cf 90       	pop	r12
    }

    // transmit checksum
    uart_writeEscaped(chksum);
    // transmit packet delimiter
    uart_write(DELIM);
    1fe6:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <uart_write1>
        uart_writeEscaped(tmp);
        chksum ^= tmp;
    }

    // transmit checksum
    uart_writeEscaped(chksum);
    1fea:	81 e1       	ldi	r24, 0x11	; 17
    1fec:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <uart_write1>
    1ff0:	ee cf       	rjmp	.-36     	; 0x1fce <communication_writePacket+0xa8>
    chksum ^= byte;

    // compute 4-bit checksum of size and place it in high nibble,
    // place channel number in low nibble and transmit
    byte = (((chksum << 4) & 0xFF) ^ (chksum & 0xF0)) | (channel & 0x0F);
    uart_writeEscaped(byte);
    1ff2:	81 e1       	ldi	r24, 0x11	; 17
    1ff4:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <uart_write1>
    1ff8:	c3 cf       	rjmp	.-122    	; 0x1f80 <communication_writePacket+0x5a>
    register uint8_t chksum = (uint8_t)size;
    uart_writeEscaped(chksum);

    // transmit high byte of payload size
    register uint8_t byte = (uint8_t)(size >> 8);
    uart_writeEscaped(byte);
    1ffa:	81 e1       	ldi	r24, 0x11	; 17
    1ffc:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <uart_write1>
    2000:	ad cf       	rjmp	.-166    	; 0x1f5c <communication_writePacket+0x36>
    // while writing each byte, the global checksum is calculated over the whole
    // transmitted data including the header information

    // transmit low byte of payload size
    register uint8_t chksum = (uint8_t)size;
    uart_writeEscaped(chksum);
    2002:	81 e1       	ldi	r24, 0x11	; 17
    2004:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <uart_write1>
    2008:	9f cf       	rjmp	.-194    	; 0x1f48 <communication_writePacket+0x22>

0000200a <communication_log>:
void communication_clearCallback(const Channel_t channel) {
	communication_ChannelReceivers[channel] = 0;
}


void communication_log(const Level_t level, const char* format, ...) {
    200a:	0f 93       	push	r16
    200c:	1f 93       	push	r17
    200e:	cf 93       	push	r28
    2010:	df 93       	push	r29
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    va_list argp;
    va_start(argp, format);

    char* buff = (char*)malloc(258);
    2016:	82 e0       	ldi	r24, 0x02	; 2
    2018:	91 e0       	ldi	r25, 0x01	; 1
    201a:	0e 94 4f 20 	call	0x409e	; 0x409e <malloc>
    201e:	8c 01       	movw	r16, r24
    if (buff == 0) {
    2020:	00 97       	sbiw	r24, 0x00	; 0
    2022:	19 f1       	breq	.+70     	; 0x206a <communication_log+0x60>
    	errors |= COMM_ERR_OUT_OF_MEMORY;
    	return;
    }
    buff[0] = level;
    2024:	2f 81       	ldd	r18, Y+7	; 0x07
    2026:	fc 01       	movw	r30, r24
    2028:	21 93       	st	Z+, r18
    202a:	cf 01       	movw	r24, r30

    int size = vsnprintf(&buff[1], 257, format, argp);
    202c:	9e 01       	movw	r18, r28
    202e:	26 5f       	subi	r18, 0xF6	; 246
    2030:	3f 4f       	sbci	r19, 0xFF	; 255
    2032:	48 85       	ldd	r20, Y+8	; 0x08
    2034:	59 85       	ldd	r21, Y+9	; 0x09
    2036:	61 e0       	ldi	r22, 0x01	; 1
    2038:	71 e0       	ldi	r23, 0x01	; 1
    203a:	0e 94 79 21 	call	0x42f2	; 0x42f2 <vsnprintf>
    va_end(argp);

    // send packet to debug channel CH_OUT_DEBUG (0x00)
    communication_writePacket(CH_OUT_DEBUG, (uint8_t *)buff, size > 256 ? 257 : (size+1));
    203e:	81 30       	cpi	r24, 0x01	; 1
    2040:	f1 e0       	ldi	r31, 0x01	; 1
    2042:	9f 07       	cpc	r25, r31
    2044:	74 f0       	brlt	.+28     	; 0x2062 <communication_log+0x58>
    2046:	41 e0       	ldi	r20, 0x01	; 1
    2048:	51 e0       	ldi	r21, 0x01	; 1
    204a:	b8 01       	movw	r22, r16
    204c:	80 e0       	ldi	r24, 0x00	; 0
    204e:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <communication_writePacket>
    free(buff);
    2052:	c8 01       	movw	r24, r16
    2054:	0e 94 e7 20 	call	0x41ce	; 0x41ce <free>
}
    2058:	df 91       	pop	r29
    205a:	cf 91       	pop	r28
    205c:	1f 91       	pop	r17
    205e:	0f 91       	pop	r16
    2060:	08 95       	ret

    int size = vsnprintf(&buff[1], 257, format, argp);
    va_end(argp);

    // send packet to debug channel CH_OUT_DEBUG (0x00)
    communication_writePacket(CH_OUT_DEBUG, (uint8_t *)buff, size > 256 ? 257 : (size+1));
    2062:	ac 01       	movw	r20, r24
    2064:	4f 5f       	subi	r20, 0xFF	; 255
    2066:	5f 4f       	sbci	r21, 0xFF	; 255
    2068:	f0 cf       	rjmp	.-32     	; 0x204a <communication_log+0x40>
    va_list argp;
    va_start(argp, format);

    char* buff = (char*)malloc(258);
    if (buff == 0) {
    	errors |= COMM_ERR_OUT_OF_MEMORY;
    206a:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <errors>
    206e:	80 64       	ori	r24, 0x40	; 64
    2070:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <errors>
    va_end(argp);

    // send packet to debug channel CH_OUT_DEBUG (0x00)
    communication_writePacket(CH_OUT_DEBUG, (uint8_t *)buff, size > 256 ? 257 : (size+1));
    free(buff);
}
    2074:	df 91       	pop	r29
    2076:	cf 91       	pop	r28
    2078:	1f 91       	pop	r17
    207a:	0f 91       	pop	r16
    207c:	08 95       	ret

0000207e <communication_log_P>:


void communication_log_P(const Level_t level, const char* format, ...) {
    207e:	0f 93       	push	r16
    2080:	1f 93       	push	r17
    2082:	cf 93       	push	r28
    2084:	df 93       	push	r29
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
    va_list argp;
    va_start(argp, format);

    char* buff = (char*)malloc(258);
    208a:	82 e0       	ldi	r24, 0x02	; 2
    208c:	91 e0       	ldi	r25, 0x01	; 1
    208e:	0e 94 4f 20 	call	0x409e	; 0x409e <malloc>
    2092:	8c 01       	movw	r16, r24
    if (buff == 0) {
    2094:	00 97       	sbiw	r24, 0x00	; 0
    2096:	19 f1       	breq	.+70     	; 0x20de <communication_log_P+0x60>
    	errors |= COMM_ERR_OUT_OF_MEMORY;
    	return;
    }
    buff[0] = level;
    2098:	2f 81       	ldd	r18, Y+7	; 0x07
    209a:	fc 01       	movw	r30, r24
    209c:	21 93       	st	Z+, r18
    209e:	cf 01       	movw	r24, r30

    int size = vsnprintf_P(&buff[1], 257, format, argp);
    20a0:	9e 01       	movw	r18, r28
    20a2:	26 5f       	subi	r18, 0xF6	; 246
    20a4:	3f 4f       	sbci	r19, 0xFF	; 255
    20a6:	48 85       	ldd	r20, Y+8	; 0x08
    20a8:	59 85       	ldd	r21, Y+9	; 0x09
    20aa:	61 e0       	ldi	r22, 0x01	; 1
    20ac:	71 e0       	ldi	r23, 0x01	; 1
    20ae:	0e 94 b2 21 	call	0x4364	; 0x4364 <vsnprintf_P>
    va_end(argp);

    // send packet to debug channel CH_OUT_DEBUG (0x00)
    communication_writePacket(CH_OUT_DEBUG, (uint8_t *)buff, size > 256 ? 257 : (size+1));
    20b2:	81 30       	cpi	r24, 0x01	; 1
    20b4:	f1 e0       	ldi	r31, 0x01	; 1
    20b6:	9f 07       	cpc	r25, r31
    20b8:	74 f0       	brlt	.+28     	; 0x20d6 <communication_log_P+0x58>
    20ba:	41 e0       	ldi	r20, 0x01	; 1
    20bc:	51 e0       	ldi	r21, 0x01	; 1
    20be:	b8 01       	movw	r22, r16
    20c0:	80 e0       	ldi	r24, 0x00	; 0
    20c2:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <communication_writePacket>
    free(buff);
    20c6:	c8 01       	movw	r24, r16
    20c8:	0e 94 e7 20 	call	0x41ce	; 0x41ce <free>
}
    20cc:	df 91       	pop	r29
    20ce:	cf 91       	pop	r28
    20d0:	1f 91       	pop	r17
    20d2:	0f 91       	pop	r16
    20d4:	08 95       	ret

    int size = vsnprintf_P(&buff[1], 257, format, argp);
    va_end(argp);

    // send packet to debug channel CH_OUT_DEBUG (0x00)
    communication_writePacket(CH_OUT_DEBUG, (uint8_t *)buff, size > 256 ? 257 : (size+1));
    20d6:	ac 01       	movw	r20, r24
    20d8:	4f 5f       	subi	r20, 0xFF	; 255
    20da:	5f 4f       	sbci	r21, 0xFF	; 255
    20dc:	f0 cf       	rjmp	.-32     	; 0x20be <communication_log_P+0x40>
    va_list argp;
    va_start(argp, format);

    char* buff = (char*)malloc(258);
    if (buff == 0) {
    	errors |= COMM_ERR_OUT_OF_MEMORY;
    20de:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <errors>
    20e2:	80 64       	ori	r24, 0x40	; 64
    20e4:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <errors>
    va_end(argp);

    // send packet to debug channel CH_OUT_DEBUG (0x00)
    communication_writePacket(CH_OUT_DEBUG, (uint8_t *)buff, size > 256 ? 257 : (size+1));
    free(buff);
}
    20e8:	df 91       	pop	r29
    20ea:	cf 91       	pop	r28
    20ec:	1f 91       	pop	r17
    20ee:	0f 91       	pop	r16
    20f0:	08 95       	ret

000020f2 <communication_readPackets>:
    isESC = tmpIsESC;
}


void communication_readPackets(void) {
    if (uart_available())
    20f2:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <uart_available1>
    20f6:	81 11       	cpse	r24, r1
    20f8:	01 c0       	rjmp	.+2      	; 0x20fc <communication_readPackets+0xa>
    20fa:	08 95       	ret
        readPackets();
    20fc:	0c 94 c1 0e 	jmp	0x1d82	; 0x1d82 <readPackets>

00002100 <commPathFollowerParameters>:
static void resetState(void) {
    curSeg = -1;
    initialized = false;
    pathFollower_status.enabled = false;
    pathFollower_extStatus.onLastSegment = false;
    pathFollower_extStatus.distanceOPToEnd = 0.0f;
    2100:	cf 92       	push	r12
    2102:	df 92       	push	r13
    2104:	ef 92       	push	r14
    2106:	ff 92       	push	r15
    2108:	cf 93       	push	r28
    210a:	df 93       	push	r29
    210c:	ec 01       	movw	r28, r24
    210e:	c8 80       	ld	r12, Y
    2110:	d9 80       	ldd	r13, Y+1	; 0x01
    2112:	ea 80       	ldd	r14, Y+2	; 0x02
    2114:	fb 80       	ldd	r15, Y+3	; 0x03
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	a9 01       	movw	r20, r18
    211c:	c7 01       	movw	r24, r14
    211e:	b6 01       	movw	r22, r12
    2120:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <__gesf2>
    2124:	18 16       	cp	r1, r24
    2126:	44 f4       	brge	.+16     	; 0x2138 <commPathFollowerParameters+0x38>
    2128:	c0 92 2e 02 	sts	0x022E, r12	; 0x80022e <pathFollower_lookaheadDistance>
    212c:	d0 92 2f 02 	sts	0x022F, r13	; 0x80022f <pathFollower_lookaheadDistance+0x1>
    2130:	e0 92 30 02 	sts	0x0230, r14	; 0x800230 <pathFollower_lookaheadDistance+0x2>
    2134:	f0 92 31 02 	sts	0x0231, r15	; 0x800231 <pathFollower_lookaheadDistance+0x3>
    2138:	8c 81       	ldd	r24, Y+4	; 0x04
    213a:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <pathFollower_segmentLimit>
    213e:	8d ea       	ldi	r24, 0xAD	; 173
    2140:	91 e0       	ldi	r25, 0x01	; 1
    2142:	9f 93       	push	r25
    2144:	8f 93       	push	r24
    2146:	82 e0       	ldi	r24, 0x02	; 2
    2148:	8f 93       	push	r24
    214a:	0e 94 3f 10 	call	0x207e	; 0x207e <communication_log_P>
    214e:	0f 90       	pop	r0
    2150:	0f 90       	pop	r0
    2152:	0f 90       	pop	r0
    2154:	df 91       	pop	r29
    2156:	cf 91       	pop	r28
    2158:	ff 90       	pop	r15
    215a:	ef 90       	pop	r14
    215c:	df 90       	pop	r13
    215e:	cf 90       	pop	r12
    2160:	08 95       	ret

00002162 <setPath>:
    2162:	2f 92       	push	r2
    2164:	3f 92       	push	r3
    2166:	4f 92       	push	r4
    2168:	5f 92       	push	r5
    216a:	6f 92       	push	r6
    216c:	7f 92       	push	r7
    216e:	8f 92       	push	r8
    2170:	9f 92       	push	r9
    2172:	af 92       	push	r10
    2174:	bf 92       	push	r11
    2176:	cf 92       	push	r12
    2178:	df 92       	push	r13
    217a:	ef 92       	push	r14
    217c:	ff 92       	push	r15
    217e:	0f 93       	push	r16
    2180:	1f 93       	push	r17
    2182:	cf 93       	push	r28
    2184:	df 93       	push	r29
    2186:	82 30       	cpi	r24, 0x02	; 2
    2188:	08 f4       	brcc	.+2      	; 0x218c <setPath+0x2a>
    218a:	aa c0       	rjmp	.+340    	; 0x22e0 <__stack+0xe1>
    218c:	5b 01       	movw	r10, r22
    218e:	d8 2f       	mov	r29, r24
    2190:	10 92 e0 06 	sts	0x06E0, r1	; 0x8006e0 <pathLength>
    2194:	8f ef       	ldi	r24, 0xFF	; 255
    2196:	9f ef       	ldi	r25, 0xFF	; 255
    2198:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <curSeg+0x1>
    219c:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <curSeg>
    21a0:	10 92 df 06 	sts	0x06DF, r1	; 0x8006df <initialized>
    21a4:	10 92 ea 06 	sts	0x06EA, r1	; 0x8006ea <pathFollower_status>
    21a8:	10 92 e5 06 	sts	0x06E5, r1	; 0x8006e5 <pathFollower_extStatus>
    21ac:	10 92 e6 06 	sts	0x06E6, r1	; 0x8006e6 <pathFollower_extStatus+0x1>
    21b0:	10 92 e7 06 	sts	0x06E7, r1	; 0x8006e7 <pathFollower_extStatus+0x2>
    21b4:	10 92 e8 06 	sts	0x06E8, r1	; 0x8006e8 <pathFollower_extStatus+0x3>
    21b8:	10 92 e9 06 	sts	0x06E9, r1	; 0x8006e9 <pathFollower_extStatus+0x4>
    21bc:	80 91 e1 06 	lds	r24, 0x06E1	; 0x8006e1 <path>
    21c0:	90 91 e2 06 	lds	r25, 0x06E2	; 0x8006e2 <path+0x1>
    21c4:	00 97       	sbiw	r24, 0x00	; 0
    21c6:	11 f0       	breq	.+4      	; 0x21cc <setPath+0x6a>
    21c8:	0e 94 e7 20 	call	0x41ce	; 0x41ce <free>
    21cc:	0d 2f       	mov	r16, r29
    21ce:	10 e0       	ldi	r17, 0x00	; 0
    21d0:	78 01       	movw	r14, r16
    21d2:	8f ef       	ldi	r24, 0xFF	; 255
    21d4:	e8 1a       	sub	r14, r24
    21d6:	f8 0a       	sbc	r15, r24
    21d8:	ee 0c       	add	r14, r14
    21da:	ff 1c       	adc	r15, r15
    21dc:	ee 0c       	add	r14, r14
    21de:	ff 1c       	adc	r15, r15
    21e0:	c7 01       	movw	r24, r14
    21e2:	0e 94 4f 20 	call	0x409e	; 0x409e <malloc>
    21e6:	6c 01       	movw	r12, r24
    21e8:	90 93 e2 06 	sts	0x06E2, r25	; 0x8006e2 <path+0x1>
    21ec:	80 93 e1 06 	sts	0x06E1, r24	; 0x8006e1 <path>
    21f0:	00 97       	sbiw	r24, 0x00	; 0
    21f2:	09 f4       	brne	.+2      	; 0x21f6 <setPath+0x94>
    21f4:	75 c0       	rjmp	.+234    	; 0x22e0 <__stack+0xe1>
    21f6:	a7 01       	movw	r20, r14
    21f8:	b5 01       	movw	r22, r10
    21fa:	0e 94 70 21 	call	0x42e0	; 0x42e0 <memcpy>
    21fe:	d0 93 e0 06 	sts	0x06E0, r29	; 0x8006e0 <pathLength>
    2202:	02 50       	subi	r16, 0x02	; 2
    2204:	10 4c       	sbci	r17, 0xC0	; 192
    2206:	00 0f       	add	r16, r16
    2208:	11 1f       	adc	r17, r17
    220a:	00 0f       	add	r16, r16
    220c:	11 1f       	adc	r17, r17
    220e:	e6 01       	movw	r28, r12
    2210:	c0 0f       	add	r28, r16
    2212:	d1 1f       	adc	r29, r17
    2214:	0c 81       	ldd	r16, Y+4	; 0x04
    2216:	1d 81       	ldd	r17, Y+5	; 0x05
    2218:	2e 80       	ldd	r2, Y+6	; 0x06
    221a:	3f 80       	ldd	r3, Y+7	; 0x07
    221c:	88 81       	ld	r24, Y
    221e:	99 81       	ldd	r25, Y+1	; 0x01
    2220:	b8 01       	movw	r22, r16
    2222:	68 1b       	sub	r22, r24
    2224:	79 0b       	sbc	r23, r25
    2226:	07 2e       	mov	r0, r23
    2228:	00 0c       	add	r0, r0
    222a:	88 0b       	sbc	r24, r24
    222c:	99 0b       	sbc	r25, r25
    222e:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
    2232:	2b 01       	movw	r4, r22
    2234:	3c 01       	movw	r6, r24
    2236:	8a 81       	ldd	r24, Y+2	; 0x02
    2238:	9b 81       	ldd	r25, Y+3	; 0x03
    223a:	b1 01       	movw	r22, r2
    223c:	68 1b       	sub	r22, r24
    223e:	79 0b       	sbc	r23, r25
    2240:	07 2e       	mov	r0, r23
    2242:	00 0c       	add	r0, r0
    2244:	88 0b       	sbc	r24, r24
    2246:	99 0b       	sbc	r25, r25
    2248:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
    224c:	6b 01       	movw	r12, r22
    224e:	7c 01       	movw	r14, r24
    2250:	9b 01       	movw	r18, r22
    2252:	ac 01       	movw	r20, r24
    2254:	c3 01       	movw	r24, r6
    2256:	b2 01       	movw	r22, r4
    2258:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <hypot>
    225c:	4b 01       	movw	r8, r22
    225e:	5c 01       	movw	r10, r24
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	40 e2       	ldi	r20, 0x20	; 32
    2266:	51 e4       	ldi	r21, 0x41	; 65
    2268:	60 91 2e 02 	lds	r22, 0x022E	; 0x80022e <pathFollower_lookaheadDistance>
    226c:	70 91 2f 02 	lds	r23, 0x022F	; 0x80022f <pathFollower_lookaheadDistance+0x1>
    2270:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <pathFollower_lookaheadDistance+0x2>
    2274:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <pathFollower_lookaheadDistance+0x3>
    2278:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <__mulsf3>
    227c:	a5 01       	movw	r20, r10
    227e:	94 01       	movw	r18, r8
    2280:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__divsf3>
    2284:	4b 01       	movw	r8, r22
    2286:	5c 01       	movw	r10, r24
    2288:	9b 01       	movw	r18, r22
    228a:	ac 01       	movw	r20, r24
    228c:	c3 01       	movw	r24, r6
    228e:	b2 01       	movw	r22, r4
    2290:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <__mulsf3>
    2294:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <__fixsfsi>
    2298:	60 0f       	add	r22, r16
    229a:	71 1f       	adc	r23, r17
    229c:	79 87       	std	Y+9, r23	; 0x09
    229e:	68 87       	std	Y+8, r22	; 0x08
    22a0:	a5 01       	movw	r20, r10
    22a2:	94 01       	movw	r18, r8
    22a4:	c7 01       	movw	r24, r14
    22a6:	b6 01       	movw	r22, r12
    22a8:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <__mulsf3>
    22ac:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <__fixsfsi>
    22b0:	62 0d       	add	r22, r2
    22b2:	73 1d       	adc	r23, r3
    22b4:	7b 87       	std	Y+11, r23	; 0x0b
    22b6:	6a 87       	std	Y+10, r22	; 0x0a
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	df 91       	pop	r29
    22bc:	cf 91       	pop	r28
    22be:	1f 91       	pop	r17
    22c0:	0f 91       	pop	r16
    22c2:	ff 90       	pop	r15
    22c4:	ef 90       	pop	r14
    22c6:	df 90       	pop	r13
    22c8:	cf 90       	pop	r12
    22ca:	bf 90       	pop	r11
    22cc:	af 90       	pop	r10
    22ce:	9f 90       	pop	r9
    22d0:	8f 90       	pop	r8
    22d2:	7f 90       	pop	r7
    22d4:	6f 90       	pop	r6
    22d6:	5f 90       	pop	r5
    22d8:	4f 90       	pop	r4
    22da:	3f 90       	pop	r3
    22dc:	2f 90       	pop	r2
    22de:	08 95       	ret
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	eb cf       	rjmp	.-42     	; 0x22ba <__stack+0xbb>

000022e4 <commPathFollower>:
    22e4:	cf 93       	push	r28
    22e6:	df 93       	push	r29
    22e8:	ec 01       	movw	r28, r24
    22ea:	88 81       	ld	r24, Y
    22ec:	88 23       	and	r24, r24
    22ee:	a1 f0       	breq	.+40     	; 0x2318 <commPathFollower+0x34>
    22f0:	81 30       	cpi	r24, 0x01	; 1
    22f2:	09 f4       	brne	.+2      	; 0x22f6 <commPathFollower+0x12>
    22f4:	62 c0       	rjmp	.+196    	; 0x23ba <commPathFollower+0xd6>
    22f6:	82 30       	cpi	r24, 0x02	; 2
    22f8:	09 f4       	brne	.+2      	; 0x22fc <commPathFollower+0x18>
    22fa:	52 c0       	rjmp	.+164    	; 0x23a0 <commPathFollower+0xbc>
    22fc:	83 30       	cpi	r24, 0x03	; 3
    22fe:	09 f4       	brne	.+2      	; 0x2302 <commPathFollower+0x1e>
    2300:	71 c0       	rjmp	.+226    	; 0x23e4 <commPathFollower+0x100>
    2302:	e0 91 e3 06 	lds	r30, 0x06E3	; 0x8006e3 <pathFollower_callback>
    2306:	f0 91 e4 06 	lds	r31, 0x06E4	; 0x8006e4 <pathFollower_callback+0x1>
    230a:	30 97       	sbiw	r30, 0x00	; 0
    230c:	e9 f0       	breq	.+58     	; 0x2348 <commPathFollower+0x64>
    230e:	69 81       	ldd	r22, Y+1	; 0x01
    2310:	88 81       	ld	r24, Y
    2312:	df 91       	pop	r29
    2314:	cf 91       	pop	r28
    2316:	09 94       	ijmp
    2318:	be 01       	movw	r22, r28
    231a:	6e 5f       	subi	r22, 0xFE	; 254
    231c:	7f 4f       	sbci	r23, 0xFF	; 255
    231e:	89 81       	ldd	r24, Y+1	; 0x01
    2320:	0e 94 b1 10 	call	0x2162	; 0x2162 <setPath>
    2324:	81 11       	cpse	r24, r1
    2326:	13 c0       	rjmp	.+38     	; 0x234e <commPathFollower+0x6a>
    2328:	82 e3       	ldi	r24, 0x32	; 50
    232a:	92 e0       	ldi	r25, 0x02	; 2
    232c:	9f 93       	push	r25
    232e:	8f 93       	push	r24
    2330:	1f 92       	push	r1
    2332:	0e 94 3f 10 	call	0x207e	; 0x207e <communication_log_P>
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	e0 91 e3 06 	lds	r30, 0x06E3	; 0x8006e3 <pathFollower_callback>
    2340:	f0 91 e4 06 	lds	r31, 0x06E4	; 0x8006e4 <pathFollower_callback+0x1>
    2344:	30 97       	sbiw	r30, 0x00	; 0
    2346:	19 f7       	brne	.-58     	; 0x230e <commPathFollower+0x2a>
    2348:	df 91       	pop	r29
    234a:	cf 91       	pop	r28
    234c:	08 95       	ret
    234e:	e0 91 e1 06 	lds	r30, 0x06E1	; 0x8006e1 <path>
    2352:	f0 91 e2 06 	lds	r31, 0x06E2	; 0x8006e2 <path+0x1>
    2356:	87 81       	ldd	r24, Z+7	; 0x07
    2358:	8f 93       	push	r24
    235a:	86 81       	ldd	r24, Z+6	; 0x06
    235c:	8f 93       	push	r24
    235e:	85 81       	ldd	r24, Z+5	; 0x05
    2360:	8f 93       	push	r24
    2362:	84 81       	ldd	r24, Z+4	; 0x04
    2364:	8f 93       	push	r24
    2366:	83 81       	ldd	r24, Z+3	; 0x03
    2368:	8f 93       	push	r24
    236a:	82 81       	ldd	r24, Z+2	; 0x02
    236c:	8f 93       	push	r24
    236e:	81 81       	ldd	r24, Z+1	; 0x01
    2370:	8f 93       	push	r24
    2372:	80 81       	ld	r24, Z
    2374:	8f 93       	push	r24
    2376:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <pathLength>
    237a:	1f 92       	push	r1
    237c:	8f 93       	push	r24
    237e:	87 e0       	ldi	r24, 0x07	; 7
    2380:	92 e0       	ldi	r25, 0x02	; 2
    2382:	9f 93       	push	r25
    2384:	8f 93       	push	r24
    2386:	82 e0       	ldi	r24, 0x02	; 2
    2388:	8f 93       	push	r24
    238a:	0e 94 3f 10 	call	0x207e	; 0x207e <communication_log_P>
    238e:	8d b7       	in	r24, 0x3d	; 61
    2390:	9e b7       	in	r25, 0x3e	; 62
    2392:	0d 96       	adiw	r24, 0x0d	; 13
    2394:	0f b6       	in	r0, 0x3f	; 63
    2396:	f8 94       	cli
    2398:	9e bf       	out	0x3e, r25	; 62
    239a:	0f be       	out	0x3f, r0	; 63
    239c:	8d bf       	out	0x3d, r24	; 61
    239e:	b1 cf       	rjmp	.-158    	; 0x2302 <commPathFollower+0x1e>
    23a0:	10 92 ea 06 	sts	0x06EA, r1	; 0x8006ea <pathFollower_status>
    23a4:	24 ed       	ldi	r18, 0xD4	; 212
    23a6:	31 e0       	ldi	r19, 0x01	; 1
    23a8:	3f 93       	push	r19
    23aa:	2f 93       	push	r18
    23ac:	8f 93       	push	r24
    23ae:	0e 94 3f 10 	call	0x207e	; 0x207e <communication_log_P>
    23b2:	0f 90       	pop	r0
    23b4:	0f 90       	pop	r0
    23b6:	0f 90       	pop	r0
    23b8:	a4 cf       	rjmp	.-184    	; 0x2302 <commPathFollower+0x1e>
    23ba:	90 91 e0 06 	lds	r25, 0x06E0	; 0x8006e0 <pathLength>
    23be:	91 11       	cpse	r25, r1
    23c0:	03 c0       	rjmp	.+6      	; 0x23c8 <commPathFollower+0xe4>
    23c2:	85 ef       	ldi	r24, 0xF5	; 245
    23c4:	91 e0       	ldi	r25, 0x01	; 1
    23c6:	b2 cf       	rjmp	.-156    	; 0x232c <commPathFollower+0x48>
    23c8:	80 93 ea 06 	sts	0x06EA, r24	; 0x8006ea <pathFollower_status>
    23cc:	84 ee       	ldi	r24, 0xE4	; 228
    23ce:	91 e0       	ldi	r25, 0x01	; 1
    23d0:	9f 93       	push	r25
    23d2:	8f 93       	push	r24
    23d4:	82 e0       	ldi	r24, 0x02	; 2
    23d6:	8f 93       	push	r24
    23d8:	0e 94 3f 10 	call	0x207e	; 0x207e <communication_log_P>
    23dc:	0f 90       	pop	r0
    23de:	0f 90       	pop	r0
    23e0:	0f 90       	pop	r0
    23e2:	8f cf       	rjmp	.-226    	; 0x2302 <commPathFollower+0x1e>
    23e4:	8f ef       	ldi	r24, 0xFF	; 255
    23e6:	9f ef       	ldi	r25, 0xFF	; 255
    23e8:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <curSeg+0x1>
    23ec:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <curSeg>
    23f0:	10 92 df 06 	sts	0x06DF, r1	; 0x8006df <initialized>
    23f4:	10 92 ea 06 	sts	0x06EA, r1	; 0x8006ea <pathFollower_status>
    23f8:	10 92 e5 06 	sts	0x06E5, r1	; 0x8006e5 <pathFollower_extStatus>
    23fc:	10 92 e6 06 	sts	0x06E6, r1	; 0x8006e6 <pathFollower_extStatus+0x1>
    2400:	10 92 e7 06 	sts	0x06E7, r1	; 0x8006e7 <pathFollower_extStatus+0x2>
    2404:	10 92 e8 06 	sts	0x06E8, r1	; 0x8006e8 <pathFollower_extStatus+0x3>
    2408:	10 92 e9 06 	sts	0x06E9, r1	; 0x8006e9 <pathFollower_extStatus+0x4>
    240c:	85 ec       	ldi	r24, 0xC5	; 197
    240e:	91 e0       	ldi	r25, 0x01	; 1
    2410:	df cf       	rjmp	.-66     	; 0x23d0 <commPathFollower+0xec>

00002412 <pathFollower_init>:
    2412:	62 e7       	ldi	r22, 0x72	; 114
    2414:	71 e1       	ldi	r23, 0x11	; 17
    2416:	83 e0       	ldi	r24, 0x03	; 3
    2418:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <communication_setCallback>
    241c:	60 e8       	ldi	r22, 0x80	; 128
    241e:	70 e1       	ldi	r23, 0x10	; 16
    2420:	84 e0       	ldi	r24, 0x04	; 4
    2422:	0c 94 8a 0f 	jmp	0x1f14	; 0x1f14 <communication_setCallback>

00002426 <pathFollower_setNewPath>:
    2426:	fc 01       	movw	r30, r24
    2428:	61 81       	ldd	r22, Z+1	; 0x01
    242a:	72 81       	ldd	r23, Z+2	; 0x02
    242c:	80 81       	ld	r24, Z
    242e:	0c 94 b1 10 	jmp	0x2162	; 0x2162 <setPath>

00002432 <pathFollower_command>:
}


// manually start, pause or reset the path follower
void pathFollower_command(const PathFollowerCommand_t cmd) {
    switch (cmd) {
    2432:	82 30       	cpi	r24, 0x02	; 2
    2434:	09 f1       	breq	.+66     	; 0x2478 <pathFollower_command+0x46>
    2436:	83 30       	cpi	r24, 0x03	; 3
    2438:	51 f0       	breq	.+20     	; 0x244e <pathFollower_command+0x1c>
    243a:	81 30       	cpi	r24, 0x01	; 1
    243c:	09 f0       	breq	.+2      	; 0x2440 <pathFollower_command+0xe>
    243e:	08 95       	ret
    case FOLLOWER_CMD_START:  // start command
        if (pathLength > 0)
    2440:	90 91 e0 06 	lds	r25, 0x06E0	; 0x8006e0 <pathLength>
    2444:	99 23       	and	r25, r25
    2446:	d9 f3       	breq	.-10     	; 0x243e <pathFollower_command+0xc>
            pathFollower_status.enabled = true;
    2448:	80 93 ea 06 	sts	0x06EA, r24	; 0x8006ea <pathFollower_status>
    244c:	08 95       	ret
}


// reset state of path follower
static void resetState(void) {
    curSeg = -1;
    244e:	8f ef       	ldi	r24, 0xFF	; 255
    2450:	9f ef       	ldi	r25, 0xFF	; 255
    2452:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <curSeg+0x1>
    2456:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <curSeg>
    initialized = false;
    245a:	10 92 df 06 	sts	0x06DF, r1	; 0x8006df <initialized>
    pathFollower_status.enabled = false;
    245e:	10 92 ea 06 	sts	0x06EA, r1	; 0x8006ea <pathFollower_status>
    pathFollower_extStatus.onLastSegment = false;
    2462:	10 92 e5 06 	sts	0x06E5, r1	; 0x8006e5 <pathFollower_extStatus>
    pathFollower_extStatus.distanceOPToEnd = 0.0f;
    2466:	10 92 e6 06 	sts	0x06E6, r1	; 0x8006e6 <pathFollower_extStatus+0x1>
    246a:	10 92 e7 06 	sts	0x06E7, r1	; 0x8006e7 <pathFollower_extStatus+0x2>
    246e:	10 92 e8 06 	sts	0x06E8, r1	; 0x8006e8 <pathFollower_extStatus+0x3>
    2472:	10 92 e9 06 	sts	0x06E9, r1	; 0x8006e9 <pathFollower_extStatus+0x4>
    2476:	08 95       	ret
    case FOLLOWER_CMD_START:  // start command
        if (pathLength > 0)
            pathFollower_status.enabled = true;
        break;
    case FOLLOWER_CMD_PAUSE:  // pause command
        pathFollower_status.enabled = false;
    2478:	10 92 ea 06 	sts	0x06EA, r1	; 0x8006ea <pathFollower_status>
        break;
    247c:	08 95       	ret

0000247e <pathFollower_update>:
    }
}


// compute a new lookahead point, call this function periodically from main loop
bool pathFollower_update(const Pose_t* currentPose) {
    247e:	2f 92       	push	r2
    2480:	3f 92       	push	r3
    2482:	4f 92       	push	r4
    2484:	5f 92       	push	r5
    2486:	6f 92       	push	r6
    2488:	7f 92       	push	r7
    248a:	8f 92       	push	r8
    248c:	9f 92       	push	r9
    248e:	af 92       	push	r10
    2490:	bf 92       	push	r11
    2492:	cf 92       	push	r12
    2494:	df 92       	push	r13
    2496:	ef 92       	push	r14
    2498:	ff 92       	push	r15
    249a:	0f 93       	push	r16
    249c:	1f 93       	push	r17
    249e:	cf 93       	push	r28
    24a0:	df 93       	push	r29
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
    24a6:	ed 97       	sbiw	r28, 0x3d	; 61
    24a8:	0f b6       	in	r0, 0x3f	; 63
    24aa:	f8 94       	cli
    24ac:	de bf       	out	0x3e, r29	; 62
    24ae:	0f be       	out	0x3f, r0	; 63
    24b0:	cd bf       	out	0x3d, r28	; 61
    // exit if following is disabled
    if (! pathFollower_status.enabled)
    24b2:	20 91 ea 06 	lds	r18, 0x06EA	; 0x8006ea <pathFollower_status>
    24b6:	29 ab       	std	Y+49, r18	; 0x31
    24b8:	22 23       	and	r18, r18
    24ba:	09 f4       	brne	.+2      	; 0x24be <pathFollower_update+0x40>
    24bc:	39 c2       	rjmp	.+1138   	; 0x2930 <pathFollower_update+0x4b2>
    24be:	fc 01       	movw	r30, r24
        return false;

    // copy current position into local variable, allows for large code optimization
    FPoint_t currentPos = { currentPose->x, currentPose->y };
    24c0:	80 81       	ld	r24, Z
    24c2:	91 81       	ldd	r25, Z+1	; 0x01
    24c4:	a2 81       	ldd	r26, Z+2	; 0x02
    24c6:	b3 81       	ldd	r27, Z+3	; 0x03
    24c8:	8f 8f       	std	Y+31, r24	; 0x1f
    24ca:	98 a3       	std	Y+32, r25	; 0x20
    24cc:	a9 a3       	std	Y+33, r26	; 0x21
    24ce:	ba a3       	std	Y+34, r27	; 0x22
    24d0:	24 81       	ldd	r18, Z+4	; 0x04
    24d2:	35 81       	ldd	r19, Z+5	; 0x05
    24d4:	46 81       	ldd	r20, Z+6	; 0x06
    24d6:	57 81       	ldd	r21, Z+7	; 0x07
    24d8:	2b a3       	std	Y+35, r18	; 0x23
    24da:	3c a3       	std	Y+36, r19	; 0x24
    24dc:	4d a3       	std	Y+37, r20	; 0x25
    24de:	5e a3       	std	Y+38, r21	; 0x26

    // Step 0: Initialization

    // if this is the first time, pathFollower_update() was called after either
    // reset or a path has been set
    if (! initialized) {
    24e0:	80 91 df 06 	lds	r24, 0x06DF	; 0x8006df <initialized>
    24e4:	88 23       	and	r24, r24
    24e6:	09 f4       	brne	.+2      	; 0x24ea <pathFollower_update+0x6c>
    24e8:	3d c2       	rjmp	.+1146   	; 0x2964 <pathFollower_update+0x4e6>
    24ea:	40 90 d3 06 	lds	r4, 0x06D3	; 0x8006d3 <curSegLenSq>
    24ee:	50 90 d4 06 	lds	r5, 0x06D4	; 0x8006d4 <curSegLenSq+0x1>
    24f2:	60 90 d5 06 	lds	r6, 0x06D5	; 0x8006d5 <curSegLenSq+0x2>
    24f6:	70 90 d6 06 	lds	r7, 0x06D6	; 0x8006d6 <curSegLenSq+0x3>
    24fa:	80 91 c7 06 	lds	r24, 0x06C7	; 0x8006c7 <nextSegVec+0x4>
    24fe:	90 91 c8 06 	lds	r25, 0x06C8	; 0x8006c8 <nextSegVec+0x5>
    2502:	a0 91 c9 06 	lds	r26, 0x06C9	; 0x8006c9 <nextSegVec+0x6>
    2506:	b0 91 ca 06 	lds	r27, 0x06CA	; 0x8006ca <nextSegVec+0x7>
    250a:	8b 8b       	std	Y+19, r24	; 0x13
    250c:	9c 8b       	std	Y+20, r25	; 0x14
    250e:	ad 8b       	std	Y+21, r26	; 0x15
    2510:	be 8b       	std	Y+22, r27	; 0x16
    2512:	20 91 c3 06 	lds	r18, 0x06C3	; 0x8006c3 <nextSegVec>
    2516:	30 91 c4 06 	lds	r19, 0x06C4	; 0x8006c4 <nextSegVec+0x1>
    251a:	40 91 c5 06 	lds	r20, 0x06C5	; 0x8006c5 <nextSegVec+0x2>
    251e:	50 91 c6 06 	lds	r21, 0x06C6	; 0x8006c6 <nextSegVec+0x3>
    2522:	2f 87       	std	Y+15, r18	; 0x0f
    2524:	38 8b       	std	Y+16, r19	; 0x10
    2526:	49 8b       	std	Y+17, r20	; 0x11
    2528:	5a 8b       	std	Y+18, r21	; 0x12
    252a:	80 91 bf 06 	lds	r24, 0x06BF	; 0x8006bf <nextSegLenSq>
    252e:	90 91 c0 06 	lds	r25, 0x06C0	; 0x8006c0 <nextSegLenSq+0x1>
    2532:	a0 91 c1 06 	lds	r26, 0x06C1	; 0x8006c1 <nextSegLenSq+0x2>
    2536:	b0 91 c2 06 	lds	r27, 0x06C2	; 0x8006c2 <nextSegLenSq+0x3>
    253a:	8f 8b       	std	Y+23, r24	; 0x17
    253c:	98 8f       	std	Y+24, r25	; 0x18
    253e:	a9 8f       	std	Y+25, r26	; 0x19
    2540:	ba 8f       	std	Y+26, r27	; 0x1a
    2542:	00 91 eb 06 	lds	r16, 0x06EB	; 0x8006eb <pathFollower_status+0x1>
    2546:	10 91 ec 06 	lds	r17, 0x06EC	; 0x8006ec <pathFollower_status+0x2>
    254a:	a0 90 ed 06 	lds	r10, 0x06ED	; 0x8006ed <pathFollower_status+0x3>
    254e:	b0 90 ee 06 	lds	r11, 0x06EE	; 0x8006ee <pathFollower_status+0x4>
    2552:	20 91 db 06 	lds	r18, 0x06DB	; 0x8006db <curSegVec+0x4>
    2556:	30 91 dc 06 	lds	r19, 0x06DC	; 0x8006dc <curSegVec+0x5>
    255a:	40 91 dd 06 	lds	r20, 0x06DD	; 0x8006dd <curSegVec+0x6>
    255e:	50 91 de 06 	lds	r21, 0x06DE	; 0x8006de <curSegVec+0x7>
    2562:	29 83       	std	Y+1, r18	; 0x01
    2564:	3a 83       	std	Y+2, r19	; 0x02
    2566:	4b 83       	std	Y+3, r20	; 0x03
    2568:	5c 83       	std	Y+4, r21	; 0x04
    256a:	80 91 d7 06 	lds	r24, 0x06D7	; 0x8006d7 <curSegVec>
    256e:	90 91 d8 06 	lds	r25, 0x06D8	; 0x8006d8 <curSegVec+0x1>
    2572:	a0 91 d9 06 	lds	r26, 0x06D9	; 0x8006d9 <curSegVec+0x2>
    2576:	b0 91 da 06 	lds	r27, 0x06DA	; 0x8006da <curSegVec+0x3>
    257a:	8d 83       	std	Y+5, r24	; 0x05
    257c:	9e 83       	std	Y+6, r25	; 0x06
    257e:	af 83       	std	Y+7, r26	; 0x07
    2580:	b8 87       	std	Y+8, r27	; 0x08
    2582:	a0 91 2b 02 	lds	r26, 0x022B	; 0x80022b <curSeg>
    2586:	b0 91 2c 02 	lds	r27, 0x022C	; 0x80022c <curSeg+0x1>
    258a:	b8 ab       	std	Y+48, r27	; 0x30
    258c:	af a7       	std	Y+47, r26	; 0x2f
    258e:	9d 01       	movw	r18, r26
    2590:	2f 5f       	subi	r18, 0xFF	; 255
    2592:	3f 4f       	sbci	r19, 0xFF	; 255
    2594:	e0 91 e1 06 	lds	r30, 0x06E1	; 0x8006e1 <path>
    2598:	f0 91 e2 06 	lds	r31, 0x06E2	; 0x8006e2 <path+0x1>
    259c:	fe 87       	std	Y+14, r31	; 0x0e
    259e:	ed 87       	std	Y+13, r30	; 0x0d
    25a0:	c9 01       	movw	r24, r18
    25a2:	01 96       	adiw	r24, 0x01	; 1
    25a4:	ac 01       	movw	r20, r24
    25a6:	44 0f       	add	r20, r20
    25a8:	55 1f       	adc	r21, r21
    25aa:	44 0f       	add	r20, r20
    25ac:	55 1f       	adc	r21, r21
    25ae:	58 a7       	std	Y+40, r21	; 0x28
    25b0:	4f a3       	std	Y+39, r20	; 0x27
    25b2:	19 01       	movw	r2, r18
    25b4:	c0 90 cb 06 	lds	r12, 0x06CB	; 0x8006cb <nextSegEnd>
    25b8:	d0 90 cc 06 	lds	r13, 0x06CC	; 0x8006cc <nextSegEnd+0x1>
    25bc:	80 91 cd 06 	lds	r24, 0x06CD	; 0x8006cd <nextSegEnd+0x2>
    25c0:	90 91 ce 06 	lds	r25, 0x06CE	; 0x8006ce <nextSegEnd+0x3>
    25c4:	9b af       	std	Y+59, r25	; 0x3b
    25c6:	8a af       	std	Y+58, r24	; 0x3a

    // Step 1: Find the segment with smallest (squared) distance between current
    //         position and orthogonal projection

    // compute vector ECur from start of current segment to current position
    FPoint_t ECur = { currentPos.x - pathFollower_status.segStart.x, currentPos.y - pathFollower_status.segStart.y };
    25c8:	b8 01       	movw	r22, r16
    25ca:	11 0f       	add	r17, r17
    25cc:	88 0b       	sbc	r24, r24
    25ce:	99 0b       	sbc	r25, r25
    25d0:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
    25d4:	9b 01       	movw	r18, r22
    25d6:	ac 01       	movw	r20, r24
    25d8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    25da:	78 a1       	ldd	r23, Y+32	; 0x20
    25dc:	89 a1       	ldd	r24, Y+33	; 0x21
    25de:	9a a1       	ldd	r25, Y+34	; 0x22
    25e0:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
    25e4:	69 87       	std	Y+9, r22	; 0x09
    25e6:	7a 87       	std	Y+10, r23	; 0x0a
    25e8:	8b 87       	std	Y+11, r24	; 0x0b
    25ea:	9c 87       	std	Y+12, r25	; 0x0c
    25ec:	b5 01       	movw	r22, r10
    25ee:	bb 0c       	add	r11, r11
    25f0:	88 0b       	sbc	r24, r24
    25f2:	99 0b       	sbc	r25, r25
    25f4:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
    25f8:	9b 01       	movw	r18, r22
    25fa:	ac 01       	movw	r20, r24
    25fc:	6b a1       	ldd	r22, Y+35	; 0x23
    25fe:	7c a1       	ldd	r23, Y+36	; 0x24
    2600:	8d a1       	ldd	r24, Y+37	; 0x25
    2602:	9e a1       	ldd	r25, Y+38	; 0x26
    2604:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
    2608:	4b 01       	movw	r8, r22
    260a:	5c 01       	movw	r10, r24

    float
        // compute dot product between vector ECur and vector P of current segment
        // equivalent to P_dot_ECur = curSegVec.x * ECur.x + curSegVec.y * ECur.y, but more accurate
        P_dot_ECur = fmaf(curSegVec.x, ECur.x, curSegVec.y * ECur.y),
    260c:	29 81       	ldd	r18, Y+1	; 0x01
    260e:	3a 81       	ldd	r19, Y+2	; 0x02
    2610:	4b 81       	ldd	r20, Y+3	; 0x03
    2612:	5c 81       	ldd	r21, Y+4	; 0x04
    2614:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <__mulsf3>
    2618:	7b 01       	movw	r14, r22
    261a:	8c 01       	movw	r16, r24
    261c:	29 85       	ldd	r18, Y+9	; 0x09
    261e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2620:	4b 85       	ldd	r20, Y+11	; 0x0b
    2622:	5c 85       	ldd	r21, Y+12	; 0x0c
    2624:	6d 81       	ldd	r22, Y+5	; 0x05
    2626:	7e 81       	ldd	r23, Y+6	; 0x06
    2628:	8f 81       	ldd	r24, Y+7	; 0x07
    262a:	98 85       	ldd	r25, Y+8	; 0x08
    262c:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <fma>

        // compute relative distance lCur (w.r.t. to current segment length) of
        // the orthogonal projection of the current position onto the current segment
        lCur = P_dot_ECur / curSegLenSq,
    2630:	a3 01       	movw	r20, r6
    2632:	92 01       	movw	r18, r4
    2634:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__divsf3>
    2638:	6b a7       	std	Y+43, r22	; 0x2b
    263a:	7c a7       	std	Y+44, r23	; 0x2c
    263c:	8d a7       	std	Y+45, r24	; 0x2d
    263e:	9e a7       	std	Y+46, r25	; 0x2e
        //   1. compute point OP of orthogonal projection: OP = pointVec(curSegVec, lCur, pathFollower_status.segStart)
        //   2. compute vector between OP and current position: vecOP_CP = OP - currentPos
        //   3. compute squared distance between OP and current position: sqLen(vecOP_CP)
        // and initialize minDist, holding the minimum squared distance between an
        // orthogonal projection onto a path segment
        minDist = sqLenPointVecF(curSegVec, -lCur, ECur);
    2640:	2b 01       	movw	r4, r22
    2642:	3c 01       	movw	r6, r24
    2644:	77 fa       	bst	r7, 7
    2646:	70 94       	com	r7
    2648:	77 f8       	bld	r7, 7
    264a:	70 94       	com	r7
}


// similar to sqLen(pointVec(vec, l, start))
static inline float sqLenPointVecF(FPoint_t vec, float l, FPoint_t start) {
    return square(fmaf(vec.x, l, start.x)) + square(fmaf(vec.y, l, start.y));
    264c:	e9 84       	ldd	r14, Y+9	; 0x09
    264e:	fa 84       	ldd	r15, Y+10	; 0x0a
    2650:	0b 85       	ldd	r16, Y+11	; 0x0b
    2652:	1c 85       	ldd	r17, Y+12	; 0x0c
    2654:	a3 01       	movw	r20, r6
    2656:	92 01       	movw	r18, r4
    2658:	6d 81       	ldd	r22, Y+5	; 0x05
    265a:	7e 81       	ldd	r23, Y+6	; 0x06
    265c:	8f 81       	ldd	r24, Y+7	; 0x07
    265e:	98 85       	ldd	r25, Y+8	; 0x08
    2660:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <fma>
    2664:	0e 94 21 20 	call	0x4042	; 0x4042 <square>
    2668:	6b 8f       	std	Y+27, r22	; 0x1b
    266a:	7c 8f       	std	Y+28, r23	; 0x1c
    266c:	8d 8f       	std	Y+29, r24	; 0x1d
    266e:	9e 8f       	std	Y+30, r25	; 0x1e
    2670:	85 01       	movw	r16, r10
    2672:	74 01       	movw	r14, r8
    2674:	a3 01       	movw	r20, r6
    2676:	92 01       	movw	r18, r4
    2678:	69 81       	ldd	r22, Y+1	; 0x01
    267a:	7a 81       	ldd	r23, Y+2	; 0x02
    267c:	8b 81       	ldd	r24, Y+3	; 0x03
    267e:	9c 81       	ldd	r25, Y+4	; 0x04
    2680:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <fma>
    2684:	0e 94 21 20 	call	0x4042	; 0x4042 <square>
    2688:	9b 01       	movw	r18, r22
    268a:	ac 01       	movw	r20, r24
    268c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    268e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2690:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2692:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2694:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__addsf3>
    2698:	6a ab       	std	Y+50, r22	; 0x32
    269a:	7b ab       	std	Y+51, r23	; 0x33
    269c:	8c ab       	std	Y+52, r24	; 0x34
    269e:	9d ab       	std	Y+53, r25	; 0x35

    // compute vector ENext from start of next segment to current position
    // Note that the following is equal to:
    //   FPoint_t ENext = { currentPos.x - pathFollower_status.segEnd.x, currentPos.y - pathFollower_status.segEnd.y };
    // but produces smaller code
    FPoint_t ENext = { ECur.x - curSegVec.x, ECur.y - curSegVec.y };
    26a0:	2d 81       	ldd	r18, Y+5	; 0x05
    26a2:	3e 81       	ldd	r19, Y+6	; 0x06
    26a4:	4f 81       	ldd	r20, Y+7	; 0x07
    26a6:	58 85       	ldd	r21, Y+8	; 0x08
    26a8:	69 85       	ldd	r22, Y+9	; 0x09
    26aa:	7a 85       	ldd	r23, Y+10	; 0x0a
    26ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    26ae:	9c 85       	ldd	r25, Y+12	; 0x0c
    26b0:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
    26b4:	2b 01       	movw	r4, r22
    26b6:	3c 01       	movw	r6, r24
    26b8:	29 81       	ldd	r18, Y+1	; 0x01
    26ba:	3a 81       	ldd	r19, Y+2	; 0x02
    26bc:	4b 81       	ldd	r20, Y+3	; 0x03
    26be:	5c 81       	ldd	r21, Y+4	; 0x04
    26c0:	c5 01       	movw	r24, r10
    26c2:	b4 01       	movw	r22, r8
    26c4:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
    26c8:	4b 01       	movw	r8, r22
    26ca:	5c 01       	movw	r10, r24

    float
        // compute dot product between vector ENext and vector P of next segment
        // equivalent to P_dot_ENext = nextSegVec.x * ENext.x + nextSegVec.y * ENext.y, but more accurate
        P_dot_ENext = fmaf(nextSegVec.x, ENext.x, nextSegVec.y * ENext.y),
    26cc:	2b 89       	ldd	r18, Y+19	; 0x13
    26ce:	3c 89       	ldd	r19, Y+20	; 0x14
    26d0:	4d 89       	ldd	r20, Y+21	; 0x15
    26d2:	5e 89       	ldd	r21, Y+22	; 0x16
    26d4:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <__mulsf3>
    26d8:	7b 01       	movw	r14, r22
    26da:	8c 01       	movw	r16, r24
    26dc:	a3 01       	movw	r20, r6
    26de:	92 01       	movw	r18, r4
    26e0:	6f 85       	ldd	r22, Y+15	; 0x0f
    26e2:	78 89       	ldd	r23, Y+16	; 0x10
    26e4:	89 89       	ldd	r24, Y+17	; 0x11
    26e6:	9a 89       	ldd	r25, Y+18	; 0x12
    26e8:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <fma>

        // compute relative distance lNext (w.r.t. to next segment length) of
        // the orthogonal projection of the current position onto the next segment
        lNext = P_dot_ENext / nextSegLenSq;
    26ec:	2f 89       	ldd	r18, Y+23	; 0x17
    26ee:	38 8d       	ldd	r19, Y+24	; 0x18
    26f0:	49 8d       	ldd	r20, Y+25	; 0x19
    26f2:	5a 8d       	ldd	r21, Y+26	; 0x1a
    26f4:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__divsf3>
    26f8:	6e ab       	std	Y+54, r22	; 0x36
    26fa:	7f ab       	std	Y+55, r23	; 0x37
    26fc:	88 af       	std	Y+56, r24	; 0x38
    26fe:	99 af       	std	Y+57, r25	; 0x39
    int16_t minSeg = curSeg;


    // if the orthogonal projection of the current position onto the next segment
    // is located on that segment
    if ((lNext >= 0.0f) && (lNext <= 1.0f)) {
    2700:	20 e0       	ldi	r18, 0x00	; 0
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	a9 01       	movw	r20, r18
    2706:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <__gesf2>
    270a:	87 fd       	sbrc	r24, 7
    270c:	fe c5       	rjmp	.+3068   	; 0x330a <pathFollower_update+0xe8c>
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	40 e8       	ldi	r20, 0x80	; 128
    2714:	5f e3       	ldi	r21, 0x3F	; 63
    2716:	6e a9       	ldd	r22, Y+54	; 0x36
    2718:	7f a9       	ldd	r23, Y+55	; 0x37
    271a:	88 ad       	ldd	r24, Y+56	; 0x38
    271c:	99 ad       	ldd	r25, Y+57	; 0x39
    271e:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <__cmpsf2>
    2722:	18 16       	cp	r1, r24
    2724:	0c f0       	brlt	.+2      	; 0x2728 <pathFollower_update+0x2aa>
    2726:	f6 c5       	rjmp	.+3052   	; 0x3314 <pathFollower_update+0xe96>
    2728:	ef a5       	ldd	r30, Y+47	; 0x2f
    272a:	f8 a9       	ldd	r31, Y+48	; 0x30
    272c:	fa a7       	std	Y+42, r31	; 0x2a
    272e:	e9 a7       	std	Y+41, r30	; 0x29
    // segStart holds the start of the segment considered
    Point_t segStart = nextSegEnd;
    // seg is the segment index (start point of segment path[seg])
    int16_t seg = curSeg + 1;
    // pointer in array path for reading out the segment's end point
    Point_t *pathPtr = &path[seg + 1];
    2730:	ad 85       	ldd	r26, Y+13	; 0x0d
    2732:	be 85       	ldd	r27, Y+14	; 0x0e
    2734:	ef a1       	ldd	r30, Y+39	; 0x27
    2736:	f8 a5       	ldd	r31, Y+40	; 0x28
    2738:	ae 0f       	add	r26, r30
    273a:	bf 1f       	adc	r27, r31
    273c:	f0 91 2d 02 	lds	r31, 0x022D	; 0x80022d <pathFollower_segmentLimit>
    2740:	fb 8f       	std	Y+27, r31	; 0x1b
    2742:	20 91 e0 06 	lds	r18, 0x06E0	; 0x8006e0 <pathLength>
    2746:	2f a3       	std	Y+39, r18	; 0x27
    2748:	42 2f       	mov	r20, r18
    274a:	50 e0       	ldi	r21, 0x00	; 0
    274c:	58 8f       	std	Y+24, r21	; 0x18
    274e:	4f 8b       	std	Y+23, r20	; 0x17

    // counter for comparison with pathFollower_segmentLimit
    // initialization with zero means that we covered already the check of the
    // segment defined by nextSegVec and nextSegEnd from before
    uint8_t i = 0;
    2750:	19 82       	std	Y+1, r1	; 0x01
    2752:	bd af       	std	Y+61, r27	; 0x3d
    2754:	ac af       	std	Y+60, r26	; 0x3c
    2756:	0a ad       	ldd	r16, Y+58	; 0x3a
    2758:	1b ad       	ldd	r17, Y+59	; 0x3b
    while ((++i < pathFollower_segmentLimit) && (++seg < pathLength)) {
    275a:	04 c0       	rjmp	.+8      	; 0x2764 <pathFollower_update+0x2e6>
    275c:	cd 84       	ldd	r12, Y+13	; 0x0d
    275e:	de 84       	ldd	r13, Y+14	; 0x0e
    2760:	09 85       	ldd	r16, Y+9	; 0x09
    2762:	1a 85       	ldd	r17, Y+10	; 0x0a
    2764:	f9 81       	ldd	r31, Y+1	; 0x01
    2766:	ff 5f       	subi	r31, 0xFF	; 255
    2768:	f9 83       	std	Y+1, r31	; 0x01
    276a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    276c:	f2 17       	cp	r31, r18
    276e:	08 f0       	brcs	.+2      	; 0x2772 <pathFollower_update+0x2f4>
    2770:	28 c2       	rjmp	.+1104   	; 0x2bc2 <pathFollower_update+0x744>
    2772:	3f ef       	ldi	r19, 0xFF	; 255
    2774:	23 1a       	sub	r2, r19
    2776:	33 0a       	sbc	r3, r19
    2778:	4f 89       	ldd	r20, Y+23	; 0x17
    277a:	58 8d       	ldd	r21, Y+24	; 0x18
    277c:	24 16       	cp	r2, r20
    277e:	35 06       	cpc	r3, r21
    2780:	0c f0       	brlt	.+2      	; 0x2784 <pathFollower_update+0x306>
    2782:	1f c2       	rjmp	.+1086   	; 0x2bc2 <pathFollower_update+0x744>
        // get end of segment
        Point_t segEnd = *++pathPtr;
    2784:	8c ad       	ldd	r24, Y+60	; 0x3c
    2786:	9d ad       	ldd	r25, Y+61	; 0x3d
    2788:	04 96       	adiw	r24, 0x04	; 4
    278a:	9d af       	std	Y+61, r25	; 0x3d
    278c:	8c af       	std	Y+60, r24	; 0x3c
    278e:	dc 01       	movw	r26, r24
    2790:	0d 90       	ld	r0, X+
    2792:	bc 91       	ld	r27, X
    2794:	a0 2d       	mov	r26, r0
    2796:	be 87       	std	Y+14, r27	; 0x0e
    2798:	ad 87       	std	Y+13, r26	; 0x0d
    279a:	fc 01       	movw	r30, r24
    279c:	02 80       	ldd	r0, Z+2	; 0x02
    279e:	f3 81       	ldd	r31, Z+3	; 0x03
    27a0:	e0 2d       	mov	r30, r0
    27a2:	fa 87       	std	Y+10, r31	; 0x0a
    27a4:	e9 87       	std	Y+9, r30	; 0x09

        // compute segment vector as (end point - start point)
        FPoint_t vec = { segEnd.x - segStart.x, segEnd.y - segStart.y };
    27a6:	bd 01       	movw	r22, r26
    27a8:	6c 19       	sub	r22, r12
    27aa:	7d 09       	sbc	r23, r13
    27ac:	07 2e       	mov	r0, r23
    27ae:	00 0c       	add	r0, r0
    27b0:	88 0b       	sbc	r24, r24
    27b2:	99 0b       	sbc	r25, r25
    27b4:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
    27b8:	4b 01       	movw	r8, r22
    27ba:	5c 01       	movw	r10, r24
    27bc:	69 85       	ldd	r22, Y+9	; 0x09
    27be:	7a 85       	ldd	r23, Y+10	; 0x0a
    27c0:	60 1b       	sub	r22, r16
    27c2:	71 0b       	sbc	r23, r17
    27c4:	07 2e       	mov	r0, r23
    27c6:	00 0c       	add	r0, r0
    27c8:	88 0b       	sbc	r24, r24
    27ca:	99 0b       	sbc	r25, r25
    27cc:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
    27d0:	6d 83       	std	Y+5, r22	; 0x05
    27d2:	7e 83       	std	Y+6, r23	; 0x06
    27d4:	8f 83       	std	Y+7, r24	; 0x07
    27d6:	98 87       	std	Y+8, r25	; 0x08

        // compute vector E from start of segment to current position
        FPoint_t E = { currentPos.x - segStart.x, currentPos.y - segStart.y };
    27d8:	b6 01       	movw	r22, r12
    27da:	dd 0c       	add	r13, r13
    27dc:	88 0b       	sbc	r24, r24
    27de:	99 0b       	sbc	r25, r25
    27e0:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
    27e4:	9b 01       	movw	r18, r22
    27e6:	ac 01       	movw	r20, r24
    27e8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    27ea:	78 a1       	ldd	r23, Y+32	; 0x20
    27ec:	89 a1       	ldd	r24, Y+33	; 0x21
    27ee:	9a a1       	ldd	r25, Y+34	; 0x22
    27f0:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
    27f4:	6f 87       	std	Y+15, r22	; 0x0f
    27f6:	78 8b       	std	Y+16, r23	; 0x10
    27f8:	89 8b       	std	Y+17, r24	; 0x11
    27fa:	9a 8b       	std	Y+18, r25	; 0x12
    27fc:	b8 01       	movw	r22, r16
    27fe:	11 0f       	add	r17, r17
    2800:	88 0b       	sbc	r24, r24
    2802:	99 0b       	sbc	r25, r25
    2804:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
    2808:	9b 01       	movw	r18, r22
    280a:	ac 01       	movw	r20, r24
    280c:	6b a1       	ldd	r22, Y+35	; 0x23
    280e:	7c a1       	ldd	r23, Y+36	; 0x24
    2810:	8d a1       	ldd	r24, Y+37	; 0x25
    2812:	9e a1       	ldd	r25, Y+38	; 0x26
    2814:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
    2818:	6b 8b       	std	Y+19, r22	; 0x13
    281a:	7c 8b       	std	Y+20, r23	; 0x14
    281c:	8d 8b       	std	Y+21, r24	; 0x15
    281e:	9e 8b       	std	Y+22, r25	; 0x16
        float
            // compute dot product between vector E and vector P of segment
            // equivalent to P_dot_E = vec.x * E.x + vec.y * E.y, but more accurate
            P_dot_E = fmaf(vec.x, E.x, vec.y * E.y),
    2820:	9b 01       	movw	r18, r22
    2822:	ac 01       	movw	r20, r24
    2824:	6d 81       	ldd	r22, Y+5	; 0x05
    2826:	7e 81       	ldd	r23, Y+6	; 0x06
    2828:	8f 81       	ldd	r24, Y+7	; 0x07
    282a:	98 85       	ldd	r25, Y+8	; 0x08
    282c:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <__mulsf3>
    2830:	7b 01       	movw	r14, r22
    2832:	8c 01       	movw	r16, r24
    2834:	2f 85       	ldd	r18, Y+15	; 0x0f
    2836:	38 89       	ldd	r19, Y+16	; 0x10
    2838:	49 89       	ldd	r20, Y+17	; 0x11
    283a:	5a 89       	ldd	r21, Y+18	; 0x12
    283c:	c5 01       	movw	r24, r10
    283e:	b4 01       	movw	r22, r8
    2840:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <fma>
    2844:	6b 01       	movw	r12, r22
    2846:	7c 01       	movw	r14, r24

// *************************** LOCAL FUNCTIONS *********************************

// compute squared length of a vector
static inline float sqLen(const FPoint_t vec) {
    return square(vec.x) + square(vec.y);
    2848:	c5 01       	movw	r24, r10
    284a:	b4 01       	movw	r22, r8
    284c:	0e 94 21 20 	call	0x4042	; 0x4042 <square>
    2850:	2b 01       	movw	r4, r22
    2852:	3c 01       	movw	r6, r24
    2854:	6d 81       	ldd	r22, Y+5	; 0x05
    2856:	7e 81       	ldd	r23, Y+6	; 0x06
    2858:	8f 81       	ldd	r24, Y+7	; 0x07
    285a:	98 85       	ldd	r25, Y+8	; 0x08
    285c:	0e 94 21 20 	call	0x4042	; 0x4042 <square>
    2860:	9b 01       	movw	r18, r22
    2862:	ac 01       	movw	r20, r24
            // compute dot product between vector E and vector P of segment
            // equivalent to P_dot_E = vec.x * E.x + vec.y * E.y, but more accurate
            P_dot_E = fmaf(vec.x, E.x, vec.y * E.y),
            // compute relative distance l (w.r.t. to segment length) of
            // the orthogonal projection of the current position onto the segment
            l = P_dot_E / sqLen(vec);
    2864:	c3 01       	movw	r24, r6
    2866:	b2 01       	movw	r22, r4
    2868:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__addsf3>
    286c:	9b 01       	movw	r18, r22
    286e:	ac 01       	movw	r20, r24
    2870:	c7 01       	movw	r24, r14
    2872:	b6 01       	movw	r22, r12
    2874:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__divsf3>
    2878:	2b 01       	movw	r4, r22
    287a:	3c 01       	movw	r6, r24

        // if the orthogonal projection of the current position onto the segment
        // is located on that segment
        if ((l >= 0.0f) && (l <= 1.0f)) {
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	a9 01       	movw	r20, r18
    2882:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <__gesf2>
    2886:	87 fd       	sbrc	r24, 7
    2888:	69 cf       	rjmp	.-302    	; 0x275c <pathFollower_update+0x2de>
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	40 e8       	ldi	r20, 0x80	; 128
    2890:	5f e3       	ldi	r21, 0x3F	; 63
    2892:	c3 01       	movw	r24, r6
    2894:	b2 01       	movw	r22, r4
    2896:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <__cmpsf2>
    289a:	18 16       	cp	r1, r24
    289c:	0c f4       	brge	.+2      	; 0x28a0 <pathFollower_update+0x422>
    289e:	5e cf       	rjmp	.-324    	; 0x275c <pathFollower_update+0x2de>
            // compute squared distance between current position and orthogonal projection onto segment
            float sqDistOPCP = sqLenPointVecF(vec, -l, E);
    28a0:	77 fa       	bst	r7, 7
    28a2:	70 94       	com	r7
    28a4:	77 f8       	bld	r7, 7
    28a6:	70 94       	com	r7
}


// similar to sqLen(pointVec(vec, l, start))
static inline float sqLenPointVecF(FPoint_t vec, float l, FPoint_t start) {
    return square(fmaf(vec.x, l, start.x)) + square(fmaf(vec.y, l, start.y));
    28a8:	ef 84       	ldd	r14, Y+15	; 0x0f
    28aa:	f8 88       	ldd	r15, Y+16	; 0x10
    28ac:	09 89       	ldd	r16, Y+17	; 0x11
    28ae:	1a 89       	ldd	r17, Y+18	; 0x12
    28b0:	a3 01       	movw	r20, r6
    28b2:	92 01       	movw	r18, r4
    28b4:	c5 01       	movw	r24, r10
    28b6:	b4 01       	movw	r22, r8
    28b8:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <fma>
    28bc:	0e 94 21 20 	call	0x4042	; 0x4042 <square>
    28c0:	4b 01       	movw	r8, r22
    28c2:	5c 01       	movw	r10, r24
    28c4:	eb 88       	ldd	r14, Y+19	; 0x13
    28c6:	fc 88       	ldd	r15, Y+20	; 0x14
    28c8:	0d 89       	ldd	r16, Y+21	; 0x15
    28ca:	1e 89       	ldd	r17, Y+22	; 0x16
    28cc:	a3 01       	movw	r20, r6
    28ce:	92 01       	movw	r18, r4
    28d0:	6d 81       	ldd	r22, Y+5	; 0x05
    28d2:	7e 81       	ldd	r23, Y+6	; 0x06
    28d4:	8f 81       	ldd	r24, Y+7	; 0x07
    28d6:	98 85       	ldd	r25, Y+8	; 0x08
    28d8:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <fma>
    28dc:	0e 94 21 20 	call	0x4042	; 0x4042 <square>
    28e0:	9b 01       	movw	r18, r22
    28e2:	ac 01       	movw	r20, r24
    28e4:	c5 01       	movw	r24, r10
    28e6:	b4 01       	movw	r22, r8
    28e8:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__addsf3>
    28ec:	7b 01       	movw	r14, r22
    28ee:	8c 01       	movw	r16, r24
        if ((l >= 0.0f) && (l <= 1.0f)) {
            // compute squared distance between current position and orthogonal projection onto segment
            float sqDistOPCP = sqLenPointVecF(vec, -l, E);

            // if that distance is smaller than the current minimum distance
            if (sqDistOPCP < minDist) {
    28f0:	9b 01       	movw	r18, r22
    28f2:	ac 01       	movw	r20, r24
    28f4:	6a a9       	ldd	r22, Y+50	; 0x32
    28f6:	7b a9       	ldd	r23, Y+51	; 0x33
    28f8:	8c a9       	ldd	r24, Y+52	; 0x34
    28fa:	9d a9       	ldd	r25, Y+53	; 0x35
    28fc:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <__gesf2>
    2900:	18 16       	cp	r1, r24
    2902:	0c f0       	brlt	.+2      	; 0x2906 <pathFollower_update+0x488>
    2904:	2b cf       	rjmp	.-426    	; 0x275c <pathFollower_update+0x2de>
    2906:	3a a6       	std	Y+42, r3	; 0x2a
    2908:	29 a6       	std	Y+41, r2	; 0x29
                // update minDist and minSeg
                minDist = sqDistOPCP;
    290a:	ea aa       	std	Y+50, r14	; 0x32
    290c:	fb aa       	std	Y+51, r15	; 0x33
    290e:	0c ab       	std	Y+52, r16	; 0x34
    2910:	1d ab       	std	Y+53, r17	; 0x35
    2912:	24 cf       	rjmp	.-440    	; 0x275c <pathFollower_update+0x2de>
    // if segment with smallest distance between orthogonal projection and current position
    // is after the current segment
    } else if (minSeg > curSeg) {
        // if the end of the path has been reached, deactivate follower and report success
        if (minSeg == pathLength - 1) {
            pathFollower_status.enabled = false;
    2914:	10 92 ea 06 	sts	0x06EA, r1	; 0x8006ea <pathFollower_status>
            pathFollowerInfoPNoArg("End of path reached");
    2918:	86 e6       	ldi	r24, 0x66	; 102
    291a:	91 e0       	ldi	r25, 0x01	; 1
    291c:	9f 93       	push	r25
    291e:	8f 93       	push	r24
    2920:	82 e0       	ldi	r24, 0x02	; 2
    2922:	8f 93       	push	r24
    2924:	0e 94 3f 10 	call	0x207e	; 0x207e <communication_log_P>
            return false;
    2928:	0f 90       	pop	r0
    292a:	0f 90       	pop	r0
    292c:	0f 90       	pop	r0
    292e:	19 aa       	std	Y+49, r1	; 0x31
    // report that pathFollower_status was updated with a new lookahead point
    // and possibly also new segments start and end points
    // A controller should now use the lookahead point as an intermediate goal
    // position and generate appropriate control inputs to the robot
    return true;
}
    2930:	89 a9       	ldd	r24, Y+49	; 0x31
    2932:	ed 96       	adiw	r28, 0x3d	; 61
    2934:	0f b6       	in	r0, 0x3f	; 63
    2936:	f8 94       	cli
    2938:	de bf       	out	0x3e, r29	; 62
    293a:	0f be       	out	0x3f, r0	; 63
    293c:	cd bf       	out	0x3d, r28	; 61
    293e:	df 91       	pop	r29
    2940:	cf 91       	pop	r28
    2942:	1f 91       	pop	r17
    2944:	0f 91       	pop	r16
    2946:	ff 90       	pop	r15
    2948:	ef 90       	pop	r14
    294a:	df 90       	pop	r13
    294c:	cf 90       	pop	r12
    294e:	bf 90       	pop	r11
    2950:	af 90       	pop	r10
    2952:	9f 90       	pop	r9
    2954:	8f 90       	pop	r8
    2956:	7f 90       	pop	r7
    2958:	6f 90       	pop	r6
    295a:	5f 90       	pop	r5
    295c:	4f 90       	pop	r4
    295e:	3f 90       	pop	r3
    2960:	2f 90       	pop	r2
    2962:	08 95       	ret
    // Step 0: Initialization

    // if this is the first time, pathFollower_update() was called after either
    // reset or a path has been set
    if (! initialized) {
        initialized = true;
    2964:	81 e0       	ldi	r24, 0x01	; 1
    2966:	80 93 df 06 	sts	0x06DF, r24	; 0x8006df <initialized>
        // initialize all local and global variables used by the path follower:
        // In most of the cases (when the distance between the current position and the first
        // path point path[0] is sufficiently large), the first (current) segment is defined
        // to go from the current position of the robot to the first path point.
        // The next segment connects point path[0] to point path[1].
        pathFollower_status.segEnd = path[0];
    296a:	a0 91 e1 06 	lds	r26, 0x06E1	; 0x8006e1 <path>
    296e:	b0 91 e2 06 	lds	r27, 0x06E2	; 0x8006e2 <path+0x1>
    2972:	be 87       	std	Y+14, r27	; 0x0e
    2974:	ad 87       	std	Y+13, r26	; 0x0d
    2976:	8d 91       	ld	r24, X+
    2978:	9d 91       	ld	r25, X+
    297a:	0d 90       	ld	r0, X+
    297c:	bc 91       	ld	r27, X
    297e:	a0 2d       	mov	r26, r0
    2980:	80 93 ef 06 	sts	0x06EF, r24	; 0x8006ef <pathFollower_status+0x5>
    2984:	90 93 f0 06 	sts	0x06F0, r25	; 0x8006f0 <pathFollower_status+0x6>
    2988:	a0 93 f1 06 	sts	0x06F1, r26	; 0x8006f1 <pathFollower_status+0x7>
    298c:	b0 93 f2 06 	sts	0x06F2, r27	; 0x8006f2 <pathFollower_status+0x8>
        curSegVec.x = pathFollower_status.segEnd.x - currentPos.x;
    2990:	8f 87       	std	Y+15, r24	; 0x0f
    2992:	98 8b       	std	Y+16, r25	; 0x10
    2994:	ef 85       	ldd	r30, Y+15	; 0x0f
    2996:	f8 89       	ldd	r31, Y+16	; 0x10
    2998:	bf 01       	movw	r22, r30
    299a:	ff 0f       	add	r31, r31
    299c:	88 0b       	sbc	r24, r24
    299e:	99 0b       	sbc	r25, r25
    29a0:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
    29a4:	2f 8d       	ldd	r18, Y+31	; 0x1f
    29a6:	38 a1       	ldd	r19, Y+32	; 0x20
    29a8:	49 a1       	ldd	r20, Y+33	; 0x21
    29aa:	5a a1       	ldd	r21, Y+34	; 0x22
    29ac:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
    29b0:	6d 83       	std	Y+5, r22	; 0x05
    29b2:	7e 83       	std	Y+6, r23	; 0x06
    29b4:	8f 83       	std	Y+7, r24	; 0x07
    29b6:	98 87       	std	Y+8, r25	; 0x08
    29b8:	60 93 d7 06 	sts	0x06D7, r22	; 0x8006d7 <curSegVec>
    29bc:	70 93 d8 06 	sts	0x06D8, r23	; 0x8006d8 <curSegVec+0x1>
    29c0:	80 93 d9 06 	sts	0x06D9, r24	; 0x8006d9 <curSegVec+0x2>
    29c4:	90 93 da 06 	sts	0x06DA, r25	; 0x8006da <curSegVec+0x3>
        curSegVec.y = pathFollower_status.segEnd.y - currentPos.y;
    29c8:	80 90 f1 06 	lds	r8, 0x06F1	; 0x8006f1 <pathFollower_status+0x7>
    29cc:	90 90 f2 06 	lds	r9, 0x06F2	; 0x8006f2 <pathFollower_status+0x8>
    29d0:	b4 01       	movw	r22, r8
    29d2:	09 2c       	mov	r0, r9
    29d4:	00 0c       	add	r0, r0
    29d6:	88 0b       	sbc	r24, r24
    29d8:	99 0b       	sbc	r25, r25
    29da:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
    29de:	2b a1       	ldd	r18, Y+35	; 0x23
    29e0:	3c a1       	ldd	r19, Y+36	; 0x24
    29e2:	4d a1       	ldd	r20, Y+37	; 0x25
    29e4:	5e a1       	ldd	r21, Y+38	; 0x26
    29e6:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
    29ea:	69 83       	std	Y+1, r22	; 0x01
    29ec:	7a 83       	std	Y+2, r23	; 0x02
    29ee:	8b 83       	std	Y+3, r24	; 0x03
    29f0:	9c 83       	std	Y+4, r25	; 0x04
    29f2:	60 93 db 06 	sts	0x06DB, r22	; 0x8006db <curSegVec+0x4>
    29f6:	70 93 dc 06 	sts	0x06DC, r23	; 0x8006dc <curSegVec+0x5>
    29fa:	80 93 dd 06 	sts	0x06DD, r24	; 0x8006dd <curSegVec+0x6>
    29fe:	90 93 de 06 	sts	0x06DE, r25	; 0x8006de <curSegVec+0x7>

// *************************** LOCAL FUNCTIONS *********************************

// compute squared length of a vector
static inline float sqLen(const FPoint_t vec) {
    return square(vec.x) + square(vec.y);
    2a02:	6d 81       	ldd	r22, Y+5	; 0x05
    2a04:	7e 81       	ldd	r23, Y+6	; 0x06
    2a06:	8f 81       	ldd	r24, Y+7	; 0x07
    2a08:	98 85       	ldd	r25, Y+8	; 0x08
    2a0a:	0e 94 21 20 	call	0x4042	; 0x4042 <square>
    2a0e:	6b 01       	movw	r12, r22
    2a10:	7c 01       	movw	r14, r24
    2a12:	69 81       	ldd	r22, Y+1	; 0x01
    2a14:	7a 81       	ldd	r23, Y+2	; 0x02
    2a16:	8b 81       	ldd	r24, Y+3	; 0x03
    2a18:	9c 81       	ldd	r25, Y+4	; 0x04
    2a1a:	0e 94 21 20 	call	0x4042	; 0x4042 <square>
    2a1e:	a7 01       	movw	r20, r14
    2a20:	96 01       	movw	r18, r12
    2a22:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__addsf3>
    2a26:	2b 01       	movw	r4, r22
    2a28:	3c 01       	movw	r6, r24
        // to go from the current position of the robot to the first path point.
        // The next segment connects point path[0] to point path[1].
        pathFollower_status.segEnd = path[0];
        curSegVec.x = pathFollower_status.segEnd.x - currentPos.x;
        curSegVec.y = pathFollower_status.segEnd.y - currentPos.y;
        curSegLenSq = sqLen(curSegVec);
    2a2a:	60 93 d3 06 	sts	0x06D3, r22	; 0x8006d3 <curSegLenSq>
    2a2e:	70 93 d4 06 	sts	0x06D4, r23	; 0x8006d4 <curSegLenSq+0x1>
    2a32:	80 93 d5 06 	sts	0x06D5, r24	; 0x8006d5 <curSegLenSq+0x2>
    2a36:	90 93 d6 06 	sts	0x06D6, r25	; 0x8006d6 <curSegLenSq+0x3>

        // if the distance between current position and first path point is very small
        if (curSegLenSq < 1.0e-2) {
    2a3a:	2a e0       	ldi	r18, 0x0A	; 10
    2a3c:	37 ed       	ldi	r19, 0xD7	; 215
    2a3e:	43 e2       	ldi	r20, 0x23	; 35
    2a40:	5c e3       	ldi	r21, 0x3C	; 60
    2a42:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <__cmpsf2>
        	// then already switch to segment between path[0] and path[1]
            nextSegEnd = path[2];
    2a46:	ed 85       	ldd	r30, Y+13	; 0x0d
    2a48:	fe 85       	ldd	r31, Y+14	; 0x0e
        curSegVec.x = pathFollower_status.segEnd.x - currentPos.x;
        curSegVec.y = pathFollower_status.segEnd.y - currentPos.y;
        curSegLenSq = sqLen(curSegVec);

        // if the distance between current position and first path point is very small
        if (curSegLenSq < 1.0e-2) {
    2a4a:	87 fd       	sbrc	r24, 7
    2a4c:	73 c3       	rjmp	.+1766   	; 0x3134 <pathFollower_update+0xcb6>
            curSegLenSq = sqLen(curSegVec);
            curSeg = 0;
        } else {
        	// otherwise (most of the cases), we introduce a linear segment from the
        	// current position to the first path point path[0], keeping curSeg = -1
            nextSegEnd = path[1];
    2a4e:	84 81       	ldd	r24, Z+4	; 0x04
    2a50:	95 81       	ldd	r25, Z+5	; 0x05
    2a52:	a6 81       	ldd	r26, Z+6	; 0x06
    2a54:	b7 81       	ldd	r27, Z+7	; 0x07
    2a56:	80 93 cb 06 	sts	0x06CB, r24	; 0x8006cb <nextSegEnd>
    2a5a:	90 93 cc 06 	sts	0x06CC, r25	; 0x8006cc <nextSegEnd+0x1>
    2a5e:	a0 93 cd 06 	sts	0x06CD, r26	; 0x8006cd <nextSegEnd+0x2>
    2a62:	b0 93 ce 06 	sts	0x06CE, r27	; 0x8006ce <nextSegEnd+0x3>
            pathFollower_status.segStart.x = currentPos.x;
    2a66:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2a68:	78 a1       	ldd	r23, Y+32	; 0x20
    2a6a:	89 a1       	ldd	r24, Y+33	; 0x21
    2a6c:	9a a1       	ldd	r25, Y+34	; 0x22
    2a6e:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <__fixsfsi>
    2a72:	8b 01       	movw	r16, r22
    2a74:	70 93 ec 06 	sts	0x06EC, r23	; 0x8006ec <pathFollower_status+0x2>
    2a78:	60 93 eb 06 	sts	0x06EB, r22	; 0x8006eb <pathFollower_status+0x1>
            pathFollower_status.segStart.y = currentPos.y;
    2a7c:	6b a1       	ldd	r22, Y+35	; 0x23
    2a7e:	7c a1       	ldd	r23, Y+36	; 0x24
    2a80:	8d a1       	ldd	r24, Y+37	; 0x25
    2a82:	9e a1       	ldd	r25, Y+38	; 0x26
    2a84:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <__fixsfsi>
    2a88:	5b 01       	movw	r10, r22
    2a8a:	70 93 ee 06 	sts	0x06EE, r23	; 0x8006ee <pathFollower_status+0x4>
    2a8e:	60 93 ed 06 	sts	0x06ED, r22	; 0x8006ed <pathFollower_status+0x3>
    2a92:	20 91 2b 02 	lds	r18, 0x022B	; 0x80022b <curSeg>
    2a96:	30 91 2c 02 	lds	r19, 0x022C	; 0x80022c <curSeg+0x1>
    2a9a:	38 ab       	std	Y+48, r19	; 0x30
    2a9c:	2f a7       	std	Y+47, r18	; 0x2f
    2a9e:	19 01       	movw	r2, r18
    2aa0:	3f ef       	ldi	r19, 0xFF	; 255
    2aa2:	23 1a       	sub	r2, r19
    2aa4:	33 0a       	sbc	r3, r19
    2aa6:	c1 01       	movw	r24, r2
    2aa8:	01 96       	adiw	r24, 0x01	; 1
    2aaa:	ac 01       	movw	r20, r24
    2aac:	44 0f       	add	r20, r20
    2aae:	55 1f       	adc	r21, r21
    2ab0:	44 0f       	add	r20, r20
    2ab2:	55 1f       	adc	r21, r21
    2ab4:	58 a7       	std	Y+40, r21	; 0x28
    2ab6:	4f a3       	std	Y+39, r20	; 0x27
        }

        nextSegVec.x = nextSegEnd.x - pathFollower_status.segEnd.x;
    2ab8:	80 91 cb 06 	lds	r24, 0x06CB	; 0x8006cb <nextSegEnd>
    2abc:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <nextSegEnd+0x1>
    2ac0:	9a 87       	std	Y+10, r25	; 0x0a
    2ac2:	89 87       	std	Y+9, r24	; 0x09
    2ac4:	bc 01       	movw	r22, r24
    2ac6:	af 85       	ldd	r26, Y+15	; 0x0f
    2ac8:	b8 89       	ldd	r27, Y+16	; 0x10
    2aca:	6a 1b       	sub	r22, r26
    2acc:	7b 0b       	sbc	r23, r27
    2ace:	07 2e       	mov	r0, r23
    2ad0:	00 0c       	add	r0, r0
    2ad2:	88 0b       	sbc	r24, r24
    2ad4:	99 0b       	sbc	r25, r25
    2ad6:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
    2ada:	6f 87       	std	Y+15, r22	; 0x0f
    2adc:	78 8b       	std	Y+16, r23	; 0x10
    2ade:	89 8b       	std	Y+17, r24	; 0x11
    2ae0:	9a 8b       	std	Y+18, r25	; 0x12
    2ae2:	60 93 c3 06 	sts	0x06C3, r22	; 0x8006c3 <nextSegVec>
    2ae6:	70 93 c4 06 	sts	0x06C4, r23	; 0x8006c4 <nextSegVec+0x1>
    2aea:	80 93 c5 06 	sts	0x06C5, r24	; 0x8006c5 <nextSegVec+0x2>
    2aee:	90 93 c6 06 	sts	0x06C6, r25	; 0x8006c6 <nextSegVec+0x3>
        nextSegVec.y = nextSegEnd.y - pathFollower_status.segEnd.y;
    2af2:	e0 91 cd 06 	lds	r30, 0x06CD	; 0x8006cd <nextSegEnd+0x2>
    2af6:	f0 91 ce 06 	lds	r31, 0x06CE	; 0x8006ce <nextSegEnd+0x3>
    2afa:	fb af       	std	Y+59, r31	; 0x3b
    2afc:	ea af       	std	Y+58, r30	; 0x3a
    2afe:	bf 01       	movw	r22, r30
    2b00:	68 19       	sub	r22, r8
    2b02:	79 09       	sbc	r23, r9
    2b04:	07 2e       	mov	r0, r23
    2b06:	00 0c       	add	r0, r0
    2b08:	88 0b       	sbc	r24, r24
    2b0a:	99 0b       	sbc	r25, r25
    2b0c:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
    2b10:	6b 8b       	std	Y+19, r22	; 0x13
    2b12:	7c 8b       	std	Y+20, r23	; 0x14
    2b14:	8d 8b       	std	Y+21, r24	; 0x15
    2b16:	9e 8b       	std	Y+22, r25	; 0x16
    2b18:	60 93 c7 06 	sts	0x06C7, r22	; 0x8006c7 <nextSegVec+0x4>
    2b1c:	70 93 c8 06 	sts	0x06C8, r23	; 0x8006c8 <nextSegVec+0x5>
    2b20:	80 93 c9 06 	sts	0x06C9, r24	; 0x8006c9 <nextSegVec+0x6>
    2b24:	90 93 ca 06 	sts	0x06CA, r25	; 0x8006ca <nextSegVec+0x7>

// *************************** LOCAL FUNCTIONS *********************************

// compute squared length of a vector
static inline float sqLen(const FPoint_t vec) {
    return square(vec.x) + square(vec.y);
    2b28:	6f 85       	ldd	r22, Y+15	; 0x0f
    2b2a:	78 89       	ldd	r23, Y+16	; 0x10
    2b2c:	89 89       	ldd	r24, Y+17	; 0x11
    2b2e:	9a 89       	ldd	r25, Y+18	; 0x12
    2b30:	0e 94 21 20 	call	0x4042	; 0x4042 <square>
    2b34:	6b 01       	movw	r12, r22
    2b36:	7c 01       	movw	r14, r24
    2b38:	6b 89       	ldd	r22, Y+19	; 0x13
    2b3a:	7c 89       	ldd	r23, Y+20	; 0x14
    2b3c:	8d 89       	ldd	r24, Y+21	; 0x15
    2b3e:	9e 89       	ldd	r25, Y+22	; 0x16
    2b40:	0e 94 21 20 	call	0x4042	; 0x4042 <square>
    2b44:	9b 01       	movw	r18, r22
    2b46:	ac 01       	movw	r20, r24
    2b48:	c7 01       	movw	r24, r14
    2b4a:	b6 01       	movw	r22, r12
    2b4c:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__addsf3>
    2b50:	6f 8b       	std	Y+23, r22	; 0x17
    2b52:	78 8f       	std	Y+24, r23	; 0x18
    2b54:	89 8f       	std	Y+25, r24	; 0x19
    2b56:	9a 8f       	std	Y+26, r25	; 0x1a
            pathFollower_status.segStart.y = currentPos.y;
        }

        nextSegVec.x = nextSegEnd.x - pathFollower_status.segEnd.x;
        nextSegVec.y = nextSegEnd.y - pathFollower_status.segEnd.y;
        nextSegLenSq = sqLen(nextSegVec);
    2b58:	60 93 bf 06 	sts	0x06BF, r22	; 0x8006bf <nextSegLenSq>
    2b5c:	70 93 c0 06 	sts	0x06C0, r23	; 0x8006c0 <nextSegLenSq+0x1>
    2b60:	80 93 c1 06 	sts	0x06C1, r24	; 0x8006c1 <nextSegLenSq+0x2>
    2b64:	90 93 c2 06 	sts	0x06C2, r25	; 0x8006c2 <nextSegLenSq+0x3>
        nextSegLen = sqrt(nextSegLenSq);
    2b68:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <sqrt>
    2b6c:	60 93 bb 06 	sts	0x06BB, r22	; 0x8006bb <nextSegLen>
    2b70:	70 93 bc 06 	sts	0x06BC, r23	; 0x8006bc <nextSegLen+0x1>
    2b74:	80 93 bd 06 	sts	0x06BD, r24	; 0x8006bd <nextSegLen+0x2>
    2b78:	90 93 be 06 	sts	0x06BE, r25	; 0x8006be <nextSegLen+0x3>

        curSegLen = sqrt(curSegLenSq);
    2b7c:	c3 01       	movw	r24, r6
    2b7e:	b2 01       	movw	r22, r4
    2b80:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <sqrt>
    2b84:	9b 01       	movw	r18, r22
    2b86:	ac 01       	movw	r20, r24
    2b88:	60 93 cf 06 	sts	0x06CF, r22	; 0x8006cf <curSegLen>
    2b8c:	70 93 d0 06 	sts	0x06D0, r23	; 0x8006d0 <curSegLen+0x1>
    2b90:	80 93 d1 06 	sts	0x06D1, r24	; 0x8006d1 <curSegLen+0x2>
    2b94:	90 93 d2 06 	sts	0x06D2, r25	; 0x8006d2 <curSegLen+0x3>

        relL = pathFollower_lookaheadDistance / curSegLen;
    2b98:	60 91 2e 02 	lds	r22, 0x022E	; 0x80022e <pathFollower_lookaheadDistance>
    2b9c:	70 91 2f 02 	lds	r23, 0x022F	; 0x80022f <pathFollower_lookaheadDistance+0x1>
    2ba0:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <pathFollower_lookaheadDistance+0x2>
    2ba4:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <pathFollower_lookaheadDistance+0x3>
    2ba8:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__divsf3>
    2bac:	60 93 b7 06 	sts	0x06B7, r22	; 0x8006b7 <relL>
    2bb0:	70 93 b8 06 	sts	0x06B8, r23	; 0x8006b8 <relL+0x1>
    2bb4:	80 93 b9 06 	sts	0x06B9, r24	; 0x8006b9 <relL+0x2>
    2bb8:	90 93 ba 06 	sts	0x06BA, r25	; 0x8006ba <relL+0x3>
    2bbc:	c9 84       	ldd	r12, Y+9	; 0x09
    2bbe:	da 84       	ldd	r13, Y+10	; 0x0a
    2bc0:	03 cd       	rjmp	.-1530   	; 0x25c8 <pathFollower_update+0x14a>
        // segEnd becomes the start of the segment in the next iteration
        segStart = segEnd;
    }

    // if minSeg hit the maximum, output an error (note that this should not happen)
    if (minSeg == pathLength) {
    2bc2:	89 a5       	ldd	r24, Y+41	; 0x29
    2bc4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bc6:	af 89       	ldd	r26, Y+23	; 0x17
    2bc8:	b8 8d       	ldd	r27, Y+24	; 0x18
    2bca:	8a 17       	cp	r24, r26
    2bcc:	9b 07       	cpc	r25, r27
    2bce:	09 f4       	brne	.+2      	; 0x2bd2 <pathFollower_update+0x754>
    2bd0:	3c c4       	rjmp	.+2168   	; 0x344a <pathFollower_update+0xfcc>
        pathFollowerErrorP("Unable to locate segment for orthogonal projection");

    // if segment with smallest distance between orthogonal projection and current position
    // is after the current segment
    } else if (minSeg > curSeg) {
    2bd2:	49 a5       	ldd	r20, Y+41	; 0x29
    2bd4:	5a a5       	ldd	r21, Y+42	; 0x2a
    2bd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bd8:	98 a9       	ldd	r25, Y+48	; 0x30
    2bda:	84 17       	cp	r24, r20
    2bdc:	95 07       	cpc	r25, r21
    2bde:	0c f4       	brge	.+2      	; 0x2be2 <pathFollower_update+0x764>
    2be0:	11 c1       	rjmp	.+546    	; 0x2e04 <pathFollower_update+0x986>
    2be2:	c0 90 b7 06 	lds	r12, 0x06B7	; 0x8006b7 <relL>
    2be6:	d0 90 b8 06 	lds	r13, 0x06B8	; 0x8006b8 <relL+0x1>
    2bea:	e0 90 b9 06 	lds	r14, 0x06B9	; 0x8006b9 <relL+0x2>
    2bee:	f0 90 ba 06 	lds	r15, 0x06BA	; 0x8006ba <relL+0x3>

        curSeg = minSeg;
    }


    if (curSeg == pathLength - 2) {
    2bf2:	8f 89       	ldd	r24, Y+23	; 0x17
    2bf4:	98 8d       	ldd	r25, Y+24	; 0x18
    2bf6:	02 97       	sbiw	r24, 0x02	; 2
    2bf8:	ef a5       	ldd	r30, Y+47	; 0x2f
    2bfa:	f8 a9       	ldd	r31, Y+48	; 0x30
    2bfc:	8e 17       	cp	r24, r30
    2bfe:	9f 07       	cpc	r25, r31
    2c00:	09 f4       	brne	.+2      	; 0x2c04 <pathFollower_update+0x786>
    2c02:	76 c2       	rjmp	.+1260   	; 0x30f0 <pathFollower_update+0xc72>
    //         after the orthogonal projection from step 1

    // safe-guard in case robot deviates from path too much such that a switch to another segment
    // does not occur. In this case, the orthogonal projection stops at the end of the current segment.
    // This prevents the lookahead point from being placed outside the path.
    if (lCur > 1.0f)
    2c04:	20 e0       	ldi	r18, 0x00	; 0
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	40 e8       	ldi	r20, 0x80	; 128
    2c0a:	5f e3       	ldi	r21, 0x3F	; 63
    2c0c:	6b a5       	ldd	r22, Y+43	; 0x2b
    2c0e:	7c a5       	ldd	r23, Y+44	; 0x2c
    2c10:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c12:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c14:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <__gesf2>
    2c18:	18 16       	cp	r1, r24
    2c1a:	44 f4       	brge	.+16     	; 0x2c2c <pathFollower_update+0x7ae>
        lCur = 1.0f;
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	40 e8       	ldi	r20, 0x80	; 128
    2c22:	5f e3       	ldi	r21, 0x3F	; 63
    2c24:	2b a7       	std	Y+43, r18	; 0x2b
    2c26:	3c a7       	std	Y+44, r19	; 0x2c
    2c28:	4d a7       	std	Y+45, r20	; 0x2d
    2c2a:	5e a7       	std	Y+46, r21	; 0x2e

    // compute the relative distance of the lookahead point in terms of the current segment
    float relLA = relL + lCur;
    2c2c:	a7 01       	movw	r20, r14
    2c2e:	96 01       	movw	r18, r12
    2c30:	6b a5       	ldd	r22, Y+43	; 0x2b
    2c32:	7c a5       	ldd	r23, Y+44	; 0x2c
    2c34:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c36:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c38:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__addsf3>
    2c3c:	4b 01       	movw	r8, r22
    2c3e:	5c 01       	movw	r10, r24

    // if lookahead point is on the current segment
    if (relLA <= 1.0f) {
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	40 e8       	ldi	r20, 0x80	; 128
    2c46:	5f e3       	ldi	r21, 0x3F	; 63
    2c48:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <__cmpsf2>
    2c4c:	18 16       	cp	r1, r24
    2c4e:	0c f0       	brlt	.+2      	; 0x2c52 <pathFollower_update+0x7d4>
    2c50:	30 c4       	rjmp	.+2144   	; 0x34b2 <pathFollower_update+0x1034>

        // subtract the distance between orthogonal projection on current segment to current segment end
        // from pathFollower_lookaheadDistance, such that Lrem contains the remaining distance of the lookahead
        // point along the path after the current segment.
        // This is expressed shorter as:
        float Lrem = (relLA - 1.0f) * curSegLen;
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	40 e8       	ldi	r20, 0x80	; 128
    2c58:	5f e3       	ldi	r21, 0x3F	; 63
    2c5a:	c5 01       	movw	r24, r10
    2c5c:	b4 01       	movw	r22, r8
    2c5e:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
    2c62:	20 91 cf 06 	lds	r18, 0x06CF	; 0x8006cf <curSegLen>
    2c66:	30 91 d0 06 	lds	r19, 0x06D0	; 0x8006d0 <curSegLen+0x1>
    2c6a:	40 91 d1 06 	lds	r20, 0x06D1	; 0x8006d1 <curSegLen+0x2>
    2c6e:	50 91 d2 06 	lds	r21, 0x06D2	; 0x8006d2 <curSegLen+0x3>
    2c72:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <__mulsf3>
    2c76:	6b 01       	movw	r12, r22
    2c78:	7c 01       	movw	r14, r24

        // if lookahead point is on the next segment
        if (Lrem <= nextSegLen) {
    2c7a:	80 90 bb 06 	lds	r8, 0x06BB	; 0x8006bb <nextSegLen>
    2c7e:	90 90 bc 06 	lds	r9, 0x06BC	; 0x8006bc <nextSegLen+0x1>
    2c82:	a0 90 bd 06 	lds	r10, 0x06BD	; 0x8006bd <nextSegLen+0x2>
    2c86:	b0 90 be 06 	lds	r11, 0x06BE	; 0x8006be <nextSegLen+0x3>
    2c8a:	a5 01       	movw	r20, r10
    2c8c:	94 01       	movw	r18, r8
    2c8e:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <__cmpsf2>
            // compute lookahead point on next segment
            pathFollower_status.lookahead = pointVec(nextSegVec, Lrem / nextSegLen, pathFollower_status.segEnd);
    2c92:	a5 01       	movw	r20, r10
    2c94:	94 01       	movw	r18, r8
        // point along the path after the current segment.
        // This is expressed shorter as:
        float Lrem = (relLA - 1.0f) * curSegLen;

        // if lookahead point is on the next segment
        if (Lrem <= nextSegLen) {
    2c96:	18 16       	cp	r1, r24
    2c98:	0c f0       	brlt	.+2      	; 0x2c9c <pathFollower_update+0x81e>
    2c9a:	8e c3       	rjmp	.+1820   	; 0x33b8 <pathFollower_update+0xf3a>
            pathFollower_status.lookahead = pointVec(nextSegVec, Lrem / nextSegLen, pathFollower_status.segEnd);

        // if lookahead point is after the next segment
        } else {
            // update Lrem by subtracting the length of the next segment
            Lrem -= nextSegLen;
    2c9c:	c7 01       	movw	r24, r14
    2c9e:	b6 01       	movw	r22, r12
    2ca0:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
    2ca4:	6b 01       	movw	r12, r22
    2ca6:	7c 01       	movw	r14, r24

            // search for segment where lookahead point is located

            // segStart holds the start of the segment considered
            Point_t segStart = nextSegEnd;
    2ca8:	00 91 cb 06 	lds	r16, 0x06CB	; 0x8006cb <nextSegEnd>
    2cac:	10 91 cc 06 	lds	r17, 0x06CC	; 0x8006cc <nextSegEnd+0x1>
    2cb0:	20 90 cd 06 	lds	r2, 0x06CD	; 0x8006cd <nextSegEnd+0x2>
    2cb4:	30 90 ce 06 	lds	r3, 0x06CE	; 0x8006ce <nextSegEnd+0x3>
            // seg is the segment index (start point of segment path[seg])
            uint8_t seg = curSeg + 1;
            // pointer in array path for reading out the segment's end point
            Point_t *pathPtr = &path[seg + 1];
    2cb8:	8f a4       	ldd	r8, Y+47	; 0x2f
    2cba:	83 94       	inc	r8
    2cbc:	91 2c       	mov	r9, r1
    2cbe:	3f ef       	ldi	r19, 0xFF	; 255
    2cc0:	83 1a       	sub	r8, r19
    2cc2:	93 0a       	sbc	r9, r19
    2cc4:	88 0c       	add	r8, r8
    2cc6:	99 1c       	adc	r9, r9
    2cc8:	88 0c       	add	r8, r8
    2cca:	99 1c       	adc	r9, r9
    2ccc:	80 91 e1 06 	lds	r24, 0x06E1	; 0x8006e1 <path>
    2cd0:	90 91 e2 06 	lds	r25, 0x06E2	; 0x8006e2 <path+0x1>
    2cd4:	88 0e       	add	r8, r24
    2cd6:	99 1e       	adc	r9, r25

            while (++seg < pathLength) {
    2cd8:	4f a5       	ldd	r20, Y+47	; 0x2f
    2cda:	4e 5f       	subi	r20, 0xFE	; 254
    2cdc:	49 83       	std	Y+1, r20	; 0x01
    2cde:	5f a1       	ldd	r21, Y+39	; 0x27
    2ce0:	45 17       	cp	r20, r21
    2ce2:	88 f0       	brcs	.+34     	; 0x2d06 <pathFollower_update+0x888>
    2ce4:	80 c0       	rjmp	.+256    	; 0x2de6 <pathFollower_update+0x968>
                    // compute lookahead point on that segment
                    pathFollower_status.lookahead = pointVec(vec, Lrem / vecLen, segStart);
                    break;
                } else
                    // update Lrem by subtracting the length of the segment
                    Lrem -= vecLen;
    2ce6:	c7 01       	movw	r24, r14
    2ce8:	b6 01       	movw	r22, r12
    2cea:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
    2cee:	6b 01       	movw	r12, r22
    2cf0:	7c 01       	movw	r14, r24
            // seg is the segment index (start point of segment path[seg])
            uint8_t seg = curSeg + 1;
            // pointer in array path for reading out the segment's end point
            Point_t *pathPtr = &path[seg + 1];

            while (++seg < pathLength) {
    2cf2:	f9 81       	ldd	r31, Y+1	; 0x01
    2cf4:	ff 5f       	subi	r31, 0xFF	; 255
    2cf6:	f9 83       	std	Y+1, r31	; 0x01
                } else
                    // update Lrem by subtracting the length of the segment
                    Lrem -= vecLen;

                // segEnd becomes the start of the segment in the next iteration
                segStart = segEnd;
    2cf8:	15 01       	movw	r2, r10
    2cfa:	0d 85       	ldd	r16, Y+13	; 0x0d
    2cfc:	1e 85       	ldd	r17, Y+14	; 0x0e
            // seg is the segment index (start point of segment path[seg])
            uint8_t seg = curSeg + 1;
            // pointer in array path for reading out the segment's end point
            Point_t *pathPtr = &path[seg + 1];

            while (++seg < pathLength) {
    2cfe:	2f a1       	ldd	r18, Y+39	; 0x27
    2d00:	f2 17       	cp	r31, r18
    2d02:	08 f0       	brcs	.+2      	; 0x2d06 <pathFollower_update+0x888>
    2d04:	70 c0       	rjmp	.+224    	; 0x2de6 <pathFollower_update+0x968>
                // get end of segment
                Point_t segEnd = *++pathPtr;
    2d06:	84 e0       	ldi	r24, 0x04	; 4
    2d08:	88 0e       	add	r8, r24
    2d0a:	91 1c       	adc	r9, r1
    2d0c:	d4 01       	movw	r26, r8
    2d0e:	0d 90       	ld	r0, X+
    2d10:	bc 91       	ld	r27, X
    2d12:	a0 2d       	mov	r26, r0
    2d14:	be 87       	std	Y+14, r27	; 0x0e
    2d16:	ad 87       	std	Y+13, r26	; 0x0d
    2d18:	f4 01       	movw	r30, r8
    2d1a:	a2 80       	ldd	r10, Z+2	; 0x02
    2d1c:	b3 80       	ldd	r11, Z+3	; 0x03

                // compute segment vector as (end point - start point)
                FPoint_t vec = { segEnd.x - segStart.x, segEnd.y - segStart.y };
    2d1e:	bd 01       	movw	r22, r26
    2d20:	60 1b       	sub	r22, r16
    2d22:	71 0b       	sbc	r23, r17
    2d24:	07 2e       	mov	r0, r23
    2d26:	00 0c       	add	r0, r0
    2d28:	88 0b       	sbc	r24, r24
    2d2a:	99 0b       	sbc	r25, r25
    2d2c:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
    2d30:	6d 83       	std	Y+5, r22	; 0x05
    2d32:	7e 83       	std	Y+6, r23	; 0x06
    2d34:	8f 83       	std	Y+7, r24	; 0x07
    2d36:	98 87       	std	Y+8, r25	; 0x08
    2d38:	b5 01       	movw	r22, r10
    2d3a:	62 19       	sub	r22, r2
    2d3c:	73 09       	sbc	r23, r3
    2d3e:	07 2e       	mov	r0, r23
    2d40:	00 0c       	add	r0, r0
    2d42:	88 0b       	sbc	r24, r24
    2d44:	99 0b       	sbc	r25, r25
    2d46:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
    2d4a:	69 87       	std	Y+9, r22	; 0x09
    2d4c:	7a 87       	std	Y+10, r23	; 0x0a
    2d4e:	8b 87       	std	Y+11, r24	; 0x0b
    2d50:	9c 87       	std	Y+12, r25	; 0x0c
                // compute length of vec
                float vecLen = hypotf(vec.x, vec.y);
    2d52:	9b 01       	movw	r18, r22
    2d54:	ac 01       	movw	r20, r24
    2d56:	6d 81       	ldd	r22, Y+5	; 0x05
    2d58:	7e 81       	ldd	r23, Y+6	; 0x06
    2d5a:	8f 81       	ldd	r24, Y+7	; 0x07
    2d5c:	98 85       	ldd	r25, Y+8	; 0x08
    2d5e:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <hypot>
    2d62:	2b 01       	movw	r4, r22
    2d64:	3c 01       	movw	r6, r24

                // if lookahead point is on the segment
                if (vecLen >= Lrem) {
    2d66:	a7 01       	movw	r20, r14
    2d68:	96 01       	movw	r18, r12
    2d6a:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <__gesf2>
                    // compute lookahead point on that segment
                    pathFollower_status.lookahead = pointVec(vec, Lrem / vecLen, segStart);
    2d6e:	a3 01       	movw	r20, r6
    2d70:	92 01       	movw	r18, r4
                FPoint_t vec = { segEnd.x - segStart.x, segEnd.y - segStart.y };
                // compute length of vec
                float vecLen = hypotf(vec.x, vec.y);

                // if lookahead point is on the segment
                if (vecLen >= Lrem) {
    2d72:	87 fd       	sbrc	r24, 7
    2d74:	b8 cf       	rjmp	.-144    	; 0x2ce6 <pathFollower_update+0x868>
                    // compute lookahead point on that segment
                    pathFollower_status.lookahead = pointVec(vec, Lrem / vecLen, segStart);
    2d76:	c7 01       	movw	r24, r14
    2d78:	b6 01       	movw	r22, r12
    2d7a:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__divsf3>
    2d7e:	4b 01       	movw	r8, r22
    2d80:	5c 01       	movw	r10, r24
// compute the location of a point on a line in the relative distance l (w.r.t.
// length of vector vec) where the line is determined by its start point start
// and the direction vector vec.
static inline FPoint_t pointVec(FPoint_t vec, float l, Point_t start) {
    // compute FPoint_t p = { (vec.x * l) + start.x, (vec.y * l) + start.y };
    FPoint_t p = { fmaf(vec.x, l, start.x), fmaf(vec.y, l, start.y) };
    2d82:	b8 01       	movw	r22, r16
    2d84:	11 0f       	add	r17, r17
    2d86:	88 0b       	sbc	r24, r24
    2d88:	99 0b       	sbc	r25, r25
    2d8a:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
    2d8e:	7b 01       	movw	r14, r22
    2d90:	8c 01       	movw	r16, r24
    2d92:	a5 01       	movw	r20, r10
    2d94:	94 01       	movw	r18, r8
    2d96:	6d 81       	ldd	r22, Y+5	; 0x05
    2d98:	7e 81       	ldd	r23, Y+6	; 0x06
    2d9a:	8f 81       	ldd	r24, Y+7	; 0x07
    2d9c:	98 85       	ldd	r25, Y+8	; 0x08
    2d9e:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <fma>
    2da2:	2b 01       	movw	r4, r22
    2da4:	3c 01       	movw	r6, r24
    2da6:	b1 01       	movw	r22, r2
    2da8:	33 0c       	add	r3, r3
    2daa:	88 0b       	sbc	r24, r24
    2dac:	99 0b       	sbc	r25, r25
    2dae:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
    2db2:	7b 01       	movw	r14, r22
    2db4:	8c 01       	movw	r16, r24
    2db6:	a5 01       	movw	r20, r10
    2db8:	94 01       	movw	r18, r8
    2dba:	69 85       	ldd	r22, Y+9	; 0x09
    2dbc:	7a 85       	ldd	r23, Y+10	; 0x0a
    2dbe:	8b 85       	ldd	r24, Y+11	; 0x0b
    2dc0:	9c 85       	ldd	r25, Y+12	; 0x0c
    2dc2:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <fma>
                float vecLen = hypotf(vec.x, vec.y);

                // if lookahead point is on the segment
                if (vecLen >= Lrem) {
                    // compute lookahead point on that segment
                    pathFollower_status.lookahead = pointVec(vec, Lrem / vecLen, segStart);
    2dc6:	40 92 f3 06 	sts	0x06F3, r4	; 0x8006f3 <pathFollower_status+0x9>
    2dca:	50 92 f4 06 	sts	0x06F4, r5	; 0x8006f4 <pathFollower_status+0xa>
    2dce:	60 92 f5 06 	sts	0x06F5, r6	; 0x8006f5 <pathFollower_status+0xb>
    2dd2:	70 92 f6 06 	sts	0x06F6, r7	; 0x8006f6 <pathFollower_status+0xc>
    2dd6:	60 93 f7 06 	sts	0x06F7, r22	; 0x8006f7 <pathFollower_status+0xd>
    2dda:	70 93 f8 06 	sts	0x06F8, r23	; 0x8006f8 <pathFollower_status+0xe>
    2dde:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <pathFollower_status+0xf>
    2de2:	90 93 fa 06 	sts	0x06FA, r25	; 0x8006fa <pathFollower_status+0x10>
            // if last segment was reached, but still the lookahead point could not
            // be found, output an error message.
            // Note that this condition should not occur, except when enlarging
            // the lookahead distance by more than that distance during a following
            // approach
            if (seg == pathLength) {
    2de6:	39 81       	ldd	r19, Y+1	; 0x01
    2de8:	4f a1       	ldd	r20, Y+39	; 0x27
    2dea:	34 13       	cpse	r19, r20
    2dec:	a1 cd       	rjmp	.-1214   	; 0x2930 <pathFollower_update+0x4b2>
                pathFollowerErrorP("Unable to locate segment for lookahead point");
    2dee:	89 e3       	ldi	r24, 0x39	; 57
    2df0:	91 e0       	ldi	r25, 0x01	; 1
    2df2:	9f 93       	push	r25
    2df4:	8f 93       	push	r24
    2df6:	1f 92       	push	r1
    2df8:	0e 94 3f 10 	call	0x207e	; 0x207e <communication_log_P>
    2dfc:	0f 90       	pop	r0
    2dfe:	0f 90       	pop	r0
    2e00:	0f 90       	pop	r0
    2e02:	96 cd       	rjmp	.-1236   	; 0x2930 <pathFollower_update+0x4b2>

    // if segment with smallest distance between orthogonal projection and current position
    // is after the current segment
    } else if (minSeg > curSeg) {
        // if the end of the path has been reached, deactivate follower and report success
        if (minSeg == pathLength - 1) {
    2e04:	8f 89       	ldd	r24, Y+23	; 0x17
    2e06:	98 8d       	ldd	r25, Y+24	; 0x18
    2e08:	01 97       	sbiw	r24, 0x01	; 1
    2e0a:	a9 a5       	ldd	r26, Y+41	; 0x29
    2e0c:	ba a5       	ldd	r27, Y+42	; 0x2a
    2e0e:	a8 17       	cp	r26, r24
    2e10:	b9 07       	cpc	r27, r25
    2e12:	09 f4       	brne	.+2      	; 0x2e16 <pathFollower_update+0x998>
    2e14:	7f cd       	rjmp	.-1282   	; 0x2914 <pathFollower_update+0x496>
            pathFollower_status.enabled = false;
            pathFollowerInfoPNoArg("End of path reached");
            return false;
        }

        pathFollowerInfo("Switching from segment %" PRIi16 " to %" PRIi16, curSeg, minSeg);
    2e16:	ba a5       	ldd	r27, Y+42	; 0x2a
    2e18:	bf 93       	push	r27
    2e1a:	e9 a5       	ldd	r30, Y+41	; 0x29
    2e1c:	ef 93       	push	r30
    2e1e:	f8 a9       	ldd	r31, Y+48	; 0x30
    2e20:	ff 93       	push	r31
    2e22:	2f a5       	ldd	r18, Y+47	; 0x2f
    2e24:	2f 93       	push	r18
    2e26:	84 e4       	ldi	r24, 0x44	; 68
    2e28:	92 e0       	ldi	r25, 0x02	; 2
    2e2a:	9f 93       	push	r25
    2e2c:	8f 93       	push	r24
    2e2e:	82 e0       	ldi	r24, 0x02	; 2
    2e30:	8f 93       	push	r24
    2e32:	0e 94 05 10 	call	0x200a	; 0x200a <communication_log>

        // get a pointer of path[minSeg], i.e. start of segment.
        // This produces more effective code than just addressing the array multiple
        // times at consecutive locations.
        Point_t* pathPtr = &path[minSeg];
    2e36:	e0 91 e1 06 	lds	r30, 0x06E1	; 0x8006e1 <path>
    2e3a:	f0 91 e2 06 	lds	r31, 0x06E2	; 0x8006e2 <path+0x1>
    2e3e:	89 a5       	ldd	r24, Y+41	; 0x29
    2e40:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e42:	88 0f       	add	r24, r24
    2e44:	99 1f       	adc	r25, r25
    2e46:	88 0f       	add	r24, r24
    2e48:	99 1f       	adc	r25, r25
    2e4a:	e8 0f       	add	r30, r24
    2e4c:	f9 1f       	adc	r31, r25

        // if a switch to the next segment is needed, some required variables
        // are stored already in local variables
        if (minSeg == curSeg + 1) {
    2e4e:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <curSeg>
    2e52:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <curSeg+0x1>
    2e56:	01 96       	adiw	r24, 0x01	; 1
    2e58:	0f b6       	in	r0, 0x3f	; 63
    2e5a:	f8 94       	cli
    2e5c:	de bf       	out	0x3e, r29	; 62
    2e5e:	0f be       	out	0x3f, r0	; 63
    2e60:	cd bf       	out	0x3d, r28	; 61
    2e62:	a9 a5       	ldd	r26, Y+41	; 0x29
    2e64:	ba a5       	ldd	r27, Y+42	; 0x2a
    2e66:	a8 17       	cp	r26, r24
    2e68:	b9 07       	cpc	r27, r25
    2e6a:	09 f4       	brne	.+2      	; 0x2e6e <pathFollower_update+0x9f0>
    2e6c:	eb c1       	rjmp	.+982    	; 0x3244 <pathFollower_update+0xdc6>
            pathFollower_status.segStart = pathFollower_status.segEnd;
            pathFollower_status.segEnd = nextSegEnd;
            curSegLen = nextSegLen;
        // if a switch to past the next segment is needed, update the local variables directly
        } else {
            pathFollower_status.segStart = *(pathPtr++); // equals path[minSeg]
    2e6e:	af 01       	movw	r20, r30
    2e70:	4c 5f       	subi	r20, 0xFC	; 252
    2e72:	5f 4f       	sbci	r21, 0xFF	; 255
    2e74:	5e 83       	std	Y+6, r21	; 0x06
    2e76:	4d 83       	std	Y+5, r20	; 0x05
    2e78:	80 81       	ld	r24, Z
    2e7a:	91 81       	ldd	r25, Z+1	; 0x01
    2e7c:	a2 81       	ldd	r26, Z+2	; 0x02
    2e7e:	b3 81       	ldd	r27, Z+3	; 0x03
    2e80:	80 93 eb 06 	sts	0x06EB, r24	; 0x8006eb <pathFollower_status+0x1>
    2e84:	90 93 ec 06 	sts	0x06EC, r25	; 0x8006ec <pathFollower_status+0x2>
    2e88:	a0 93 ed 06 	sts	0x06ED, r26	; 0x8006ed <pathFollower_status+0x3>
    2e8c:	b0 93 ee 06 	sts	0x06EE, r27	; 0x8006ee <pathFollower_status+0x4>
            pathFollower_status.segEnd = *pathPtr;       // equals path[minSeg + 1]
    2e90:	84 81       	ldd	r24, Z+4	; 0x04
    2e92:	95 81       	ldd	r25, Z+5	; 0x05
    2e94:	a6 81       	ldd	r26, Z+6	; 0x06
    2e96:	b7 81       	ldd	r27, Z+7	; 0x07
    2e98:	80 93 ef 06 	sts	0x06EF, r24	; 0x8006ef <pathFollower_status+0x5>
    2e9c:	90 93 f0 06 	sts	0x06F0, r25	; 0x8006f0 <pathFollower_status+0x6>
    2ea0:	a0 93 f1 06 	sts	0x06F1, r26	; 0x8006f1 <pathFollower_status+0x7>
    2ea4:	b0 93 f2 06 	sts	0x06F2, r27	; 0x8006f2 <pathFollower_status+0x8>
            curSegVec.x = pathFollower_status.segEnd.x - pathFollower_status.segStart.x;
    2ea8:	28 2e       	mov	r2, r24
    2eaa:	39 2e       	mov	r3, r25
    2eac:	00 91 eb 06 	lds	r16, 0x06EB	; 0x8006eb <pathFollower_status+0x1>
    2eb0:	10 91 ec 06 	lds	r17, 0x06EC	; 0x8006ec <pathFollower_status+0x2>
    2eb4:	b1 01       	movw	r22, r2
    2eb6:	60 1b       	sub	r22, r16
    2eb8:	71 0b       	sbc	r23, r17
    2eba:	07 2e       	mov	r0, r23
    2ebc:	00 0c       	add	r0, r0
    2ebe:	88 0b       	sbc	r24, r24
    2ec0:	99 0b       	sbc	r25, r25
    2ec2:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
    2ec6:	2b 01       	movw	r4, r22
    2ec8:	3c 01       	movw	r6, r24
    2eca:	60 93 d7 06 	sts	0x06D7, r22	; 0x8006d7 <curSegVec>
    2ece:	70 93 d8 06 	sts	0x06D8, r23	; 0x8006d8 <curSegVec+0x1>
    2ed2:	80 93 d9 06 	sts	0x06D9, r24	; 0x8006d9 <curSegVec+0x2>
    2ed6:	90 93 da 06 	sts	0x06DA, r25	; 0x8006da <curSegVec+0x3>
            curSegVec.y = pathFollower_status.segEnd.y - pathFollower_status.segStart.y;
    2eda:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <pathFollower_status+0x7>
    2ede:	90 91 f2 06 	lds	r25, 0x06F2	; 0x8006f2 <pathFollower_status+0x8>
    2ee2:	9a 87       	std	Y+10, r25	; 0x0a
    2ee4:	89 87       	std	Y+9, r24	; 0x09
    2ee6:	a0 91 ed 06 	lds	r26, 0x06ED	; 0x8006ed <pathFollower_status+0x3>
    2eea:	b0 91 ee 06 	lds	r27, 0x06EE	; 0x8006ee <pathFollower_status+0x4>
    2eee:	ba 83       	std	Y+2, r27	; 0x02
    2ef0:	a9 83       	std	Y+1, r26	; 0x01
    2ef2:	bc 01       	movw	r22, r24
    2ef4:	6a 1b       	sub	r22, r26
    2ef6:	7b 0b       	sbc	r23, r27
    2ef8:	07 2e       	mov	r0, r23
    2efa:	00 0c       	add	r0, r0
    2efc:	88 0b       	sbc	r24, r24
    2efe:	99 0b       	sbc	r25, r25
    2f00:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
    2f04:	6b 01       	movw	r12, r22
    2f06:	7c 01       	movw	r14, r24
    2f08:	60 93 db 06 	sts	0x06DB, r22	; 0x8006db <curSegVec+0x4>
    2f0c:	70 93 dc 06 	sts	0x06DC, r23	; 0x8006dc <curSegVec+0x5>
    2f10:	80 93 dd 06 	sts	0x06DD, r24	; 0x8006dd <curSegVec+0x6>
    2f14:	90 93 de 06 	sts	0x06DE, r25	; 0x8006de <curSegVec+0x7>

// *************************** LOCAL FUNCTIONS *********************************

// compute squared length of a vector
static inline float sqLen(const FPoint_t vec) {
    return square(vec.x) + square(vec.y);
    2f18:	c3 01       	movw	r24, r6
    2f1a:	b2 01       	movw	r22, r4
    2f1c:	0e 94 21 20 	call	0x4042	; 0x4042 <square>
    2f20:	4b 01       	movw	r8, r22
    2f22:	5c 01       	movw	r10, r24
    2f24:	c7 01       	movw	r24, r14
    2f26:	b6 01       	movw	r22, r12
    2f28:	0e 94 21 20 	call	0x4042	; 0x4042 <square>
    2f2c:	9b 01       	movw	r18, r22
    2f2e:	ac 01       	movw	r20, r24
    2f30:	c5 01       	movw	r24, r10
    2f32:	b4 01       	movw	r22, r8
    2f34:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__addsf3>
    2f38:	4b 01       	movw	r8, r22
    2f3a:	5c 01       	movw	r10, r24
        } else {
            pathFollower_status.segStart = *(pathPtr++); // equals path[minSeg]
            pathFollower_status.segEnd = *pathPtr;       // equals path[minSeg + 1]
            curSegVec.x = pathFollower_status.segEnd.x - pathFollower_status.segStart.x;
            curSegVec.y = pathFollower_status.segEnd.y - pathFollower_status.segStart.y;
            curSegLenSq = sqLen(curSegVec);
    2f3c:	60 93 d3 06 	sts	0x06D3, r22	; 0x8006d3 <curSegLenSq>
    2f40:	70 93 d4 06 	sts	0x06D4, r23	; 0x8006d4 <curSegLenSq+0x1>
    2f44:	80 93 d5 06 	sts	0x06D5, r24	; 0x8006d5 <curSegLenSq+0x2>
    2f48:	90 93 d6 06 	sts	0x06D6, r25	; 0x8006d6 <curSegLenSq+0x3>

            // recomputation of lCur is required, as it is needed for the next step
            FPoint_t ECur = { currentPos.x - pathFollower_status.segStart.x, currentPos.y - pathFollower_status.segStart.y };
            float
                // equivalent to P_dot_ECur = curSegVec.x * ECur.x + curSegVec.y * ECur.y, but more accurate
                P_dot_ECur = fmaf(curSegVec.x, ECur.x, curSegVec.y * ECur.y);
    2f4c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f4e:	fa 81       	ldd	r31, Y+2	; 0x02
    2f50:	bf 01       	movw	r22, r30
    2f52:	ff 0f       	add	r31, r31
    2f54:	88 0b       	sbc	r24, r24
    2f56:	99 0b       	sbc	r25, r25
    2f58:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
    2f5c:	9b 01       	movw	r18, r22
    2f5e:	ac 01       	movw	r20, r24
    2f60:	6b a1       	ldd	r22, Y+35	; 0x23
    2f62:	7c a1       	ldd	r23, Y+36	; 0x24
    2f64:	8d a1       	ldd	r24, Y+37	; 0x25
    2f66:	9e a1       	ldd	r25, Y+38	; 0x26
    2f68:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
    2f6c:	a7 01       	movw	r20, r14
    2f6e:	96 01       	movw	r18, r12
    2f70:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <__mulsf3>
    2f74:	6b 01       	movw	r12, r22
    2f76:	7c 01       	movw	r14, r24
    2f78:	b8 01       	movw	r22, r16
    2f7a:	11 0f       	add	r17, r17
    2f7c:	88 0b       	sbc	r24, r24
    2f7e:	99 0b       	sbc	r25, r25
    2f80:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
    2f84:	9b 01       	movw	r18, r22
    2f86:	ac 01       	movw	r20, r24
    2f88:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2f8a:	78 a1       	ldd	r23, Y+32	; 0x20
    2f8c:	89 a1       	ldd	r24, Y+33	; 0x21
    2f8e:	9a a1       	ldd	r25, Y+34	; 0x22
    2f90:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
    2f94:	9b 01       	movw	r18, r22
    2f96:	ac 01       	movw	r20, r24
    2f98:	87 01       	movw	r16, r14
    2f9a:	76 01       	movw	r14, r12
    2f9c:	c3 01       	movw	r24, r6
    2f9e:	b2 01       	movw	r22, r4
    2fa0:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <fma>
            lCur = P_dot_ECur / curSegLenSq;
    2fa4:	a5 01       	movw	r20, r10
    2fa6:	94 01       	movw	r18, r8
    2fa8:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__divsf3>
    2fac:	6b a7       	std	Y+43, r22	; 0x2b
    2fae:	7c a7       	std	Y+44, r23	; 0x2c
    2fb0:	8d a7       	std	Y+45, r24	; 0x2d
    2fb2:	9e a7       	std	Y+46, r25	; 0x2e

            curSegLen = sqrt(curSegLenSq);
    2fb4:	c5 01       	movw	r24, r10
    2fb6:	b4 01       	movw	r22, r8
    2fb8:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <sqrt>
    2fbc:	36 2f       	mov	r19, r22
    2fbe:	27 2f       	mov	r18, r23
    2fc0:	46 2f       	mov	r20, r22
    2fc2:	57 2f       	mov	r21, r23
    2fc4:	bc 01       	movw	r22, r24
    2fc6:	40 93 cf 06 	sts	0x06CF, r20	; 0x8006cf <curSegLen>
    2fca:	50 93 d0 06 	sts	0x06D0, r21	; 0x8006d0 <curSegLen+0x1>
    2fce:	60 93 d1 06 	sts	0x06D1, r22	; 0x8006d1 <curSegLen+0x2>
    2fd2:	70 93 d2 06 	sts	0x06D2, r23	; 0x8006d2 <curSegLen+0x3>
    2fd6:	63 2f       	mov	r22, r19
    2fd8:	72 2f       	mov	r23, r18
        }

        // update the remaining local variables
        relL = pathFollower_lookaheadDistance / curSegLen;
    2fda:	9b 01       	movw	r18, r22
    2fdc:	ac 01       	movw	r20, r24
    2fde:	60 91 2e 02 	lds	r22, 0x022E	; 0x80022e <pathFollower_lookaheadDistance>
    2fe2:	70 91 2f 02 	lds	r23, 0x022F	; 0x80022f <pathFollower_lookaheadDistance+0x1>
    2fe6:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <pathFollower_lookaheadDistance+0x2>
    2fea:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <pathFollower_lookaheadDistance+0x3>
    2fee:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__divsf3>
    2ff2:	6b 01       	movw	r12, r22
    2ff4:	7c 01       	movw	r14, r24
    2ff6:	60 93 b7 06 	sts	0x06B7, r22	; 0x8006b7 <relL>
    2ffa:	70 93 b8 06 	sts	0x06B8, r23	; 0x8006b8 <relL+0x1>
    2ffe:	80 93 b9 06 	sts	0x06B9, r24	; 0x8006b9 <relL+0x2>
    3002:	90 93 ba 06 	sts	0x06BA, r25	; 0x8006ba <relL+0x3>

        nextSegEnd = *(++pathPtr); // equals path[minSeg + 2]
    3006:	ed 81       	ldd	r30, Y+5	; 0x05
    3008:	fe 81       	ldd	r31, Y+6	; 0x06
    300a:	84 81       	ldd	r24, Z+4	; 0x04
    300c:	95 81       	ldd	r25, Z+5	; 0x05
    300e:	a6 81       	ldd	r26, Z+6	; 0x06
    3010:	b7 81       	ldd	r27, Z+7	; 0x07
    3012:	80 93 cb 06 	sts	0x06CB, r24	; 0x8006cb <nextSegEnd>
    3016:	90 93 cc 06 	sts	0x06CC, r25	; 0x8006cc <nextSegEnd+0x1>
    301a:	a0 93 cd 06 	sts	0x06CD, r26	; 0x8006cd <nextSegEnd+0x2>
    301e:	b0 93 ce 06 	sts	0x06CE, r27	; 0x8006ce <nextSegEnd+0x3>
        nextSegVec.x = nextSegEnd.x - pathFollower_status.segEnd.x;
    3022:	bc 01       	movw	r22, r24
    3024:	62 19       	sub	r22, r2
    3026:	73 09       	sbc	r23, r3
    3028:	07 2e       	mov	r0, r23
    302a:	00 0c       	add	r0, r0
    302c:	88 0b       	sbc	r24, r24
    302e:	99 0b       	sbc	r25, r25
    3030:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
    3034:	2b 01       	movw	r4, r22
    3036:	3c 01       	movw	r6, r24
    3038:	60 93 c3 06 	sts	0x06C3, r22	; 0x8006c3 <nextSegVec>
    303c:	70 93 c4 06 	sts	0x06C4, r23	; 0x8006c4 <nextSegVec+0x1>
    3040:	80 93 c5 06 	sts	0x06C5, r24	; 0x8006c5 <nextSegVec+0x2>
    3044:	90 93 c6 06 	sts	0x06C6, r25	; 0x8006c6 <nextSegVec+0x3>
        nextSegVec.y = nextSegEnd.y - pathFollower_status.segEnd.y;
    3048:	60 91 cd 06 	lds	r22, 0x06CD	; 0x8006cd <nextSegEnd+0x2>
    304c:	70 91 ce 06 	lds	r23, 0x06CE	; 0x8006ce <nextSegEnd+0x3>
    3050:	29 85       	ldd	r18, Y+9	; 0x09
    3052:	3a 85       	ldd	r19, Y+10	; 0x0a
    3054:	62 1b       	sub	r22, r18
    3056:	73 0b       	sbc	r23, r19
    3058:	07 2e       	mov	r0, r23
    305a:	00 0c       	add	r0, r0
    305c:	88 0b       	sbc	r24, r24
    305e:	99 0b       	sbc	r25, r25
    3060:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
    3064:	4b 01       	movw	r8, r22
    3066:	5c 01       	movw	r10, r24
    3068:	60 93 c7 06 	sts	0x06C7, r22	; 0x8006c7 <nextSegVec+0x4>
    306c:	70 93 c8 06 	sts	0x06C8, r23	; 0x8006c8 <nextSegVec+0x5>
    3070:	80 93 c9 06 	sts	0x06C9, r24	; 0x8006c9 <nextSegVec+0x6>
    3074:	90 93 ca 06 	sts	0x06CA, r25	; 0x8006ca <nextSegVec+0x7>

// *************************** LOCAL FUNCTIONS *********************************

// compute squared length of a vector
static inline float sqLen(const FPoint_t vec) {
    return square(vec.x) + square(vec.y);
    3078:	c3 01       	movw	r24, r6
    307a:	b2 01       	movw	r22, r4
    307c:	0e 94 21 20 	call	0x4042	; 0x4042 <square>
    3080:	2b 01       	movw	r4, r22
    3082:	3c 01       	movw	r6, r24
    3084:	c5 01       	movw	r24, r10
    3086:	b4 01       	movw	r22, r8
    3088:	0e 94 21 20 	call	0x4042	; 0x4042 <square>
    308c:	9b 01       	movw	r18, r22
    308e:	ac 01       	movw	r20, r24
    3090:	c3 01       	movw	r24, r6
    3092:	b2 01       	movw	r22, r4
    3094:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__addsf3>
        relL = pathFollower_lookaheadDistance / curSegLen;

        nextSegEnd = *(++pathPtr); // equals path[minSeg + 2]
        nextSegVec.x = nextSegEnd.x - pathFollower_status.segEnd.x;
        nextSegVec.y = nextSegEnd.y - pathFollower_status.segEnd.y;
        nextSegLenSq = sqLen(nextSegVec);
    3098:	60 93 bf 06 	sts	0x06BF, r22	; 0x8006bf <nextSegLenSq>
    309c:	70 93 c0 06 	sts	0x06C0, r23	; 0x8006c0 <nextSegLenSq+0x1>
    30a0:	80 93 c1 06 	sts	0x06C1, r24	; 0x8006c1 <nextSegLenSq+0x2>
    30a4:	90 93 c2 06 	sts	0x06C2, r25	; 0x8006c2 <nextSegLenSq+0x3>
        nextSegLen = sqrt(nextSegLenSq);
    30a8:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <sqrt>
    30ac:	60 93 bb 06 	sts	0x06BB, r22	; 0x8006bb <nextSegLen>
    30b0:	70 93 bc 06 	sts	0x06BC, r23	; 0x8006bc <nextSegLen+0x1>
    30b4:	80 93 bd 06 	sts	0x06BD, r24	; 0x8006bd <nextSegLen+0x2>
    30b8:	90 93 be 06 	sts	0x06BE, r25	; 0x8006be <nextSegLen+0x3>

        curSeg = minSeg;
    30bc:	49 a5       	ldd	r20, Y+41	; 0x29
    30be:	5a a5       	ldd	r21, Y+42	; 0x2a
    30c0:	50 93 2c 02 	sts	0x022C, r21	; 0x80022c <curSeg+0x1>
    30c4:	40 93 2b 02 	sts	0x022B, r20	; 0x80022b <curSeg>
    30c8:	50 91 e0 06 	lds	r21, 0x06E0	; 0x8006e0 <pathLength>
    30cc:	5f a3       	std	Y+39, r21	; 0x27
    30ce:	85 2f       	mov	r24, r21
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	98 8f       	std	Y+24, r25	; 0x18
    30d4:	8f 8b       	std	Y+23, r24	; 0x17
    30d6:	a9 a5       	ldd	r26, Y+41	; 0x29
    30d8:	ba a5       	ldd	r27, Y+42	; 0x2a
    30da:	b8 ab       	std	Y+48, r27	; 0x30
    30dc:	af a7       	std	Y+47, r26	; 0x2f
    }


    if (curSeg == pathLength - 2) {
    30de:	8f 89       	ldd	r24, Y+23	; 0x17
    30e0:	98 8d       	ldd	r25, Y+24	; 0x18
    30e2:	02 97       	sbiw	r24, 0x02	; 2
    30e4:	ef a5       	ldd	r30, Y+47	; 0x2f
    30e6:	f8 a9       	ldd	r31, Y+48	; 0x30
    30e8:	8e 17       	cp	r24, r30
    30ea:	9f 07       	cpc	r25, r31
    30ec:	09 f0       	breq	.+2      	; 0x30f0 <pathFollower_update+0xc72>
    30ee:	8a cd       	rjmp	.-1260   	; 0x2c04 <pathFollower_update+0x786>
    	pathFollower_extStatus.onLastSegment = true;
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <pathFollower_extStatus>
    	pathFollower_extStatus.distanceOPToEnd = (1.0f - lCur) * curSegLen;
    30f6:	2b a5       	ldd	r18, Y+43	; 0x2b
    30f8:	3c a5       	ldd	r19, Y+44	; 0x2c
    30fa:	4d a5       	ldd	r20, Y+45	; 0x2d
    30fc:	5e a5       	ldd	r21, Y+46	; 0x2e
    30fe:	60 e0       	ldi	r22, 0x00	; 0
    3100:	70 e0       	ldi	r23, 0x00	; 0
    3102:	80 e8       	ldi	r24, 0x80	; 128
    3104:	9f e3       	ldi	r25, 0x3F	; 63
    3106:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
    310a:	9b 01       	movw	r18, r22
    310c:	ac 01       	movw	r20, r24
    310e:	60 91 cf 06 	lds	r22, 0x06CF	; 0x8006cf <curSegLen>
    3112:	70 91 d0 06 	lds	r23, 0x06D0	; 0x8006d0 <curSegLen+0x1>
    3116:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <curSegLen+0x2>
    311a:	90 91 d2 06 	lds	r25, 0x06D2	; 0x8006d2 <curSegLen+0x3>
    311e:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <__mulsf3>
    3122:	60 93 e6 06 	sts	0x06E6, r22	; 0x8006e6 <pathFollower_extStatus+0x1>
    3126:	70 93 e7 06 	sts	0x06E7, r23	; 0x8006e7 <pathFollower_extStatus+0x2>
    312a:	80 93 e8 06 	sts	0x06E8, r24	; 0x8006e8 <pathFollower_extStatus+0x3>
    312e:	90 93 e9 06 	sts	0x06E9, r25	; 0x8006e9 <pathFollower_extStatus+0x4>
    3132:	68 cd       	rjmp	.-1328   	; 0x2c04 <pathFollower_update+0x786>
        curSegLenSq = sqLen(curSegVec);

        // if the distance between current position and first path point is very small
        if (curSegLenSq < 1.0e-2) {
        	// then already switch to segment between path[0] and path[1]
            nextSegEnd = path[2];
    3134:	80 85       	ldd	r24, Z+8	; 0x08
    3136:	91 85       	ldd	r25, Z+9	; 0x09
    3138:	a2 85       	ldd	r26, Z+10	; 0x0a
    313a:	b3 85       	ldd	r27, Z+11	; 0x0b
    313c:	80 93 cb 06 	sts	0x06CB, r24	; 0x8006cb <nextSegEnd>
    3140:	90 93 cc 06 	sts	0x06CC, r25	; 0x8006cc <nextSegEnd+0x1>
    3144:	a0 93 cd 06 	sts	0x06CD, r26	; 0x8006cd <nextSegEnd+0x2>
    3148:	b0 93 ce 06 	sts	0x06CE, r27	; 0x8006ce <nextSegEnd+0x3>
            pathFollower_status.segEnd = path[1];
    314c:	84 81       	ldd	r24, Z+4	; 0x04
    314e:	95 81       	ldd	r25, Z+5	; 0x05
    3150:	a6 81       	ldd	r26, Z+6	; 0x06
    3152:	b7 81       	ldd	r27, Z+7	; 0x07
    3154:	80 93 ef 06 	sts	0x06EF, r24	; 0x8006ef <pathFollower_status+0x5>
    3158:	90 93 f0 06 	sts	0x06F0, r25	; 0x8006f0 <pathFollower_status+0x6>
    315c:	a0 93 f1 06 	sts	0x06F1, r26	; 0x8006f1 <pathFollower_status+0x7>
    3160:	b0 93 f2 06 	sts	0x06F2, r27	; 0x8006f2 <pathFollower_status+0x8>
            pathFollower_status.segStart = path[0];
    3164:	80 81       	ld	r24, Z
    3166:	91 81       	ldd	r25, Z+1	; 0x01
    3168:	a2 81       	ldd	r26, Z+2	; 0x02
    316a:	b3 81       	ldd	r27, Z+3	; 0x03
    316c:	80 93 eb 06 	sts	0x06EB, r24	; 0x8006eb <pathFollower_status+0x1>
    3170:	90 93 ec 06 	sts	0x06EC, r25	; 0x8006ec <pathFollower_status+0x2>
    3174:	a0 93 ed 06 	sts	0x06ED, r26	; 0x8006ed <pathFollower_status+0x3>
    3178:	b0 93 ee 06 	sts	0x06EE, r27	; 0x8006ee <pathFollower_status+0x4>
            curSegVec.x = pathFollower_status.segEnd.x - pathFollower_status.segStart.x;
    317c:	40 91 ef 06 	lds	r20, 0x06EF	; 0x8006ef <pathFollower_status+0x5>
    3180:	50 91 f0 06 	lds	r21, 0x06F0	; 0x8006f0 <pathFollower_status+0x6>
    3184:	58 8b       	std	Y+16, r21	; 0x10
    3186:	4f 87       	std	Y+15, r20	; 0x0f
    3188:	08 2f       	mov	r16, r24
    318a:	19 2f       	mov	r17, r25
    318c:	ba 01       	movw	r22, r20
    318e:	60 1b       	sub	r22, r16
    3190:	71 0b       	sbc	r23, r17
    3192:	07 2e       	mov	r0, r23
    3194:	00 0c       	add	r0, r0
    3196:	88 0b       	sbc	r24, r24
    3198:	99 0b       	sbc	r25, r25
    319a:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
    319e:	6d 83       	std	Y+5, r22	; 0x05
    31a0:	7e 83       	std	Y+6, r23	; 0x06
    31a2:	8f 83       	std	Y+7, r24	; 0x07
    31a4:	98 87       	std	Y+8, r25	; 0x08
    31a6:	60 93 d7 06 	sts	0x06D7, r22	; 0x8006d7 <curSegVec>
    31aa:	70 93 d8 06 	sts	0x06D8, r23	; 0x8006d8 <curSegVec+0x1>
    31ae:	80 93 d9 06 	sts	0x06D9, r24	; 0x8006d9 <curSegVec+0x2>
    31b2:	90 93 da 06 	sts	0x06DA, r25	; 0x8006da <curSegVec+0x3>
            curSegVec.y = pathFollower_status.segEnd.y - pathFollower_status.segStart.y;
    31b6:	80 90 f1 06 	lds	r8, 0x06F1	; 0x8006f1 <pathFollower_status+0x7>
    31ba:	90 90 f2 06 	lds	r9, 0x06F2	; 0x8006f2 <pathFollower_status+0x8>
    31be:	a0 90 ed 06 	lds	r10, 0x06ED	; 0x8006ed <pathFollower_status+0x3>
    31c2:	b0 90 ee 06 	lds	r11, 0x06EE	; 0x8006ee <pathFollower_status+0x4>
    31c6:	b4 01       	movw	r22, r8
    31c8:	6a 19       	sub	r22, r10
    31ca:	7b 09       	sbc	r23, r11
    31cc:	07 2e       	mov	r0, r23
    31ce:	00 0c       	add	r0, r0
    31d0:	88 0b       	sbc	r24, r24
    31d2:	99 0b       	sbc	r25, r25
    31d4:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
    31d8:	69 83       	std	Y+1, r22	; 0x01
    31da:	7a 83       	std	Y+2, r23	; 0x02
    31dc:	8b 83       	std	Y+3, r24	; 0x03
    31de:	9c 83       	std	Y+4, r25	; 0x04
    31e0:	60 93 db 06 	sts	0x06DB, r22	; 0x8006db <curSegVec+0x4>
    31e4:	70 93 dc 06 	sts	0x06DC, r23	; 0x8006dc <curSegVec+0x5>
    31e8:	80 93 dd 06 	sts	0x06DD, r24	; 0x8006dd <curSegVec+0x6>
    31ec:	90 93 de 06 	sts	0x06DE, r25	; 0x8006de <curSegVec+0x7>

// *************************** LOCAL FUNCTIONS *********************************

// compute squared length of a vector
static inline float sqLen(const FPoint_t vec) {
    return square(vec.x) + square(vec.y);
    31f0:	6d 81       	ldd	r22, Y+5	; 0x05
    31f2:	7e 81       	ldd	r23, Y+6	; 0x06
    31f4:	8f 81       	ldd	r24, Y+7	; 0x07
    31f6:	98 85       	ldd	r25, Y+8	; 0x08
    31f8:	0e 94 21 20 	call	0x4042	; 0x4042 <square>
    31fc:	6b 01       	movw	r12, r22
    31fe:	7c 01       	movw	r14, r24
    3200:	69 81       	ldd	r22, Y+1	; 0x01
    3202:	7a 81       	ldd	r23, Y+2	; 0x02
    3204:	8b 81       	ldd	r24, Y+3	; 0x03
    3206:	9c 81       	ldd	r25, Y+4	; 0x04
    3208:	0e 94 21 20 	call	0x4042	; 0x4042 <square>
    320c:	a7 01       	movw	r20, r14
    320e:	96 01       	movw	r18, r12
    3210:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__addsf3>
    3214:	2b 01       	movw	r4, r22
    3216:	3c 01       	movw	r6, r24
            pathFollower_status.segEnd = path[1];
            pathFollower_status.segStart = path[0];
            curSegVec.x = pathFollower_status.segEnd.x - pathFollower_status.segStart.x;
            curSegVec.y = pathFollower_status.segEnd.y - pathFollower_status.segStart.y;

            curSegLenSq = sqLen(curSegVec);
    3218:	60 93 d3 06 	sts	0x06D3, r22	; 0x8006d3 <curSegLenSq>
    321c:	70 93 d4 06 	sts	0x06D4, r23	; 0x8006d4 <curSegLenSq+0x1>
    3220:	80 93 d5 06 	sts	0x06D5, r24	; 0x8006d5 <curSegLenSq+0x2>
    3224:	90 93 d6 06 	sts	0x06D6, r25	; 0x8006d6 <curSegLenSq+0x3>
            curSeg = 0;
    3228:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <curSeg+0x1>
    322c:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <curSeg>
    3230:	88 e0       	ldi	r24, 0x08	; 8
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	98 a7       	std	Y+40, r25	; 0x28
    3236:	8f a3       	std	Y+39, r24	; 0x27
    3238:	22 24       	eor	r2, r2
    323a:	23 94       	inc	r2
    323c:	31 2c       	mov	r3, r1
    323e:	18 aa       	std	Y+48, r1	; 0x30
    3240:	1f a6       	std	Y+47, r1	; 0x2f
    3242:	3a cc       	rjmp	.-1932   	; 0x2ab8 <pathFollower_update+0x63a>
        Point_t* pathPtr = &path[minSeg];

        // if a switch to the next segment is needed, some required variables
        // are stored already in local variables
        if (minSeg == curSeg + 1) {
            ++pathPtr; // advance by one, since access to path[minSeg + 2] is required after this block
    3244:	9f 01       	movw	r18, r30
    3246:	2c 5f       	subi	r18, 0xFC	; 252
    3248:	3f 4f       	sbci	r19, 0xFF	; 255
    324a:	3e 83       	std	Y+6, r19	; 0x06
    324c:	2d 83       	std	Y+5, r18	; 0x05
            lCur = lNext;
            curSegLenSq = nextSegLenSq;
    324e:	80 91 bf 06 	lds	r24, 0x06BF	; 0x8006bf <nextSegLenSq>
    3252:	90 91 c0 06 	lds	r25, 0x06C0	; 0x8006c0 <nextSegLenSq+0x1>
    3256:	a0 91 c1 06 	lds	r26, 0x06C1	; 0x8006c1 <nextSegLenSq+0x2>
    325a:	b0 91 c2 06 	lds	r27, 0x06C2	; 0x8006c2 <nextSegLenSq+0x3>
    325e:	80 93 d3 06 	sts	0x06D3, r24	; 0x8006d3 <curSegLenSq>
    3262:	90 93 d4 06 	sts	0x06D4, r25	; 0x8006d4 <curSegLenSq+0x1>
    3266:	a0 93 d5 06 	sts	0x06D5, r26	; 0x8006d5 <curSegLenSq+0x2>
    326a:	b0 93 d6 06 	sts	0x06D6, r27	; 0x8006d6 <curSegLenSq+0x3>
            curSegVec = nextSegVec;
    326e:	88 e0       	ldi	r24, 0x08	; 8
    3270:	e3 ec       	ldi	r30, 0xC3	; 195
    3272:	f6 e0       	ldi	r31, 0x06	; 6
    3274:	a7 ed       	ldi	r26, 0xD7	; 215
    3276:	b6 e0       	ldi	r27, 0x06	; 6
    3278:	01 90       	ld	r0, Z+
    327a:	0d 92       	st	X+, r0
    327c:	8a 95       	dec	r24
    327e:	e1 f7       	brne	.-8      	; 0x3278 <pathFollower_update+0xdfa>
            pathFollower_status.segStart = pathFollower_status.segEnd;
    3280:	80 91 ef 06 	lds	r24, 0x06EF	; 0x8006ef <pathFollower_status+0x5>
    3284:	90 91 f0 06 	lds	r25, 0x06F0	; 0x8006f0 <pathFollower_status+0x6>
    3288:	a0 91 f1 06 	lds	r26, 0x06F1	; 0x8006f1 <pathFollower_status+0x7>
    328c:	b0 91 f2 06 	lds	r27, 0x06F2	; 0x8006f2 <pathFollower_status+0x8>
    3290:	80 93 eb 06 	sts	0x06EB, r24	; 0x8006eb <pathFollower_status+0x1>
    3294:	90 93 ec 06 	sts	0x06EC, r25	; 0x8006ec <pathFollower_status+0x2>
    3298:	a0 93 ed 06 	sts	0x06ED, r26	; 0x8006ed <pathFollower_status+0x3>
    329c:	b0 93 ee 06 	sts	0x06EE, r27	; 0x8006ee <pathFollower_status+0x4>
            pathFollower_status.segEnd = nextSegEnd;
    32a0:	80 91 cb 06 	lds	r24, 0x06CB	; 0x8006cb <nextSegEnd>
    32a4:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <nextSegEnd+0x1>
    32a8:	a0 91 cd 06 	lds	r26, 0x06CD	; 0x8006cd <nextSegEnd+0x2>
    32ac:	b0 91 ce 06 	lds	r27, 0x06CE	; 0x8006ce <nextSegEnd+0x3>
    32b0:	58 2f       	mov	r21, r24
    32b2:	49 2f       	mov	r20, r25
    32b4:	80 93 ef 06 	sts	0x06EF, r24	; 0x8006ef <pathFollower_status+0x5>
    32b8:	90 93 f0 06 	sts	0x06F0, r25	; 0x8006f0 <pathFollower_status+0x6>
    32bc:	a0 93 f1 06 	sts	0x06F1, r26	; 0x8006f1 <pathFollower_status+0x7>
    32c0:	b0 93 f2 06 	sts	0x06F2, r27	; 0x8006f2 <pathFollower_status+0x8>
            curSegLen = nextSegLen;
    32c4:	60 91 bb 06 	lds	r22, 0x06BB	; 0x8006bb <nextSegLen>
    32c8:	70 91 bc 06 	lds	r23, 0x06BC	; 0x8006bc <nextSegLen+0x1>
    32cc:	80 91 bd 06 	lds	r24, 0x06BD	; 0x8006bd <nextSegLen+0x2>
    32d0:	90 91 be 06 	lds	r25, 0x06BE	; 0x8006be <nextSegLen+0x3>
    32d4:	8b 01       	movw	r16, r22
    32d6:	9c 01       	movw	r18, r24
    32d8:	00 93 cf 06 	sts	0x06CF, r16	; 0x8006cf <curSegLen>
    32dc:	10 93 d0 06 	sts	0x06D0, r17	; 0x8006d0 <curSegLen+0x1>
    32e0:	20 93 d1 06 	sts	0x06D1, r18	; 0x8006d1 <curSegLen+0x2>
    32e4:	30 93 d2 06 	sts	0x06D2, r19	; 0x8006d2 <curSegLen+0x3>
    32e8:	25 2e       	mov	r2, r21
    32ea:	34 2e       	mov	r3, r20
    32ec:	40 91 f1 06 	lds	r20, 0x06F1	; 0x8006f1 <pathFollower_status+0x7>
    32f0:	50 91 f2 06 	lds	r21, 0x06F2	; 0x8006f2 <pathFollower_status+0x8>
    32f4:	5a 87       	std	Y+10, r21	; 0x0a
    32f6:	49 87       	std	Y+9, r20	; 0x09

        // if a switch to the next segment is needed, some required variables
        // are stored already in local variables
        if (minSeg == curSeg + 1) {
            ++pathPtr; // advance by one, since access to path[minSeg + 2] is required after this block
            lCur = lNext;
    32f8:	2e a9       	ldd	r18, Y+54	; 0x36
    32fa:	3f a9       	ldd	r19, Y+55	; 0x37
    32fc:	48 ad       	ldd	r20, Y+56	; 0x38
    32fe:	59 ad       	ldd	r21, Y+57	; 0x39
    3300:	2b a7       	std	Y+43, r18	; 0x2b
    3302:	3c a7       	std	Y+44, r19	; 0x2c
    3304:	4d a7       	std	Y+45, r20	; 0x2d
    3306:	5e a7       	std	Y+46, r21	; 0x2e
    3308:	68 ce       	rjmp	.-816    	; 0x2fda <pathFollower_update+0xb5c>
    330a:	af a5       	ldd	r26, Y+47	; 0x2f
    330c:	b8 a9       	ldd	r27, Y+48	; 0x30
    330e:	ba a7       	std	Y+42, r27	; 0x2a
    3310:	a9 a7       	std	Y+41, r26	; 0x29
    3312:	0e ca       	rjmp	.-3044   	; 0x2730 <pathFollower_update+0x2b2>
}


// similar to sqLen(pointVec(vec, l, start))
static inline float sqLenPointVecF(FPoint_t vec, float l, FPoint_t start) {
    return square(fmaf(vec.x, l, start.x)) + square(fmaf(vec.y, l, start.y));
    3314:	83 01       	movw	r16, r6
    3316:	72 01       	movw	r14, r4
    3318:	4e a8       	ldd	r4, Y+54	; 0x36
    331a:	5f a8       	ldd	r5, Y+55	; 0x37
    331c:	68 ac       	ldd	r6, Y+56	; 0x38
    331e:	79 ac       	ldd	r7, Y+57	; 0x39
    3320:	77 fa       	bst	r7, 7
    3322:	70 94       	com	r7
    3324:	77 f8       	bld	r7, 7
    3326:	70 94       	com	r7
    3328:	a3 01       	movw	r20, r6
    332a:	92 01       	movw	r18, r4
    332c:	6f 85       	ldd	r22, Y+15	; 0x0f
    332e:	78 89       	ldd	r23, Y+16	; 0x10
    3330:	89 89       	ldd	r24, Y+17	; 0x11
    3332:	9a 89       	ldd	r25, Y+18	; 0x12
    3334:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <fma>
    3338:	0e 94 21 20 	call	0x4042	; 0x4042 <square>
    333c:	69 83       	std	Y+1, r22	; 0x01
    333e:	7a 83       	std	Y+2, r23	; 0x02
    3340:	8b 83       	std	Y+3, r24	; 0x03
    3342:	9c 83       	std	Y+4, r25	; 0x04
    3344:	85 01       	movw	r16, r10
    3346:	74 01       	movw	r14, r8
    3348:	a3 01       	movw	r20, r6
    334a:	92 01       	movw	r18, r4
    334c:	6b 89       	ldd	r22, Y+19	; 0x13
    334e:	7c 89       	ldd	r23, Y+20	; 0x14
    3350:	8d 89       	ldd	r24, Y+21	; 0x15
    3352:	9e 89       	ldd	r25, Y+22	; 0x16
    3354:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <fma>
    3358:	0e 94 21 20 	call	0x4042	; 0x4042 <square>
    335c:	9b 01       	movw	r18, r22
    335e:	ac 01       	movw	r20, r24
    3360:	69 81       	ldd	r22, Y+1	; 0x01
    3362:	7a 81       	ldd	r23, Y+2	; 0x02
    3364:	8b 81       	ldd	r24, Y+3	; 0x03
    3366:	9c 81       	ldd	r25, Y+4	; 0x04
    3368:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__addsf3>
    336c:	69 83       	std	Y+1, r22	; 0x01
    336e:	7d 83       	std	Y+5, r23	; 0x05
    3370:	18 2f       	mov	r17, r24
    3372:	09 2f       	mov	r16, r25

        // if that distance is smaller than the current minimum distance
        // or if orthogonal projection onto the current segment is already
        // past the current segment (in which case we definitively need to
        // switch at least to the next segment)
        if ((sqDistOPCPNext < minDist) || (lCur > 1.0f) || (minSeg == -1)) {
    3374:	9b 01       	movw	r18, r22
    3376:	48 2f       	mov	r20, r24
    3378:	59 2f       	mov	r21, r25
    337a:	6a a9       	ldd	r22, Y+50	; 0x32
    337c:	7b a9       	ldd	r23, Y+51	; 0x33
    337e:	8c a9       	ldd	r24, Y+52	; 0x34
    3380:	9d a9       	ldd	r25, Y+53	; 0x35
    3382:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <__gesf2>
    3386:	18 16       	cp	r1, r24
    3388:	0c f4       	brge	.+2      	; 0x338c <pathFollower_update+0xf0e>
    338a:	7f c0       	rjmp	.+254    	; 0x348a <pathFollower_update+0x100c>
    338c:	20 e0       	ldi	r18, 0x00	; 0
    338e:	30 e0       	ldi	r19, 0x00	; 0
    3390:	40 e8       	ldi	r20, 0x80	; 128
    3392:	5f e3       	ldi	r21, 0x3F	; 63
    3394:	6b a5       	ldd	r22, Y+43	; 0x2b
    3396:	7c a5       	ldd	r23, Y+44	; 0x2c
    3398:	8d a5       	ldd	r24, Y+45	; 0x2d
    339a:	9e a5       	ldd	r25, Y+46	; 0x2e
    339c:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <__gesf2>
    33a0:	18 16       	cp	r1, r24
    33a2:	0c f0       	brlt	.+2      	; 0x33a6 <pathFollower_update+0xf28>
    33a4:	7b c0       	rjmp	.+246    	; 0x349c <pathFollower_update+0x101e>
            // update minDist and minSeg
            minDist = sqDistOPCPNext;
            ++minSeg;
    33a6:	3a a6       	std	Y+42, r3	; 0x2a
    33a8:	29 a6       	std	Y+41, r2	; 0x29
        // or if orthogonal projection onto the current segment is already
        // past the current segment (in which case we definitively need to
        // switch at least to the next segment)
        if ((sqDistOPCPNext < minDist) || (lCur > 1.0f) || (minSeg == -1)) {
            // update minDist and minSeg
            minDist = sqDistOPCPNext;
    33aa:	39 81       	ldd	r19, Y+1	; 0x01
    33ac:	3a ab       	std	Y+50, r19	; 0x32
    33ae:	4d 81       	ldd	r20, Y+5	; 0x05
    33b0:	4b ab       	std	Y+51, r20	; 0x33
    33b2:	1c ab       	std	Y+52, r17	; 0x34
    33b4:	0d ab       	std	Y+53, r16	; 0x35
    33b6:	bc c9       	rjmp	.-3208   	; 0x2730 <pathFollower_update+0x2b2>
        float Lrem = (relLA - 1.0f) * curSegLen;

        // if lookahead point is on the next segment
        if (Lrem <= nextSegLen) {
            // compute lookahead point on next segment
            pathFollower_status.lookahead = pointVec(nextSegVec, Lrem / nextSegLen, pathFollower_status.segEnd);
    33b8:	c7 01       	movw	r24, r14
    33ba:	b6 01       	movw	r22, r12
    33bc:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__divsf3>
    33c0:	4b 01       	movw	r8, r22
    33c2:	5c 01       	movw	r10, r24
// compute the location of a point on a line in the relative distance l (w.r.t.
// length of vector vec) where the line is determined by its start point start
// and the direction vector vec.
static inline FPoint_t pointVec(FPoint_t vec, float l, Point_t start) {
    // compute FPoint_t p = { (vec.x * l) + start.x, (vec.y * l) + start.y };
    FPoint_t p = { fmaf(vec.x, l, start.x), fmaf(vec.y, l, start.y) };
    33c4:	60 91 ef 06 	lds	r22, 0x06EF	; 0x8006ef <pathFollower_status+0x5>
    33c8:	70 91 f0 06 	lds	r23, 0x06F0	; 0x8006f0 <pathFollower_status+0x6>
    33cc:	07 2e       	mov	r0, r23
    33ce:	00 0c       	add	r0, r0
    33d0:	88 0b       	sbc	r24, r24
    33d2:	99 0b       	sbc	r25, r25
    33d4:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
    33d8:	7b 01       	movw	r14, r22
    33da:	8c 01       	movw	r16, r24
    33dc:	60 91 c3 06 	lds	r22, 0x06C3	; 0x8006c3 <nextSegVec>
    33e0:	70 91 c4 06 	lds	r23, 0x06C4	; 0x8006c4 <nextSegVec+0x1>
    33e4:	80 91 c5 06 	lds	r24, 0x06C5	; 0x8006c5 <nextSegVec+0x2>
    33e8:	90 91 c6 06 	lds	r25, 0x06C6	; 0x8006c6 <nextSegVec+0x3>
    33ec:	a5 01       	movw	r20, r10
    33ee:	94 01       	movw	r18, r8
    33f0:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <fma>
    33f4:	2b 01       	movw	r4, r22
    33f6:	3c 01       	movw	r6, r24
    33f8:	60 91 f1 06 	lds	r22, 0x06F1	; 0x8006f1 <pathFollower_status+0x7>
    33fc:	70 91 f2 06 	lds	r23, 0x06F2	; 0x8006f2 <pathFollower_status+0x8>
    3400:	07 2e       	mov	r0, r23
    3402:	00 0c       	add	r0, r0
    3404:	88 0b       	sbc	r24, r24
    3406:	99 0b       	sbc	r25, r25
    3408:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
    340c:	7b 01       	movw	r14, r22
    340e:	8c 01       	movw	r16, r24
    3410:	60 91 c7 06 	lds	r22, 0x06C7	; 0x8006c7 <nextSegVec+0x4>
    3414:	70 91 c8 06 	lds	r23, 0x06C8	; 0x8006c8 <nextSegVec+0x5>
    3418:	80 91 c9 06 	lds	r24, 0x06C9	; 0x8006c9 <nextSegVec+0x6>
    341c:	90 91 ca 06 	lds	r25, 0x06CA	; 0x8006ca <nextSegVec+0x7>
    3420:	a5 01       	movw	r20, r10
    3422:	94 01       	movw	r18, r8
    3424:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <fma>
        float Lrem = (relLA - 1.0f) * curSegLen;

        // if lookahead point is on the next segment
        if (Lrem <= nextSegLen) {
            // compute lookahead point on next segment
            pathFollower_status.lookahead = pointVec(nextSegVec, Lrem / nextSegLen, pathFollower_status.segEnd);
    3428:	40 92 f3 06 	sts	0x06F3, r4	; 0x8006f3 <pathFollower_status+0x9>
    342c:	50 92 f4 06 	sts	0x06F4, r5	; 0x8006f4 <pathFollower_status+0xa>
    3430:	60 92 f5 06 	sts	0x06F5, r6	; 0x8006f5 <pathFollower_status+0xb>
    3434:	70 92 f6 06 	sts	0x06F6, r7	; 0x8006f6 <pathFollower_status+0xc>
    3438:	60 93 f7 06 	sts	0x06F7, r22	; 0x8006f7 <pathFollower_status+0xd>
    343c:	70 93 f8 06 	sts	0x06F8, r23	; 0x8006f8 <pathFollower_status+0xe>
    3440:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <pathFollower_status+0xf>
    3444:	90 93 fa 06 	sts	0x06FA, r25	; 0x8006fa <pathFollower_status+0x10>
    3448:	73 ca       	rjmp	.-2842   	; 0x2930 <pathFollower_update+0x4b2>
        segStart = segEnd;
    }

    // if minSeg hit the maximum, output an error (note that this should not happen)
    if (minSeg == pathLength) {
        pathFollowerErrorP("Unable to locate segment for orthogonal projection");
    344a:	8a e7       	ldi	r24, 0x7A	; 122
    344c:	91 e0       	ldi	r25, 0x01	; 1
    344e:	9f 93       	push	r25
    3450:	8f 93       	push	r24
    3452:	1f 92       	push	r1
    3454:	0e 94 3f 10 	call	0x207e	; 0x207e <communication_log_P>
    3458:	b0 91 e0 06 	lds	r27, 0x06E0	; 0x8006e0 <pathLength>
    345c:	bf a3       	std	Y+39, r27	; 0x27
    345e:	eb 2f       	mov	r30, r27
    3460:	f0 e0       	ldi	r31, 0x00	; 0
    3462:	f8 8f       	std	Y+24, r31	; 0x18
    3464:	ef 8b       	std	Y+23, r30	; 0x17
    3466:	20 91 2b 02 	lds	r18, 0x022B	; 0x80022b <curSeg>
    346a:	30 91 2c 02 	lds	r19, 0x022C	; 0x80022c <curSeg+0x1>
    346e:	38 ab       	std	Y+48, r19	; 0x30
    3470:	2f a7       	std	Y+47, r18	; 0x2f
    3472:	c0 90 b7 06 	lds	r12, 0x06B7	; 0x8006b7 <relL>
    3476:	d0 90 b8 06 	lds	r13, 0x06B8	; 0x8006b8 <relL+0x1>
    347a:	e0 90 b9 06 	lds	r14, 0x06B9	; 0x8006b9 <relL+0x2>
    347e:	f0 90 ba 06 	lds	r15, 0x06BA	; 0x8006ba <relL+0x3>
    3482:	0f 90       	pop	r0
    3484:	0f 90       	pop	r0
    3486:	0f 90       	pop	r0
    3488:	b4 cb       	rjmp	.-2200   	; 0x2bf2 <pathFollower_update+0x774>
        // past the current segment (in which case we definitively need to
        // switch at least to the next segment)
        if ((sqDistOPCPNext < minDist) || (lCur > 1.0f) || (minSeg == -1)) {
            // update minDist and minSeg
            minDist = sqDistOPCPNext;
            ++minSeg;
    348a:	3a a6       	std	Y+42, r3	; 0x2a
    348c:	29 a6       	std	Y+41, r2	; 0x29
        // or if orthogonal projection onto the current segment is already
        // past the current segment (in which case we definitively need to
        // switch at least to the next segment)
        if ((sqDistOPCPNext < minDist) || (lCur > 1.0f) || (minSeg == -1)) {
            // update minDist and minSeg
            minDist = sqDistOPCPNext;
    348e:	f9 81       	ldd	r31, Y+1	; 0x01
    3490:	fa ab       	std	Y+50, r31	; 0x32
    3492:	2d 81       	ldd	r18, Y+5	; 0x05
    3494:	2b ab       	std	Y+51, r18	; 0x33
    3496:	1c ab       	std	Y+52, r17	; 0x34
    3498:	0d ab       	std	Y+53, r16	; 0x35
    349a:	4a c9       	rjmp	.-3436   	; 0x2730 <pathFollower_update+0x2b2>

        // if that distance is smaller than the current minimum distance
        // or if orthogonal projection onto the current segment is already
        // past the current segment (in which case we definitively need to
        // switch at least to the next segment)
        if ((sqDistOPCPNext < minDist) || (lCur > 1.0f) || (minSeg == -1)) {
    349c:	2f a5       	ldd	r18, Y+47	; 0x2f
    349e:	38 a9       	ldd	r19, Y+48	; 0x30
    34a0:	2f 3f       	cpi	r18, 0xFF	; 255
    34a2:	3f 4f       	sbci	r19, 0xFF	; 255
    34a4:	09 f4       	brne	.+2      	; 0x34a8 <pathFollower_update+0x102a>
    34a6:	48 c0       	rjmp	.+144    	; 0x3538 <pathFollower_update+0x10ba>
    34a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    34aa:	98 a9       	ldd	r25, Y+48	; 0x30
    34ac:	9a a7       	std	Y+42, r25	; 0x2a
    34ae:	89 a7       	std	Y+41, r24	; 0x29
    34b0:	3f c9       	rjmp	.-3458   	; 0x2730 <pathFollower_update+0x2b2>
// compute the location of a point on a line in the relative distance l (w.r.t.
// length of vector vec) where the line is determined by its start point start
// and the direction vector vec.
static inline FPoint_t pointVec(FPoint_t vec, float l, Point_t start) {
    // compute FPoint_t p = { (vec.x * l) + start.x, (vec.y * l) + start.y };
    FPoint_t p = { fmaf(vec.x, l, start.x), fmaf(vec.y, l, start.y) };
    34b2:	60 91 eb 06 	lds	r22, 0x06EB	; 0x8006eb <pathFollower_status+0x1>
    34b6:	70 91 ec 06 	lds	r23, 0x06EC	; 0x8006ec <pathFollower_status+0x2>
    34ba:	07 2e       	mov	r0, r23
    34bc:	00 0c       	add	r0, r0
    34be:	88 0b       	sbc	r24, r24
    34c0:	99 0b       	sbc	r25, r25
    34c2:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
    34c6:	7b 01       	movw	r14, r22
    34c8:	8c 01       	movw	r16, r24
    34ca:	60 91 d7 06 	lds	r22, 0x06D7	; 0x8006d7 <curSegVec>
    34ce:	70 91 d8 06 	lds	r23, 0x06D8	; 0x8006d8 <curSegVec+0x1>
    34d2:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <curSegVec+0x2>
    34d6:	90 91 da 06 	lds	r25, 0x06DA	; 0x8006da <curSegVec+0x3>
    34da:	a5 01       	movw	r20, r10
    34dc:	94 01       	movw	r18, r8
    34de:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <fma>
    34e2:	2b 01       	movw	r4, r22
    34e4:	3c 01       	movw	r6, r24
    34e6:	60 91 ed 06 	lds	r22, 0x06ED	; 0x8006ed <pathFollower_status+0x3>
    34ea:	70 91 ee 06 	lds	r23, 0x06EE	; 0x8006ee <pathFollower_status+0x4>
    34ee:	07 2e       	mov	r0, r23
    34f0:	00 0c       	add	r0, r0
    34f2:	88 0b       	sbc	r24, r24
    34f4:	99 0b       	sbc	r25, r25
    34f6:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__floatsisf>
    34fa:	7b 01       	movw	r14, r22
    34fc:	8c 01       	movw	r16, r24
    34fe:	60 91 db 06 	lds	r22, 0x06DB	; 0x8006db <curSegVec+0x4>
    3502:	70 91 dc 06 	lds	r23, 0x06DC	; 0x8006dc <curSegVec+0x5>
    3506:	80 91 dd 06 	lds	r24, 0x06DD	; 0x8006dd <curSegVec+0x6>
    350a:	90 91 de 06 	lds	r25, 0x06DE	; 0x8006de <curSegVec+0x7>
    350e:	a5 01       	movw	r20, r10
    3510:	94 01       	movw	r18, r8
    3512:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <fma>

    // if lookahead point is on the current segment
    if (relLA <= 1.0f) {

        // compute lookahead point on current segment
        pathFollower_status.lookahead = pointVec(curSegVec, relLA, pathFollower_status.segStart);
    3516:	40 92 f3 06 	sts	0x06F3, r4	; 0x8006f3 <pathFollower_status+0x9>
    351a:	50 92 f4 06 	sts	0x06F4, r5	; 0x8006f4 <pathFollower_status+0xa>
    351e:	60 92 f5 06 	sts	0x06F5, r6	; 0x8006f5 <pathFollower_status+0xb>
    3522:	70 92 f6 06 	sts	0x06F6, r7	; 0x8006f6 <pathFollower_status+0xc>
    3526:	60 93 f7 06 	sts	0x06F7, r22	; 0x8006f7 <pathFollower_status+0xd>
    352a:	70 93 f8 06 	sts	0x06F8, r23	; 0x8006f8 <pathFollower_status+0xe>
    352e:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <pathFollower_status+0xf>
    3532:	90 93 fa 06 	sts	0x06FA, r25	; 0x8006fa <pathFollower_status+0x10>
    3536:	fc c9       	rjmp	.-3080   	; 0x2930 <pathFollower_update+0x4b2>
        // past the current segment (in which case we definitively need to
        // switch at least to the next segment)
        if ((sqDistOPCPNext < minDist) || (lCur > 1.0f) || (minSeg == -1)) {
            // update minDist and minSeg
            minDist = sqDistOPCPNext;
            ++minSeg;
    3538:	3a a6       	std	Y+42, r3	; 0x2a
    353a:	29 a6       	std	Y+41, r2	; 0x29
        // or if orthogonal projection onto the current segment is already
        // past the current segment (in which case we definitively need to
        // switch at least to the next segment)
        if ((sqDistOPCPNext < minDist) || (lCur > 1.0f) || (minSeg == -1)) {
            // update minDist and minSeg
            minDist = sqDistOPCPNext;
    353c:	59 81       	ldd	r21, Y+1	; 0x01
    353e:	5a ab       	std	Y+50, r21	; 0x32
    3540:	8d 81       	ldd	r24, Y+5	; 0x05
    3542:	8b ab       	std	Y+51, r24	; 0x33
    3544:	1c ab       	std	Y+52, r17	; 0x34
    3546:	0d ab       	std	Y+53, r16	; 0x35
    3548:	f3 c8       	rjmp	.-3610   	; 0x2730 <pathFollower_update+0x2b2>

0000354a <pathFollower_getStatus>:
}


const PathFollowerStatus_t* pathFollower_getStatus(void) {
	return &pathFollower_status;
}
    354a:	8a ee       	ldi	r24, 0xEA	; 234
    354c:	96 e0       	ldi	r25, 0x06	; 6
    354e:	08 95       	ret

00003550 <labyrinth_getWallIndex.part.0>:
	 SET_WALL((i+1), labyrinthWalls.walls);
 }
 
 
 void labyrinth_clearAllWalls(void) {
	 memset(&labyrinthWalls.walls, 0, sizeof(labyrinthWalls.walls));
    3550:	41 30       	cpi	r20, 0x01	; 1
    3552:	b1 f0       	breq	.+44     	; 0x3580 <labyrinth_getWallIndex.part.0+0x30>
    3554:	42 30       	cpi	r20, 0x02	; 2
    3556:	f1 f0       	breq	.+60     	; 0x3594 <labyrinth_getWallIndex.part.0+0x44>
    3558:	43 30       	cpi	r20, 0x03	; 3
    355a:	99 f0       	breq	.+38     	; 0x3582 <labyrinth_getWallIndex.part.0+0x32>
    355c:	44 23       	and	r20, r20
    355e:	19 f0       	breq	.+6      	; 0x3566 <labyrinth_getWallIndex.part.0+0x16>
    3560:	80 e0       	ldi	r24, 0x00	; 0
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	08 95       	ret
    3566:	28 2f       	mov	r18, r24
    3568:	86 2f       	mov	r24, r22
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	88 0f       	add	r24, r24
    356e:	99 1f       	adc	r25, r25
    3570:	88 0f       	add	r24, r24
    3572:	99 1f       	adc	r25, r25
    3574:	88 0f       	add	r24, r24
    3576:	99 1f       	adc	r25, r25
    3578:	c8 96       	adiw	r24, 0x38	; 56
    357a:	82 0f       	add	r24, r18
    357c:	91 1d       	adc	r25, r1
    357e:	08 95       	ret
    3580:	6f 5f       	subi	r22, 0xFF	; 255
    3582:	70 e0       	ldi	r23, 0x00	; 0
    3584:	9b 01       	movw	r18, r22
    3586:	48 e0       	ldi	r20, 0x08	; 8
    3588:	84 9f       	mul	r24, r20
    358a:	20 0d       	add	r18, r0
    358c:	31 1d       	adc	r19, r1
    358e:	11 24       	eor	r1, r1
    3590:	c9 01       	movw	r24, r18
    3592:	08 95       	ret
    3594:	21 e0       	ldi	r18, 0x01	; 1
    3596:	28 0f       	add	r18, r24
    3598:	e7 cf       	rjmp	.-50     	; 0x3568 <labyrinth_getWallIndex.part.0+0x18>

0000359a <labyrinth_getWalls>:
    359a:	1f 93       	push	r17
    359c:	cf 93       	push	r28
    359e:	df 93       	push	r29
    35a0:	87 30       	cpi	r24, 0x07	; 7
    35a2:	28 f0       	brcs	.+10     	; 0x35ae <labyrinth_getWalls+0x14>
    35a4:	80 e0       	ldi	r24, 0x00	; 0
    35a6:	df 91       	pop	r29
    35a8:	cf 91       	pop	r28
    35aa:	1f 91       	pop	r17
    35ac:	08 95       	ret
    35ae:	67 30       	cpi	r22, 0x07	; 7
    35b0:	c8 f7       	brcc	.-14     	; 0x35a4 <labyrinth_getWalls+0xa>
    35b2:	16 2f       	mov	r17, r22
    35b4:	d8 2f       	mov	r29, r24
    35b6:	43 e0       	ldi	r20, 0x03	; 3
    35b8:	0e 94 a8 1a 	call	0x3550	; 0x3550 <labyrinth_getWallIndex.part.0>
    35bc:	8f 3f       	cpi	r24, 0xFF	; 255
    35be:	2f ef       	ldi	r18, 0xFF	; 255
    35c0:	92 07       	cpc	r25, r18
    35c2:	81 f3       	breq	.-32     	; 0x35a4 <labyrinth_getWalls+0xa>
    35c4:	fc 01       	movw	r30, r24
    35c6:	f6 95       	lsr	r31
    35c8:	e7 95       	ror	r30
    35ca:	f6 95       	lsr	r31
    35cc:	e7 95       	ror	r30
    35ce:	f6 95       	lsr	r31
    35d0:	e7 95       	ror	r30
    35d2:	e5 50       	subi	r30, 0x05	; 5
    35d4:	f9 4f       	sbci	r31, 0xF9	; 249
    35d6:	22 81       	ldd	r18, Z+2	; 0x02
    35d8:	30 e0       	ldi	r19, 0x00	; 0
    35da:	ac 01       	movw	r20, r24
    35dc:	47 70       	andi	r20, 0x07	; 7
    35de:	55 27       	eor	r21, r21
    35e0:	02 c0       	rjmp	.+4      	; 0x35e6 <labyrinth_getWalls+0x4c>
    35e2:	35 95       	asr	r19
    35e4:	27 95       	ror	r18
    35e6:	4a 95       	dec	r20
    35e8:	e2 f7       	brpl	.-8      	; 0x35e2 <labyrinth_getWalls+0x48>
    35ea:	c0 e0       	ldi	r28, 0x00	; 0
    35ec:	20 fb       	bst	r18, 0
    35ee:	c3 f9       	bld	r28, 3
    35f0:	01 96       	adiw	r24, 0x01	; 1
    35f2:	fc 01       	movw	r30, r24
    35f4:	f6 95       	lsr	r31
    35f6:	e7 95       	ror	r30
    35f8:	f6 95       	lsr	r31
    35fa:	e7 95       	ror	r30
    35fc:	f6 95       	lsr	r31
    35fe:	e7 95       	ror	r30
    3600:	e5 50       	subi	r30, 0x05	; 5
    3602:	f9 4f       	sbci	r31, 0xF9	; 249
    3604:	22 81       	ldd	r18, Z+2	; 0x02
    3606:	30 e0       	ldi	r19, 0x00	; 0
    3608:	87 70       	andi	r24, 0x07	; 7
    360a:	99 27       	eor	r25, r25
    360c:	02 c0       	rjmp	.+4      	; 0x3612 <labyrinth_getWalls+0x78>
    360e:	35 95       	asr	r19
    3610:	27 95       	ror	r18
    3612:	8a 95       	dec	r24
    3614:	e2 f7       	brpl	.-8      	; 0x360e <labyrinth_getWalls+0x74>
    3616:	20 fb       	bst	r18, 0
    3618:	c1 f9       	bld	r28, 1
    361a:	40 e0       	ldi	r20, 0x00	; 0
    361c:	61 2f       	mov	r22, r17
    361e:	8d 2f       	mov	r24, r29
    3620:	0e 94 a8 1a 	call	0x3550	; 0x3550 <labyrinth_getWallIndex.part.0>
    3624:	fc 01       	movw	r30, r24
    3626:	f6 95       	lsr	r31
    3628:	e7 95       	ror	r30
    362a:	f6 95       	lsr	r31
    362c:	e7 95       	ror	r30
    362e:	f6 95       	lsr	r31
    3630:	e7 95       	ror	r30
    3632:	e5 50       	subi	r30, 0x05	; 5
    3634:	f9 4f       	sbci	r31, 0xF9	; 249
    3636:	22 81       	ldd	r18, Z+2	; 0x02
    3638:	30 e0       	ldi	r19, 0x00	; 0
    363a:	ac 01       	movw	r20, r24
    363c:	47 70       	andi	r20, 0x07	; 7
    363e:	55 27       	eor	r21, r21
    3640:	02 c0       	rjmp	.+4      	; 0x3646 <labyrinth_getWalls+0xac>
    3642:	35 95       	asr	r19
    3644:	27 95       	ror	r18
    3646:	4a 95       	dec	r20
    3648:	e2 f7       	brpl	.-8      	; 0x3642 <labyrinth_getWalls+0xa8>
    364a:	20 fb       	bst	r18, 0
    364c:	c0 f9       	bld	r28, 0
    364e:	01 96       	adiw	r24, 0x01	; 1
    3650:	fc 01       	movw	r30, r24
    3652:	f6 95       	lsr	r31
    3654:	e7 95       	ror	r30
    3656:	f6 95       	lsr	r31
    3658:	e7 95       	ror	r30
    365a:	f6 95       	lsr	r31
    365c:	e7 95       	ror	r30
    365e:	e5 50       	subi	r30, 0x05	; 5
    3660:	f9 4f       	sbci	r31, 0xF9	; 249
    3662:	22 81       	ldd	r18, Z+2	; 0x02
    3664:	30 e0       	ldi	r19, 0x00	; 0
    3666:	87 70       	andi	r24, 0x07	; 7
    3668:	99 27       	eor	r25, r25
    366a:	a9 01       	movw	r20, r18
    366c:	02 c0       	rjmp	.+4      	; 0x3672 <labyrinth_getWalls+0xd8>
    366e:	55 95       	asr	r21
    3670:	47 95       	ror	r20
    3672:	8a 95       	dec	r24
    3674:	e2 f7       	brpl	.-8      	; 0x366e <labyrinth_getWalls+0xd4>
    3676:	40 fb       	bst	r20, 0
    3678:	c2 f9       	bld	r28, 2
    367a:	8c 2f       	mov	r24, r28
    367c:	df 91       	pop	r29
    367e:	cf 91       	pop	r28
    3680:	1f 91       	pop	r17
    3682:	08 95       	ret

00003684 <labyrinth_setWalls>:
    3684:	1f 93       	push	r17
    3686:	cf 93       	push	r28
    3688:	df 93       	push	r29
    368a:	87 30       	cpi	r24, 0x07	; 7
    368c:	08 f0       	brcs	.+2      	; 0x3690 <labyrinth_setWalls+0xc>
    368e:	74 c0       	rjmp	.+232    	; 0x3778 <labyrinth_setWalls+0xf4>
    3690:	67 30       	cpi	r22, 0x07	; 7
    3692:	08 f0       	brcs	.+2      	; 0x3696 <labyrinth_setWalls+0x12>
    3694:	71 c0       	rjmp	.+226    	; 0x3778 <labyrinth_setWalls+0xf4>
    3696:	c4 2f       	mov	r28, r20
    3698:	16 2f       	mov	r17, r22
    369a:	d8 2f       	mov	r29, r24
    369c:	43 e0       	ldi	r20, 0x03	; 3
    369e:	0e 94 a8 1a 	call	0x3550	; 0x3550 <labyrinth_getWallIndex.part.0>
    36a2:	8f 3f       	cpi	r24, 0xFF	; 255
    36a4:	2f ef       	ldi	r18, 0xFF	; 255
    36a6:	92 07       	cpc	r25, r18
    36a8:	09 f4       	brne	.+2      	; 0x36ac <labyrinth_setWalls+0x28>
    36aa:	66 c0       	rjmp	.+204    	; 0x3778 <labyrinth_setWalls+0xf4>
    36ac:	fc 01       	movw	r30, r24
    36ae:	f6 95       	lsr	r31
    36b0:	e7 95       	ror	r30
    36b2:	f6 95       	lsr	r31
    36b4:	e7 95       	ror	r30
    36b6:	f6 95       	lsr	r31
    36b8:	e7 95       	ror	r30
    36ba:	e5 50       	subi	r30, 0x05	; 5
    36bc:	f9 4f       	sbci	r31, 0xF9	; 249
    36be:	ac 01       	movw	r20, r24
    36c0:	47 70       	andi	r20, 0x07	; 7
    36c2:	55 27       	eor	r21, r21
    36c4:	21 e0       	ldi	r18, 0x01	; 1
    36c6:	30 e0       	ldi	r19, 0x00	; 0
    36c8:	01 c0       	rjmp	.+2      	; 0x36cc <labyrinth_setWalls+0x48>
    36ca:	22 0f       	add	r18, r18
    36cc:	4a 95       	dec	r20
    36ce:	ea f7       	brpl	.-6      	; 0x36ca <labyrinth_setWalls+0x46>
    36d0:	c3 fd       	sbrc	r28, 3
    36d2:	56 c0       	rjmp	.+172    	; 0x3780 <labyrinth_setWalls+0xfc>
    36d4:	20 95       	com	r18
    36d6:	32 81       	ldd	r19, Z+2	; 0x02
    36d8:	23 23       	and	r18, r19
    36da:	22 83       	std	Z+2, r18	; 0x02
    36dc:	01 96       	adiw	r24, 0x01	; 1
    36de:	fc 01       	movw	r30, r24
    36e0:	f6 95       	lsr	r31
    36e2:	e7 95       	ror	r30
    36e4:	f6 95       	lsr	r31
    36e6:	e7 95       	ror	r30
    36e8:	f6 95       	lsr	r31
    36ea:	e7 95       	ror	r30
    36ec:	e5 50       	subi	r30, 0x05	; 5
    36ee:	f9 4f       	sbci	r31, 0xF9	; 249
    36f0:	c1 fd       	sbrc	r28, 1
    36f2:	60 c0       	rjmp	.+192    	; 0x37b4 <labyrinth_setWalls+0x130>
    36f4:	9c 01       	movw	r18, r24
    36f6:	27 70       	andi	r18, 0x07	; 7
    36f8:	33 27       	eor	r19, r19
    36fa:	81 e0       	ldi	r24, 0x01	; 1
    36fc:	90 e0       	ldi	r25, 0x00	; 0
    36fe:	01 c0       	rjmp	.+2      	; 0x3702 <labyrinth_setWalls+0x7e>
    3700:	88 0f       	add	r24, r24
    3702:	2a 95       	dec	r18
    3704:	ea f7       	brpl	.-6      	; 0x3700 <labyrinth_setWalls+0x7c>
    3706:	80 95       	com	r24
    3708:	92 81       	ldd	r25, Z+2	; 0x02
    370a:	89 23       	and	r24, r25
    370c:	82 83       	std	Z+2, r24	; 0x02
    370e:	40 e0       	ldi	r20, 0x00	; 0
    3710:	61 2f       	mov	r22, r17
    3712:	8d 2f       	mov	r24, r29
    3714:	0e 94 a8 1a 	call	0x3550	; 0x3550 <labyrinth_getWallIndex.part.0>
    3718:	c0 fd       	sbrc	r28, 0
    371a:	36 c0       	rjmp	.+108    	; 0x3788 <labyrinth_setWalls+0x104>
    371c:	fc 01       	movw	r30, r24
    371e:	f6 95       	lsr	r31
    3720:	e7 95       	ror	r30
    3722:	f6 95       	lsr	r31
    3724:	e7 95       	ror	r30
    3726:	f6 95       	lsr	r31
    3728:	e7 95       	ror	r30
    372a:	e5 50       	subi	r30, 0x05	; 5
    372c:	f9 4f       	sbci	r31, 0xF9	; 249
    372e:	ac 01       	movw	r20, r24
    3730:	47 70       	andi	r20, 0x07	; 7
    3732:	55 27       	eor	r21, r21
    3734:	21 e0       	ldi	r18, 0x01	; 1
    3736:	30 e0       	ldi	r19, 0x00	; 0
    3738:	01 c0       	rjmp	.+2      	; 0x373c <labyrinth_setWalls+0xb8>
    373a:	22 0f       	add	r18, r18
    373c:	4a 95       	dec	r20
    373e:	ea f7       	brpl	.-6      	; 0x373a <labyrinth_setWalls+0xb6>
    3740:	20 95       	com	r18
    3742:	32 81       	ldd	r19, Z+2	; 0x02
    3744:	23 23       	and	r18, r19
    3746:	22 83       	std	Z+2, r18	; 0x02
    3748:	01 96       	adiw	r24, 0x01	; 1
    374a:	fc 01       	movw	r30, r24
    374c:	f6 95       	lsr	r31
    374e:	e7 95       	ror	r30
    3750:	f6 95       	lsr	r31
    3752:	e7 95       	ror	r30
    3754:	f6 95       	lsr	r31
    3756:	e7 95       	ror	r30
    3758:	e5 50       	subi	r30, 0x05	; 5
    375a:	f9 4f       	sbci	r31, 0xF9	; 249
    375c:	9c 01       	movw	r18, r24
    375e:	27 70       	andi	r18, 0x07	; 7
    3760:	33 27       	eor	r19, r19
    3762:	81 e0       	ldi	r24, 0x01	; 1
    3764:	90 e0       	ldi	r25, 0x00	; 0
    3766:	01 c0       	rjmp	.+2      	; 0x376a <labyrinth_setWalls+0xe6>
    3768:	88 0f       	add	r24, r24
    376a:	2a 95       	dec	r18
    376c:	ea f7       	brpl	.-6      	; 0x3768 <labyrinth_setWalls+0xe4>
    376e:	c2 ff       	sbrs	r28, 2
    3770:	30 c0       	rjmp	.+96     	; 0x37d2 <labyrinth_setWalls+0x14e>
    3772:	92 81       	ldd	r25, Z+2	; 0x02
    3774:	89 2b       	or	r24, r25
    3776:	82 83       	std	Z+2, r24	; 0x02
    3778:	df 91       	pop	r29
    377a:	cf 91       	pop	r28
    377c:	1f 91       	pop	r17
    377e:	08 95       	ret
    3780:	32 81       	ldd	r19, Z+2	; 0x02
    3782:	23 2b       	or	r18, r19
    3784:	22 83       	std	Z+2, r18	; 0x02
    3786:	aa cf       	rjmp	.-172    	; 0x36dc <labyrinth_setWalls+0x58>
    3788:	fc 01       	movw	r30, r24
    378a:	f6 95       	lsr	r31
    378c:	e7 95       	ror	r30
    378e:	f6 95       	lsr	r31
    3790:	e7 95       	ror	r30
    3792:	f6 95       	lsr	r31
    3794:	e7 95       	ror	r30
    3796:	e5 50       	subi	r30, 0x05	; 5
    3798:	f9 4f       	sbci	r31, 0xF9	; 249
    379a:	ac 01       	movw	r20, r24
    379c:	47 70       	andi	r20, 0x07	; 7
    379e:	55 27       	eor	r21, r21
    37a0:	21 e0       	ldi	r18, 0x01	; 1
    37a2:	30 e0       	ldi	r19, 0x00	; 0
    37a4:	01 c0       	rjmp	.+2      	; 0x37a8 <labyrinth_setWalls+0x124>
    37a6:	22 0f       	add	r18, r18
    37a8:	4a 95       	dec	r20
    37aa:	ea f7       	brpl	.-6      	; 0x37a6 <labyrinth_setWalls+0x122>
    37ac:	32 81       	ldd	r19, Z+2	; 0x02
    37ae:	23 2b       	or	r18, r19
    37b0:	22 83       	std	Z+2, r18	; 0x02
    37b2:	ca cf       	rjmp	.-108    	; 0x3748 <labyrinth_setWalls+0xc4>
    37b4:	87 70       	andi	r24, 0x07	; 7
    37b6:	99 27       	eor	r25, r25
    37b8:	21 e0       	ldi	r18, 0x01	; 1
    37ba:	30 e0       	ldi	r19, 0x00	; 0
    37bc:	a9 01       	movw	r20, r18
    37be:	02 c0       	rjmp	.+4      	; 0x37c4 <labyrinth_setWalls+0x140>
    37c0:	44 0f       	add	r20, r20
    37c2:	55 1f       	adc	r21, r21
    37c4:	8a 95       	dec	r24
    37c6:	e2 f7       	brpl	.-8      	; 0x37c0 <labyrinth_setWalls+0x13c>
    37c8:	ca 01       	movw	r24, r20
    37ca:	92 81       	ldd	r25, Z+2	; 0x02
    37cc:	89 2b       	or	r24, r25
    37ce:	82 83       	std	Z+2, r24	; 0x02
    37d0:	9e cf       	rjmp	.-196    	; 0x370e <labyrinth_setWalls+0x8a>
    37d2:	80 95       	com	r24
    37d4:	92 81       	ldd	r25, Z+2	; 0x02
    37d6:	89 23       	and	r24, r25
    37d8:	82 83       	std	Z+2, r24	; 0x02
    37da:	df 91       	pop	r29
    37dc:	cf 91       	pop	r28
    37de:	1f 91       	pop	r17
    37e0:	08 95       	ret

000037e2 <labyrinth_getAllWalls>:
 }
 
 
 const LabyrinthWalls_t* labyrinth_getAllWalls(void) {
	 return &labyrinthWalls;
    37e2:	8b ef       	ldi	r24, 0xFB	; 251
    37e4:	96 e0       	ldi	r25, 0x06	; 6
    37e6:	08 95       	ret

000037e8 <__subsf3>:
    37e8:	50 58       	subi	r21, 0x80	; 128

000037ea <__addsf3>:
    37ea:	bb 27       	eor	r27, r27
    37ec:	aa 27       	eor	r26, r26
    37ee:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__addsf3x>
    37f2:	0c 94 68 1e 	jmp	0x3cd0	; 0x3cd0 <__fp_round>
    37f6:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__fp_pscA>
    37fa:	38 f0       	brcs	.+14     	; 0x380a <__addsf3+0x20>
    37fc:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <__fp_pscB>
    3800:	20 f0       	brcs	.+8      	; 0x380a <__addsf3+0x20>
    3802:	39 f4       	brne	.+14     	; 0x3812 <__addsf3+0x28>
    3804:	9f 3f       	cpi	r25, 0xFF	; 255
    3806:	19 f4       	brne	.+6      	; 0x380e <__addsf3+0x24>
    3808:	26 f4       	brtc	.+8      	; 0x3812 <__addsf3+0x28>
    380a:	0c 94 30 1e 	jmp	0x3c60	; 0x3c60 <__fp_nan>
    380e:	0e f4       	brtc	.+2      	; 0x3812 <__addsf3+0x28>
    3810:	e0 95       	com	r30
    3812:	e7 fb       	bst	r30, 7
    3814:	0c 94 01 1e 	jmp	0x3c02	; 0x3c02 <__fp_inf>

00003818 <__addsf3x>:
    3818:	e9 2f       	mov	r30, r25
    381a:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <__fp_split3>
    381e:	58 f3       	brcs	.-42     	; 0x37f6 <__addsf3+0xc>
    3820:	ba 17       	cp	r27, r26
    3822:	62 07       	cpc	r22, r18
    3824:	73 07       	cpc	r23, r19
    3826:	84 07       	cpc	r24, r20
    3828:	95 07       	cpc	r25, r21
    382a:	20 f0       	brcs	.+8      	; 0x3834 <__addsf3x+0x1c>
    382c:	79 f4       	brne	.+30     	; 0x384c <__addsf3x+0x34>
    382e:	a6 f5       	brtc	.+104    	; 0x3898 <__addsf3x+0x80>
    3830:	0c 94 b3 1e 	jmp	0x3d66	; 0x3d66 <__fp_zero>
    3834:	0e f4       	brtc	.+2      	; 0x3838 <__addsf3x+0x20>
    3836:	e0 95       	com	r30
    3838:	0b 2e       	mov	r0, r27
    383a:	ba 2f       	mov	r27, r26
    383c:	a0 2d       	mov	r26, r0
    383e:	0b 01       	movw	r0, r22
    3840:	b9 01       	movw	r22, r18
    3842:	90 01       	movw	r18, r0
    3844:	0c 01       	movw	r0, r24
    3846:	ca 01       	movw	r24, r20
    3848:	a0 01       	movw	r20, r0
    384a:	11 24       	eor	r1, r1
    384c:	ff 27       	eor	r31, r31
    384e:	59 1b       	sub	r21, r25
    3850:	99 f0       	breq	.+38     	; 0x3878 <__addsf3x+0x60>
    3852:	59 3f       	cpi	r21, 0xF9	; 249
    3854:	50 f4       	brcc	.+20     	; 0x386a <__addsf3x+0x52>
    3856:	50 3e       	cpi	r21, 0xE0	; 224
    3858:	68 f1       	brcs	.+90     	; 0x38b4 <__addsf3x+0x9c>
    385a:	1a 16       	cp	r1, r26
    385c:	f0 40       	sbci	r31, 0x00	; 0
    385e:	a2 2f       	mov	r26, r18
    3860:	23 2f       	mov	r18, r19
    3862:	34 2f       	mov	r19, r20
    3864:	44 27       	eor	r20, r20
    3866:	58 5f       	subi	r21, 0xF8	; 248
    3868:	f3 cf       	rjmp	.-26     	; 0x3850 <__addsf3x+0x38>
    386a:	46 95       	lsr	r20
    386c:	37 95       	ror	r19
    386e:	27 95       	ror	r18
    3870:	a7 95       	ror	r26
    3872:	f0 40       	sbci	r31, 0x00	; 0
    3874:	53 95       	inc	r21
    3876:	c9 f7       	brne	.-14     	; 0x386a <__addsf3x+0x52>
    3878:	7e f4       	brtc	.+30     	; 0x3898 <__addsf3x+0x80>
    387a:	1f 16       	cp	r1, r31
    387c:	ba 0b       	sbc	r27, r26
    387e:	62 0b       	sbc	r22, r18
    3880:	73 0b       	sbc	r23, r19
    3882:	84 0b       	sbc	r24, r20
    3884:	ba f0       	brmi	.+46     	; 0x38b4 <__addsf3x+0x9c>
    3886:	91 50       	subi	r25, 0x01	; 1
    3888:	a1 f0       	breq	.+40     	; 0x38b2 <__addsf3x+0x9a>
    388a:	ff 0f       	add	r31, r31
    388c:	bb 1f       	adc	r27, r27
    388e:	66 1f       	adc	r22, r22
    3890:	77 1f       	adc	r23, r23
    3892:	88 1f       	adc	r24, r24
    3894:	c2 f7       	brpl	.-16     	; 0x3886 <__addsf3x+0x6e>
    3896:	0e c0       	rjmp	.+28     	; 0x38b4 <__addsf3x+0x9c>
    3898:	ba 0f       	add	r27, r26
    389a:	62 1f       	adc	r22, r18
    389c:	73 1f       	adc	r23, r19
    389e:	84 1f       	adc	r24, r20
    38a0:	48 f4       	brcc	.+18     	; 0x38b4 <__addsf3x+0x9c>
    38a2:	87 95       	ror	r24
    38a4:	77 95       	ror	r23
    38a6:	67 95       	ror	r22
    38a8:	b7 95       	ror	r27
    38aa:	f7 95       	ror	r31
    38ac:	9e 3f       	cpi	r25, 0xFE	; 254
    38ae:	08 f0       	brcs	.+2      	; 0x38b2 <__addsf3x+0x9a>
    38b0:	b0 cf       	rjmp	.-160    	; 0x3812 <__addsf3+0x28>
    38b2:	93 95       	inc	r25
    38b4:	88 0f       	add	r24, r24
    38b6:	08 f0       	brcs	.+2      	; 0x38ba <__addsf3x+0xa2>
    38b8:	99 27       	eor	r25, r25
    38ba:	ee 0f       	add	r30, r30
    38bc:	97 95       	ror	r25
    38be:	87 95       	ror	r24
    38c0:	08 95       	ret
    38c2:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__fp_pscA>
    38c6:	60 f0       	brcs	.+24     	; 0x38e0 <__addsf3x+0xc8>
    38c8:	80 e8       	ldi	r24, 0x80	; 128
    38ca:	91 e0       	ldi	r25, 0x01	; 1
    38cc:	09 f4       	brne	.+2      	; 0x38d0 <__addsf3x+0xb8>
    38ce:	9e ef       	ldi	r25, 0xFE	; 254
    38d0:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <__fp_pscB>
    38d4:	28 f0       	brcs	.+10     	; 0x38e0 <__addsf3x+0xc8>
    38d6:	40 e8       	ldi	r20, 0x80	; 128
    38d8:	51 e0       	ldi	r21, 0x01	; 1
    38da:	71 f4       	brne	.+28     	; 0x38f8 <atan2+0x10>
    38dc:	5e ef       	ldi	r21, 0xFE	; 254
    38de:	0c c0       	rjmp	.+24     	; 0x38f8 <atan2+0x10>
    38e0:	0c 94 30 1e 	jmp	0x3c60	; 0x3c60 <__fp_nan>
    38e4:	0c 94 b3 1e 	jmp	0x3d66	; 0x3d66 <__fp_zero>

000038e8 <atan2>:
    38e8:	e9 2f       	mov	r30, r25
    38ea:	e0 78       	andi	r30, 0x80	; 128
    38ec:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <__fp_split3>
    38f0:	40 f3       	brcs	.-48     	; 0x38c2 <__addsf3x+0xaa>
    38f2:	09 2e       	mov	r0, r25
    38f4:	05 2a       	or	r0, r21
    38f6:	b1 f3       	breq	.-20     	; 0x38e4 <__addsf3x+0xcc>
    38f8:	26 17       	cp	r18, r22
    38fa:	37 07       	cpc	r19, r23
    38fc:	48 07       	cpc	r20, r24
    38fe:	59 07       	cpc	r21, r25
    3900:	38 f0       	brcs	.+14     	; 0x3910 <atan2+0x28>
    3902:	0e 2e       	mov	r0, r30
    3904:	07 f8       	bld	r0, 7
    3906:	e0 25       	eor	r30, r0
    3908:	69 f0       	breq	.+26     	; 0x3924 <atan2+0x3c>
    390a:	e0 25       	eor	r30, r0
    390c:	e0 64       	ori	r30, 0x40	; 64
    390e:	0a c0       	rjmp	.+20     	; 0x3924 <atan2+0x3c>
    3910:	ef 63       	ori	r30, 0x3F	; 63
    3912:	07 f8       	bld	r0, 7
    3914:	00 94       	com	r0
    3916:	07 fa       	bst	r0, 7
    3918:	db 01       	movw	r26, r22
    391a:	b9 01       	movw	r22, r18
    391c:	9d 01       	movw	r18, r26
    391e:	dc 01       	movw	r26, r24
    3920:	ca 01       	movw	r24, r20
    3922:	ad 01       	movw	r20, r26
    3924:	ef 93       	push	r30
    3926:	0e 94 ef 1c 	call	0x39de	; 0x39de <__divsf3_pse>
    392a:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <__fp_round>
    392e:	0e 94 a4 1c 	call	0x3948	; 0x3948 <atan>
    3932:	5f 91       	pop	r21
    3934:	55 23       	and	r21, r21
    3936:	39 f0       	breq	.+14     	; 0x3946 <atan2+0x5e>
    3938:	2b ed       	ldi	r18, 0xDB	; 219
    393a:	3f e0       	ldi	r19, 0x0F	; 15
    393c:	49 e4       	ldi	r20, 0x49	; 73
    393e:	50 fd       	sbrc	r21, 0
    3940:	49 ec       	ldi	r20, 0xC9	; 201
    3942:	0c 94 f5 1b 	jmp	0x37ea	; 0x37ea <__addsf3>
    3946:	08 95       	ret

00003948 <atan>:
    3948:	df 93       	push	r29
    394a:	dd 27       	eor	r29, r29
    394c:	b9 2f       	mov	r27, r25
    394e:	bf 77       	andi	r27, 0x7F	; 127
    3950:	40 e8       	ldi	r20, 0x80	; 128
    3952:	5f e3       	ldi	r21, 0x3F	; 63
    3954:	16 16       	cp	r1, r22
    3956:	17 06       	cpc	r1, r23
    3958:	48 07       	cpc	r20, r24
    395a:	5b 07       	cpc	r21, r27
    395c:	18 f4       	brcc	.+6      	; 0x3964 <atan+0x1c>
    395e:	d9 2f       	mov	r29, r25
    3960:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <inverse>
    3964:	9f 93       	push	r25
    3966:	8f 93       	push	r24
    3968:	7f 93       	push	r23
    396a:	6f 93       	push	r22
    396c:	0e 94 21 20 	call	0x4042	; 0x4042 <square>
    3970:	e4 e0       	ldi	r30, 0x04	; 4
    3972:	f1 e0       	ldi	r31, 0x01	; 1
    3974:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <__fp_powser>
    3978:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <__fp_round>
    397c:	2f 91       	pop	r18
    397e:	3f 91       	pop	r19
    3980:	4f 91       	pop	r20
    3982:	5f 91       	pop	r21
    3984:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <__mulsf3x>
    3988:	dd 23       	and	r29, r29
    398a:	51 f0       	breq	.+20     	; 0x39a0 <atan+0x58>
    398c:	90 58       	subi	r25, 0x80	; 128
    398e:	a2 ea       	ldi	r26, 0xA2	; 162
    3990:	2a ed       	ldi	r18, 0xDA	; 218
    3992:	3f e0       	ldi	r19, 0x0F	; 15
    3994:	49 ec       	ldi	r20, 0xC9	; 201
    3996:	5f e3       	ldi	r21, 0x3F	; 63
    3998:	d0 78       	andi	r29, 0x80	; 128
    399a:	5d 27       	eor	r21, r29
    399c:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__addsf3x>
    39a0:	df 91       	pop	r29
    39a2:	0c 94 68 1e 	jmp	0x3cd0	; 0x3cd0 <__fp_round>

000039a6 <__cmpsf2>:
    39a6:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__fp_cmp>
    39aa:	08 f4       	brcc	.+2      	; 0x39ae <__cmpsf2+0x8>
    39ac:	81 e0       	ldi	r24, 0x01	; 1
    39ae:	08 95       	ret

000039b0 <__divsf3>:
    39b0:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <__divsf3x>
    39b4:	0c 94 68 1e 	jmp	0x3cd0	; 0x3cd0 <__fp_round>
    39b8:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <__fp_pscB>
    39bc:	58 f0       	brcs	.+22     	; 0x39d4 <__divsf3+0x24>
    39be:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__fp_pscA>
    39c2:	40 f0       	brcs	.+16     	; 0x39d4 <__divsf3+0x24>
    39c4:	29 f4       	brne	.+10     	; 0x39d0 <__divsf3+0x20>
    39c6:	5f 3f       	cpi	r21, 0xFF	; 255
    39c8:	29 f0       	breq	.+10     	; 0x39d4 <__divsf3+0x24>
    39ca:	0c 94 01 1e 	jmp	0x3c02	; 0x3c02 <__fp_inf>
    39ce:	51 11       	cpse	r21, r1
    39d0:	0c 94 b4 1e 	jmp	0x3d68	; 0x3d68 <__fp_szero>
    39d4:	0c 94 30 1e 	jmp	0x3c60	; 0x3c60 <__fp_nan>

000039d8 <__divsf3x>:
    39d8:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <__fp_split3>
    39dc:	68 f3       	brcs	.-38     	; 0x39b8 <__divsf3+0x8>

000039de <__divsf3_pse>:
    39de:	99 23       	and	r25, r25
    39e0:	b1 f3       	breq	.-20     	; 0x39ce <__divsf3+0x1e>
    39e2:	55 23       	and	r21, r21
    39e4:	91 f3       	breq	.-28     	; 0x39ca <__divsf3+0x1a>
    39e6:	95 1b       	sub	r25, r21
    39e8:	55 0b       	sbc	r21, r21
    39ea:	bb 27       	eor	r27, r27
    39ec:	aa 27       	eor	r26, r26
    39ee:	62 17       	cp	r22, r18
    39f0:	73 07       	cpc	r23, r19
    39f2:	84 07       	cpc	r24, r20
    39f4:	38 f0       	brcs	.+14     	; 0x3a04 <__divsf3_pse+0x26>
    39f6:	9f 5f       	subi	r25, 0xFF	; 255
    39f8:	5f 4f       	sbci	r21, 0xFF	; 255
    39fa:	22 0f       	add	r18, r18
    39fc:	33 1f       	adc	r19, r19
    39fe:	44 1f       	adc	r20, r20
    3a00:	aa 1f       	adc	r26, r26
    3a02:	a9 f3       	breq	.-22     	; 0x39ee <__divsf3_pse+0x10>
    3a04:	35 d0       	rcall	.+106    	; 0x3a70 <__divsf3_pse+0x92>
    3a06:	0e 2e       	mov	r0, r30
    3a08:	3a f0       	brmi	.+14     	; 0x3a18 <__divsf3_pse+0x3a>
    3a0a:	e0 e8       	ldi	r30, 0x80	; 128
    3a0c:	32 d0       	rcall	.+100    	; 0x3a72 <__divsf3_pse+0x94>
    3a0e:	91 50       	subi	r25, 0x01	; 1
    3a10:	50 40       	sbci	r21, 0x00	; 0
    3a12:	e6 95       	lsr	r30
    3a14:	00 1c       	adc	r0, r0
    3a16:	ca f7       	brpl	.-14     	; 0x3a0a <__divsf3_pse+0x2c>
    3a18:	2b d0       	rcall	.+86     	; 0x3a70 <__divsf3_pse+0x92>
    3a1a:	fe 2f       	mov	r31, r30
    3a1c:	29 d0       	rcall	.+82     	; 0x3a70 <__divsf3_pse+0x92>
    3a1e:	66 0f       	add	r22, r22
    3a20:	77 1f       	adc	r23, r23
    3a22:	88 1f       	adc	r24, r24
    3a24:	bb 1f       	adc	r27, r27
    3a26:	26 17       	cp	r18, r22
    3a28:	37 07       	cpc	r19, r23
    3a2a:	48 07       	cpc	r20, r24
    3a2c:	ab 07       	cpc	r26, r27
    3a2e:	b0 e8       	ldi	r27, 0x80	; 128
    3a30:	09 f0       	breq	.+2      	; 0x3a34 <__divsf3_pse+0x56>
    3a32:	bb 0b       	sbc	r27, r27
    3a34:	80 2d       	mov	r24, r0
    3a36:	bf 01       	movw	r22, r30
    3a38:	ff 27       	eor	r31, r31
    3a3a:	93 58       	subi	r25, 0x83	; 131
    3a3c:	5f 4f       	sbci	r21, 0xFF	; 255
    3a3e:	3a f0       	brmi	.+14     	; 0x3a4e <__divsf3_pse+0x70>
    3a40:	9e 3f       	cpi	r25, 0xFE	; 254
    3a42:	51 05       	cpc	r21, r1
    3a44:	78 f0       	brcs	.+30     	; 0x3a64 <__divsf3_pse+0x86>
    3a46:	0c 94 01 1e 	jmp	0x3c02	; 0x3c02 <__fp_inf>
    3a4a:	0c 94 b4 1e 	jmp	0x3d68	; 0x3d68 <__fp_szero>
    3a4e:	5f 3f       	cpi	r21, 0xFF	; 255
    3a50:	e4 f3       	brlt	.-8      	; 0x3a4a <__divsf3_pse+0x6c>
    3a52:	98 3e       	cpi	r25, 0xE8	; 232
    3a54:	d4 f3       	brlt	.-12     	; 0x3a4a <__divsf3_pse+0x6c>
    3a56:	86 95       	lsr	r24
    3a58:	77 95       	ror	r23
    3a5a:	67 95       	ror	r22
    3a5c:	b7 95       	ror	r27
    3a5e:	f7 95       	ror	r31
    3a60:	9f 5f       	subi	r25, 0xFF	; 255
    3a62:	c9 f7       	brne	.-14     	; 0x3a56 <__divsf3_pse+0x78>
    3a64:	88 0f       	add	r24, r24
    3a66:	91 1d       	adc	r25, r1
    3a68:	96 95       	lsr	r25
    3a6a:	87 95       	ror	r24
    3a6c:	97 f9       	bld	r25, 7
    3a6e:	08 95       	ret
    3a70:	e1 e0       	ldi	r30, 0x01	; 1
    3a72:	66 0f       	add	r22, r22
    3a74:	77 1f       	adc	r23, r23
    3a76:	88 1f       	adc	r24, r24
    3a78:	bb 1f       	adc	r27, r27
    3a7a:	62 17       	cp	r22, r18
    3a7c:	73 07       	cpc	r23, r19
    3a7e:	84 07       	cpc	r24, r20
    3a80:	ba 07       	cpc	r27, r26
    3a82:	20 f0       	brcs	.+8      	; 0x3a8c <__divsf3_pse+0xae>
    3a84:	62 1b       	sub	r22, r18
    3a86:	73 0b       	sbc	r23, r19
    3a88:	84 0b       	sbc	r24, r20
    3a8a:	ba 0b       	sbc	r27, r26
    3a8c:	ee 1f       	adc	r30, r30
    3a8e:	88 f7       	brcc	.-30     	; 0x3a72 <__divsf3_pse+0x94>
    3a90:	e0 95       	com	r30
    3a92:	08 95       	ret

00003a94 <__fixsfsi>:
    3a94:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <__fixunssfsi>
    3a98:	68 94       	set
    3a9a:	b1 11       	cpse	r27, r1
    3a9c:	0c 94 b4 1e 	jmp	0x3d68	; 0x3d68 <__fp_szero>
    3aa0:	08 95       	ret

00003aa2 <__fixunssfsi>:
    3aa2:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <__fp_splitA>
    3aa6:	88 f0       	brcs	.+34     	; 0x3aca <__fixunssfsi+0x28>
    3aa8:	9f 57       	subi	r25, 0x7F	; 127
    3aaa:	98 f0       	brcs	.+38     	; 0x3ad2 <__fixunssfsi+0x30>
    3aac:	b9 2f       	mov	r27, r25
    3aae:	99 27       	eor	r25, r25
    3ab0:	b7 51       	subi	r27, 0x17	; 23
    3ab2:	b0 f0       	brcs	.+44     	; 0x3ae0 <__fixunssfsi+0x3e>
    3ab4:	e1 f0       	breq	.+56     	; 0x3aee <__fixunssfsi+0x4c>
    3ab6:	66 0f       	add	r22, r22
    3ab8:	77 1f       	adc	r23, r23
    3aba:	88 1f       	adc	r24, r24
    3abc:	99 1f       	adc	r25, r25
    3abe:	1a f0       	brmi	.+6      	; 0x3ac6 <__fixunssfsi+0x24>
    3ac0:	ba 95       	dec	r27
    3ac2:	c9 f7       	brne	.-14     	; 0x3ab6 <__fixunssfsi+0x14>
    3ac4:	14 c0       	rjmp	.+40     	; 0x3aee <__fixunssfsi+0x4c>
    3ac6:	b1 30       	cpi	r27, 0x01	; 1
    3ac8:	91 f0       	breq	.+36     	; 0x3aee <__fixunssfsi+0x4c>
    3aca:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__fp_zero>
    3ace:	b1 e0       	ldi	r27, 0x01	; 1
    3ad0:	08 95       	ret
    3ad2:	0c 94 b3 1e 	jmp	0x3d66	; 0x3d66 <__fp_zero>
    3ad6:	67 2f       	mov	r22, r23
    3ad8:	78 2f       	mov	r23, r24
    3ada:	88 27       	eor	r24, r24
    3adc:	b8 5f       	subi	r27, 0xF8	; 248
    3ade:	39 f0       	breq	.+14     	; 0x3aee <__fixunssfsi+0x4c>
    3ae0:	b9 3f       	cpi	r27, 0xF9	; 249
    3ae2:	cc f3       	brlt	.-14     	; 0x3ad6 <__fixunssfsi+0x34>
    3ae4:	86 95       	lsr	r24
    3ae6:	77 95       	ror	r23
    3ae8:	67 95       	ror	r22
    3aea:	b3 95       	inc	r27
    3aec:	d9 f7       	brne	.-10     	; 0x3ae4 <__fixunssfsi+0x42>
    3aee:	3e f4       	brtc	.+14     	; 0x3afe <__fixunssfsi+0x5c>
    3af0:	90 95       	com	r25
    3af2:	80 95       	com	r24
    3af4:	70 95       	com	r23
    3af6:	61 95       	neg	r22
    3af8:	7f 4f       	sbci	r23, 0xFF	; 255
    3afa:	8f 4f       	sbci	r24, 0xFF	; 255
    3afc:	9f 4f       	sbci	r25, 0xFF	; 255
    3afe:	08 95       	ret

00003b00 <__floatunsisf>:
    3b00:	e8 94       	clt
    3b02:	09 c0       	rjmp	.+18     	; 0x3b16 <__floatsisf+0x12>

00003b04 <__floatsisf>:
    3b04:	97 fb       	bst	r25, 7
    3b06:	3e f4       	brtc	.+14     	; 0x3b16 <__floatsisf+0x12>
    3b08:	90 95       	com	r25
    3b0a:	80 95       	com	r24
    3b0c:	70 95       	com	r23
    3b0e:	61 95       	neg	r22
    3b10:	7f 4f       	sbci	r23, 0xFF	; 255
    3b12:	8f 4f       	sbci	r24, 0xFF	; 255
    3b14:	9f 4f       	sbci	r25, 0xFF	; 255
    3b16:	99 23       	and	r25, r25
    3b18:	a9 f0       	breq	.+42     	; 0x3b44 <__floatsisf+0x40>
    3b1a:	f9 2f       	mov	r31, r25
    3b1c:	96 e9       	ldi	r25, 0x96	; 150
    3b1e:	bb 27       	eor	r27, r27
    3b20:	93 95       	inc	r25
    3b22:	f6 95       	lsr	r31
    3b24:	87 95       	ror	r24
    3b26:	77 95       	ror	r23
    3b28:	67 95       	ror	r22
    3b2a:	b7 95       	ror	r27
    3b2c:	f1 11       	cpse	r31, r1
    3b2e:	f8 cf       	rjmp	.-16     	; 0x3b20 <__floatsisf+0x1c>
    3b30:	fa f4       	brpl	.+62     	; 0x3b70 <__floatsisf+0x6c>
    3b32:	bb 0f       	add	r27, r27
    3b34:	11 f4       	brne	.+4      	; 0x3b3a <__floatsisf+0x36>
    3b36:	60 ff       	sbrs	r22, 0
    3b38:	1b c0       	rjmp	.+54     	; 0x3b70 <__floatsisf+0x6c>
    3b3a:	6f 5f       	subi	r22, 0xFF	; 255
    3b3c:	7f 4f       	sbci	r23, 0xFF	; 255
    3b3e:	8f 4f       	sbci	r24, 0xFF	; 255
    3b40:	9f 4f       	sbci	r25, 0xFF	; 255
    3b42:	16 c0       	rjmp	.+44     	; 0x3b70 <__floatsisf+0x6c>
    3b44:	88 23       	and	r24, r24
    3b46:	11 f0       	breq	.+4      	; 0x3b4c <__floatsisf+0x48>
    3b48:	96 e9       	ldi	r25, 0x96	; 150
    3b4a:	11 c0       	rjmp	.+34     	; 0x3b6e <__floatsisf+0x6a>
    3b4c:	77 23       	and	r23, r23
    3b4e:	21 f0       	breq	.+8      	; 0x3b58 <__floatsisf+0x54>
    3b50:	9e e8       	ldi	r25, 0x8E	; 142
    3b52:	87 2f       	mov	r24, r23
    3b54:	76 2f       	mov	r23, r22
    3b56:	05 c0       	rjmp	.+10     	; 0x3b62 <__floatsisf+0x5e>
    3b58:	66 23       	and	r22, r22
    3b5a:	71 f0       	breq	.+28     	; 0x3b78 <__floatsisf+0x74>
    3b5c:	96 e8       	ldi	r25, 0x86	; 134
    3b5e:	86 2f       	mov	r24, r22
    3b60:	70 e0       	ldi	r23, 0x00	; 0
    3b62:	60 e0       	ldi	r22, 0x00	; 0
    3b64:	2a f0       	brmi	.+10     	; 0x3b70 <__floatsisf+0x6c>
    3b66:	9a 95       	dec	r25
    3b68:	66 0f       	add	r22, r22
    3b6a:	77 1f       	adc	r23, r23
    3b6c:	88 1f       	adc	r24, r24
    3b6e:	da f7       	brpl	.-10     	; 0x3b66 <__floatsisf+0x62>
    3b70:	88 0f       	add	r24, r24
    3b72:	96 95       	lsr	r25
    3b74:	87 95       	ror	r24
    3b76:	97 f9       	bld	r25, 7
    3b78:	08 95       	ret

00003b7a <floor>:
    3b7a:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <__fp_trunc>
    3b7e:	90 f0       	brcs	.+36     	; 0x3ba4 <floor+0x2a>
    3b80:	9f 37       	cpi	r25, 0x7F	; 127
    3b82:	48 f4       	brcc	.+18     	; 0x3b96 <floor+0x1c>
    3b84:	91 11       	cpse	r25, r1
    3b86:	16 f0       	brts	.+4      	; 0x3b8c <floor+0x12>
    3b88:	0c 94 b4 1e 	jmp	0x3d68	; 0x3d68 <__fp_szero>
    3b8c:	60 e0       	ldi	r22, 0x00	; 0
    3b8e:	70 e0       	ldi	r23, 0x00	; 0
    3b90:	80 e8       	ldi	r24, 0x80	; 128
    3b92:	9f eb       	ldi	r25, 0xBF	; 191
    3b94:	08 95       	ret
    3b96:	26 f4       	brtc	.+8      	; 0x3ba0 <floor+0x26>
    3b98:	1b 16       	cp	r1, r27
    3b9a:	61 1d       	adc	r22, r1
    3b9c:	71 1d       	adc	r23, r1
    3b9e:	81 1d       	adc	r24, r1
    3ba0:	0c 94 07 1e 	jmp	0x3c0e	; 0x3c0e <__fp_mintl>
    3ba4:	0c 94 22 1e 	jmp	0x3c44	; 0x3c44 <__fp_mpack>

00003ba8 <fma>:
    3ba8:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <__mulsf3x>
    3bac:	97 01       	movw	r18, r14
    3bae:	a8 01       	movw	r20, r16
    3bb0:	aa 27       	eor	r26, r26
    3bb2:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__addsf3x>
    3bb6:	0c 94 68 1e 	jmp	0x3cd0	; 0x3cd0 <__fp_round>

00003bba <__fp_cmp>:
    3bba:	99 0f       	add	r25, r25
    3bbc:	00 08       	sbc	r0, r0
    3bbe:	55 0f       	add	r21, r21
    3bc0:	aa 0b       	sbc	r26, r26
    3bc2:	e0 e8       	ldi	r30, 0x80	; 128
    3bc4:	fe ef       	ldi	r31, 0xFE	; 254
    3bc6:	16 16       	cp	r1, r22
    3bc8:	17 06       	cpc	r1, r23
    3bca:	e8 07       	cpc	r30, r24
    3bcc:	f9 07       	cpc	r31, r25
    3bce:	c0 f0       	brcs	.+48     	; 0x3c00 <__fp_cmp+0x46>
    3bd0:	12 16       	cp	r1, r18
    3bd2:	13 06       	cpc	r1, r19
    3bd4:	e4 07       	cpc	r30, r20
    3bd6:	f5 07       	cpc	r31, r21
    3bd8:	98 f0       	brcs	.+38     	; 0x3c00 <__fp_cmp+0x46>
    3bda:	62 1b       	sub	r22, r18
    3bdc:	73 0b       	sbc	r23, r19
    3bde:	84 0b       	sbc	r24, r20
    3be0:	95 0b       	sbc	r25, r21
    3be2:	39 f4       	brne	.+14     	; 0x3bf2 <__fp_cmp+0x38>
    3be4:	0a 26       	eor	r0, r26
    3be6:	61 f0       	breq	.+24     	; 0x3c00 <__fp_cmp+0x46>
    3be8:	23 2b       	or	r18, r19
    3bea:	24 2b       	or	r18, r20
    3bec:	25 2b       	or	r18, r21
    3bee:	21 f4       	brne	.+8      	; 0x3bf8 <__fp_cmp+0x3e>
    3bf0:	08 95       	ret
    3bf2:	0a 26       	eor	r0, r26
    3bf4:	09 f4       	brne	.+2      	; 0x3bf8 <__fp_cmp+0x3e>
    3bf6:	a1 40       	sbci	r26, 0x01	; 1
    3bf8:	a6 95       	lsr	r26
    3bfa:	8f ef       	ldi	r24, 0xFF	; 255
    3bfc:	81 1d       	adc	r24, r1
    3bfe:	81 1d       	adc	r24, r1
    3c00:	08 95       	ret

00003c02 <__fp_inf>:
    3c02:	97 f9       	bld	r25, 7
    3c04:	9f 67       	ori	r25, 0x7F	; 127
    3c06:	80 e8       	ldi	r24, 0x80	; 128
    3c08:	70 e0       	ldi	r23, 0x00	; 0
    3c0a:	60 e0       	ldi	r22, 0x00	; 0
    3c0c:	08 95       	ret

00003c0e <__fp_mintl>:
    3c0e:	88 23       	and	r24, r24
    3c10:	71 f4       	brne	.+28     	; 0x3c2e <__fp_mintl+0x20>
    3c12:	77 23       	and	r23, r23
    3c14:	21 f0       	breq	.+8      	; 0x3c1e <__fp_mintl+0x10>
    3c16:	98 50       	subi	r25, 0x08	; 8
    3c18:	87 2b       	or	r24, r23
    3c1a:	76 2f       	mov	r23, r22
    3c1c:	07 c0       	rjmp	.+14     	; 0x3c2c <__fp_mintl+0x1e>
    3c1e:	66 23       	and	r22, r22
    3c20:	11 f4       	brne	.+4      	; 0x3c26 <__fp_mintl+0x18>
    3c22:	99 27       	eor	r25, r25
    3c24:	0d c0       	rjmp	.+26     	; 0x3c40 <__fp_mintl+0x32>
    3c26:	90 51       	subi	r25, 0x10	; 16
    3c28:	86 2b       	or	r24, r22
    3c2a:	70 e0       	ldi	r23, 0x00	; 0
    3c2c:	60 e0       	ldi	r22, 0x00	; 0
    3c2e:	2a f0       	brmi	.+10     	; 0x3c3a <__fp_mintl+0x2c>
    3c30:	9a 95       	dec	r25
    3c32:	66 0f       	add	r22, r22
    3c34:	77 1f       	adc	r23, r23
    3c36:	88 1f       	adc	r24, r24
    3c38:	da f7       	brpl	.-10     	; 0x3c30 <__fp_mintl+0x22>
    3c3a:	88 0f       	add	r24, r24
    3c3c:	96 95       	lsr	r25
    3c3e:	87 95       	ror	r24
    3c40:	97 f9       	bld	r25, 7
    3c42:	08 95       	ret

00003c44 <__fp_mpack>:
    3c44:	9f 3f       	cpi	r25, 0xFF	; 255
    3c46:	31 f0       	breq	.+12     	; 0x3c54 <__fp_mpack_finite+0xc>

00003c48 <__fp_mpack_finite>:
    3c48:	91 50       	subi	r25, 0x01	; 1
    3c4a:	20 f4       	brcc	.+8      	; 0x3c54 <__fp_mpack_finite+0xc>
    3c4c:	87 95       	ror	r24
    3c4e:	77 95       	ror	r23
    3c50:	67 95       	ror	r22
    3c52:	b7 95       	ror	r27
    3c54:	88 0f       	add	r24, r24
    3c56:	91 1d       	adc	r25, r1
    3c58:	96 95       	lsr	r25
    3c5a:	87 95       	ror	r24
    3c5c:	97 f9       	bld	r25, 7
    3c5e:	08 95       	ret

00003c60 <__fp_nan>:
    3c60:	9f ef       	ldi	r25, 0xFF	; 255
    3c62:	80 ec       	ldi	r24, 0xC0	; 192
    3c64:	08 95       	ret

00003c66 <__fp_powser>:
    3c66:	df 93       	push	r29
    3c68:	cf 93       	push	r28
    3c6a:	1f 93       	push	r17
    3c6c:	0f 93       	push	r16
    3c6e:	ff 92       	push	r15
    3c70:	ef 92       	push	r14
    3c72:	df 92       	push	r13
    3c74:	7b 01       	movw	r14, r22
    3c76:	8c 01       	movw	r16, r24
    3c78:	68 94       	set
    3c7a:	06 c0       	rjmp	.+12     	; 0x3c88 <__fp_powser+0x22>
    3c7c:	da 2e       	mov	r13, r26
    3c7e:	ef 01       	movw	r28, r30
    3c80:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <__mulsf3x>
    3c84:	fe 01       	movw	r30, r28
    3c86:	e8 94       	clt
    3c88:	a5 91       	lpm	r26, Z+
    3c8a:	25 91       	lpm	r18, Z+
    3c8c:	35 91       	lpm	r19, Z+
    3c8e:	45 91       	lpm	r20, Z+
    3c90:	55 91       	lpm	r21, Z+
    3c92:	a6 f3       	brts	.-24     	; 0x3c7c <__fp_powser+0x16>
    3c94:	ef 01       	movw	r28, r30
    3c96:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__addsf3x>
    3c9a:	fe 01       	movw	r30, r28
    3c9c:	97 01       	movw	r18, r14
    3c9e:	a8 01       	movw	r20, r16
    3ca0:	da 94       	dec	r13
    3ca2:	69 f7       	brne	.-38     	; 0x3c7e <__fp_powser+0x18>
    3ca4:	df 90       	pop	r13
    3ca6:	ef 90       	pop	r14
    3ca8:	ff 90       	pop	r15
    3caa:	0f 91       	pop	r16
    3cac:	1f 91       	pop	r17
    3cae:	cf 91       	pop	r28
    3cb0:	df 91       	pop	r29
    3cb2:	08 95       	ret

00003cb4 <__fp_pscA>:
    3cb4:	00 24       	eor	r0, r0
    3cb6:	0a 94       	dec	r0
    3cb8:	16 16       	cp	r1, r22
    3cba:	17 06       	cpc	r1, r23
    3cbc:	18 06       	cpc	r1, r24
    3cbe:	09 06       	cpc	r0, r25
    3cc0:	08 95       	ret

00003cc2 <__fp_pscB>:
    3cc2:	00 24       	eor	r0, r0
    3cc4:	0a 94       	dec	r0
    3cc6:	12 16       	cp	r1, r18
    3cc8:	13 06       	cpc	r1, r19
    3cca:	14 06       	cpc	r1, r20
    3ccc:	05 06       	cpc	r0, r21
    3cce:	08 95       	ret

00003cd0 <__fp_round>:
    3cd0:	09 2e       	mov	r0, r25
    3cd2:	03 94       	inc	r0
    3cd4:	00 0c       	add	r0, r0
    3cd6:	11 f4       	brne	.+4      	; 0x3cdc <__fp_round+0xc>
    3cd8:	88 23       	and	r24, r24
    3cda:	52 f0       	brmi	.+20     	; 0x3cf0 <__fp_round+0x20>
    3cdc:	bb 0f       	add	r27, r27
    3cde:	40 f4       	brcc	.+16     	; 0x3cf0 <__fp_round+0x20>
    3ce0:	bf 2b       	or	r27, r31
    3ce2:	11 f4       	brne	.+4      	; 0x3ce8 <__fp_round+0x18>
    3ce4:	60 ff       	sbrs	r22, 0
    3ce6:	04 c0       	rjmp	.+8      	; 0x3cf0 <__fp_round+0x20>
    3ce8:	6f 5f       	subi	r22, 0xFF	; 255
    3cea:	7f 4f       	sbci	r23, 0xFF	; 255
    3cec:	8f 4f       	sbci	r24, 0xFF	; 255
    3cee:	9f 4f       	sbci	r25, 0xFF	; 255
    3cf0:	08 95       	ret

00003cf2 <__fp_split3>:
    3cf2:	57 fd       	sbrc	r21, 7
    3cf4:	90 58       	subi	r25, 0x80	; 128
    3cf6:	44 0f       	add	r20, r20
    3cf8:	55 1f       	adc	r21, r21
    3cfa:	59 f0       	breq	.+22     	; 0x3d12 <__fp_splitA+0x10>
    3cfc:	5f 3f       	cpi	r21, 0xFF	; 255
    3cfe:	71 f0       	breq	.+28     	; 0x3d1c <__fp_splitA+0x1a>
    3d00:	47 95       	ror	r20

00003d02 <__fp_splitA>:
    3d02:	88 0f       	add	r24, r24
    3d04:	97 fb       	bst	r25, 7
    3d06:	99 1f       	adc	r25, r25
    3d08:	61 f0       	breq	.+24     	; 0x3d22 <__fp_splitA+0x20>
    3d0a:	9f 3f       	cpi	r25, 0xFF	; 255
    3d0c:	79 f0       	breq	.+30     	; 0x3d2c <__fp_splitA+0x2a>
    3d0e:	87 95       	ror	r24
    3d10:	08 95       	ret
    3d12:	12 16       	cp	r1, r18
    3d14:	13 06       	cpc	r1, r19
    3d16:	14 06       	cpc	r1, r20
    3d18:	55 1f       	adc	r21, r21
    3d1a:	f2 cf       	rjmp	.-28     	; 0x3d00 <__fp_split3+0xe>
    3d1c:	46 95       	lsr	r20
    3d1e:	f1 df       	rcall	.-30     	; 0x3d02 <__fp_splitA>
    3d20:	08 c0       	rjmp	.+16     	; 0x3d32 <__fp_splitA+0x30>
    3d22:	16 16       	cp	r1, r22
    3d24:	17 06       	cpc	r1, r23
    3d26:	18 06       	cpc	r1, r24
    3d28:	99 1f       	adc	r25, r25
    3d2a:	f1 cf       	rjmp	.-30     	; 0x3d0e <__fp_splitA+0xc>
    3d2c:	86 95       	lsr	r24
    3d2e:	71 05       	cpc	r23, r1
    3d30:	61 05       	cpc	r22, r1
    3d32:	08 94       	sec
    3d34:	08 95       	ret

00003d36 <__fp_trunc>:
    3d36:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <__fp_splitA>
    3d3a:	a0 f0       	brcs	.+40     	; 0x3d64 <__fp_trunc+0x2e>
    3d3c:	be e7       	ldi	r27, 0x7E	; 126
    3d3e:	b9 17       	cp	r27, r25
    3d40:	88 f4       	brcc	.+34     	; 0x3d64 <__fp_trunc+0x2e>
    3d42:	bb 27       	eor	r27, r27
    3d44:	9f 38       	cpi	r25, 0x8F	; 143
    3d46:	60 f4       	brcc	.+24     	; 0x3d60 <__fp_trunc+0x2a>
    3d48:	16 16       	cp	r1, r22
    3d4a:	b1 1d       	adc	r27, r1
    3d4c:	67 2f       	mov	r22, r23
    3d4e:	78 2f       	mov	r23, r24
    3d50:	88 27       	eor	r24, r24
    3d52:	98 5f       	subi	r25, 0xF8	; 248
    3d54:	f7 cf       	rjmp	.-18     	; 0x3d44 <__fp_trunc+0xe>
    3d56:	86 95       	lsr	r24
    3d58:	77 95       	ror	r23
    3d5a:	67 95       	ror	r22
    3d5c:	b1 1d       	adc	r27, r1
    3d5e:	93 95       	inc	r25
    3d60:	96 39       	cpi	r25, 0x96	; 150
    3d62:	c8 f3       	brcs	.-14     	; 0x3d56 <__fp_trunc+0x20>
    3d64:	08 95       	ret

00003d66 <__fp_zero>:
    3d66:	e8 94       	clt

00003d68 <__fp_szero>:
    3d68:	bb 27       	eor	r27, r27
    3d6a:	66 27       	eor	r22, r22
    3d6c:	77 27       	eor	r23, r23
    3d6e:	cb 01       	movw	r24, r22
    3d70:	97 f9       	bld	r25, 7
    3d72:	08 95       	ret

00003d74 <__gesf2>:
    3d74:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__fp_cmp>
    3d78:	08 f4       	brcc	.+2      	; 0x3d7c <__gesf2+0x8>
    3d7a:	8f ef       	ldi	r24, 0xFF	; 255
    3d7c:	08 95       	ret
    3d7e:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__fp_pscA>
    3d82:	29 f0       	breq	.+10     	; 0x3d8e <__gesf2+0x1a>
    3d84:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <__fp_pscB>
    3d88:	11 f0       	breq	.+4      	; 0x3d8e <__gesf2+0x1a>
    3d8a:	0c 94 30 1e 	jmp	0x3c60	; 0x3c60 <__fp_nan>
    3d8e:	0c 94 01 1e 	jmp	0x3c02	; 0x3c02 <__fp_inf>
    3d92:	b9 01       	movw	r22, r18
    3d94:	ca 01       	movw	r24, r20
    3d96:	0c 94 22 1e 	jmp	0x3c44	; 0x3c44 <__fp_mpack>

00003d9a <hypot>:
    3d9a:	9f 77       	andi	r25, 0x7F	; 127
    3d9c:	5f 77       	andi	r21, 0x7F	; 127
    3d9e:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <__fp_split3>
    3da2:	68 f3       	brcs	.-38     	; 0x3d7e <__gesf2+0xa>
    3da4:	99 23       	and	r25, r25
    3da6:	a9 f3       	breq	.-22     	; 0x3d92 <__gesf2+0x1e>
    3da8:	55 23       	and	r21, r21
    3daa:	a9 f3       	breq	.-22     	; 0x3d96 <__gesf2+0x22>
    3dac:	ff 27       	eor	r31, r31
    3dae:	95 17       	cp	r25, r21
    3db0:	58 f4       	brcc	.+22     	; 0x3dc8 <hypot+0x2e>
    3db2:	e5 2f       	mov	r30, r21
    3db4:	e9 1b       	sub	r30, r25
    3db6:	ed 30       	cpi	r30, 0x0D	; 13
    3db8:	60 f7       	brcc	.-40     	; 0x3d92 <__gesf2+0x1e>
    3dba:	5e 3b       	cpi	r21, 0xBE	; 190
    3dbc:	10 f0       	brcs	.+4      	; 0x3dc2 <hypot+0x28>
    3dbe:	f1 e4       	ldi	r31, 0x41	; 65
    3dc0:	1c c0       	rjmp	.+56     	; 0x3dfa <hypot+0x60>
    3dc2:	90 34       	cpi	r25, 0x40	; 64
    3dc4:	e0 f4       	brcc	.+56     	; 0x3dfe <hypot+0x64>
    3dc6:	0a c0       	rjmp	.+20     	; 0x3ddc <hypot+0x42>
    3dc8:	e9 2f       	mov	r30, r25
    3dca:	e5 1b       	sub	r30, r21
    3dcc:	ed 30       	cpi	r30, 0x0D	; 13
    3dce:	18 f7       	brcc	.-58     	; 0x3d96 <__gesf2+0x22>
    3dd0:	9e 3b       	cpi	r25, 0xBE	; 190
    3dd2:	10 f0       	brcs	.+4      	; 0x3dd8 <hypot+0x3e>
    3dd4:	f1 e4       	ldi	r31, 0x41	; 65
    3dd6:	11 c0       	rjmp	.+34     	; 0x3dfa <hypot+0x60>
    3dd8:	50 34       	cpi	r21, 0x40	; 64
    3dda:	88 f4       	brcc	.+34     	; 0x3dfe <hypot+0x64>
    3ddc:	f9 ea       	ldi	r31, 0xA9	; 169
    3dde:	88 23       	and	r24, r24
    3de0:	2a f0       	brmi	.+10     	; 0x3dec <hypot+0x52>
    3de2:	9a 95       	dec	r25
    3de4:	66 0f       	add	r22, r22
    3de6:	77 1f       	adc	r23, r23
    3de8:	88 1f       	adc	r24, r24
    3dea:	da f7       	brpl	.-10     	; 0x3de2 <hypot+0x48>
    3dec:	44 23       	and	r20, r20
    3dee:	2a f0       	brmi	.+10     	; 0x3dfa <hypot+0x60>
    3df0:	5a 95       	dec	r21
    3df2:	22 0f       	add	r18, r18
    3df4:	33 1f       	adc	r19, r19
    3df6:	44 1f       	adc	r20, r20
    3df8:	da f7       	brpl	.-10     	; 0x3df0 <hypot+0x56>
    3dfa:	9f 1b       	sub	r25, r31
    3dfc:	5f 1b       	sub	r21, r31
    3dfe:	ff 93       	push	r31
    3e00:	1f 93       	push	r17
    3e02:	0f 93       	push	r16
    3e04:	ff 92       	push	r15
    3e06:	ef 92       	push	r14
    3e08:	79 01       	movw	r14, r18
    3e0a:	8a 01       	movw	r16, r20
    3e0c:	bb 27       	eor	r27, r27
    3e0e:	ab 2f       	mov	r26, r27
    3e10:	9b 01       	movw	r18, r22
    3e12:	ac 01       	movw	r20, r24
    3e14:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__mulsf3_pse>
    3e18:	97 01       	movw	r18, r14
    3e1a:	a8 01       	movw	r20, r16
    3e1c:	bf 93       	push	r27
    3e1e:	7b 01       	movw	r14, r22
    3e20:	8c 01       	movw	r16, r24
    3e22:	aa 27       	eor	r26, r26
    3e24:	ba 2f       	mov	r27, r26
    3e26:	b9 01       	movw	r22, r18
    3e28:	ca 01       	movw	r24, r20
    3e2a:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__mulsf3_pse>
    3e2e:	af 91       	pop	r26
    3e30:	97 01       	movw	r18, r14
    3e32:	a8 01       	movw	r20, r16
    3e34:	ef 90       	pop	r14
    3e36:	ff 90       	pop	r15
    3e38:	0f 91       	pop	r16
    3e3a:	1f 91       	pop	r17
    3e3c:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__addsf3x>
    3e40:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <__fp_round>
    3e44:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <sqrt>
    3e48:	4f 91       	pop	r20
    3e4a:	40 ff       	sbrs	r20, 0
    3e4c:	08 95       	ret
    3e4e:	55 27       	eor	r21, r21
    3e50:	47 fd       	sbrc	r20, 7
    3e52:	50 95       	com	r21
    3e54:	0c 94 38 1f 	jmp	0x3e70	; 0x3e70 <ldexp>

00003e58 <inverse>:
    3e58:	9b 01       	movw	r18, r22
    3e5a:	ac 01       	movw	r20, r24
    3e5c:	60 e0       	ldi	r22, 0x00	; 0
    3e5e:	70 e0       	ldi	r23, 0x00	; 0
    3e60:	80 e8       	ldi	r24, 0x80	; 128
    3e62:	9f e3       	ldi	r25, 0x3F	; 63
    3e64:	0c 94 d8 1c 	jmp	0x39b0	; 0x39b0 <__divsf3>
    3e68:	0c 94 01 1e 	jmp	0x3c02	; 0x3c02 <__fp_inf>
    3e6c:	0c 94 22 1e 	jmp	0x3c44	; 0x3c44 <__fp_mpack>

00003e70 <ldexp>:
    3e70:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <__fp_splitA>
    3e74:	d8 f3       	brcs	.-10     	; 0x3e6c <inverse+0x14>
    3e76:	99 23       	and	r25, r25
    3e78:	c9 f3       	breq	.-14     	; 0x3e6c <inverse+0x14>
    3e7a:	94 0f       	add	r25, r20
    3e7c:	51 1d       	adc	r21, r1
    3e7e:	a3 f3       	brvs	.-24     	; 0x3e68 <inverse+0x10>
    3e80:	91 50       	subi	r25, 0x01	; 1
    3e82:	50 40       	sbci	r21, 0x00	; 0
    3e84:	94 f0       	brlt	.+36     	; 0x3eaa <ldexp+0x3a>
    3e86:	59 f0       	breq	.+22     	; 0x3e9e <ldexp+0x2e>
    3e88:	88 23       	and	r24, r24
    3e8a:	32 f0       	brmi	.+12     	; 0x3e98 <ldexp+0x28>
    3e8c:	66 0f       	add	r22, r22
    3e8e:	77 1f       	adc	r23, r23
    3e90:	88 1f       	adc	r24, r24
    3e92:	91 50       	subi	r25, 0x01	; 1
    3e94:	50 40       	sbci	r21, 0x00	; 0
    3e96:	c1 f7       	brne	.-16     	; 0x3e88 <ldexp+0x18>
    3e98:	9e 3f       	cpi	r25, 0xFE	; 254
    3e9a:	51 05       	cpc	r21, r1
    3e9c:	2c f7       	brge	.-54     	; 0x3e68 <inverse+0x10>
    3e9e:	88 0f       	add	r24, r24
    3ea0:	91 1d       	adc	r25, r1
    3ea2:	96 95       	lsr	r25
    3ea4:	87 95       	ror	r24
    3ea6:	97 f9       	bld	r25, 7
    3ea8:	08 95       	ret
    3eaa:	5f 3f       	cpi	r21, 0xFF	; 255
    3eac:	ac f0       	brlt	.+42     	; 0x3ed8 <ldexp+0x68>
    3eae:	98 3e       	cpi	r25, 0xE8	; 232
    3eb0:	9c f0       	brlt	.+38     	; 0x3ed8 <ldexp+0x68>
    3eb2:	bb 27       	eor	r27, r27
    3eb4:	86 95       	lsr	r24
    3eb6:	77 95       	ror	r23
    3eb8:	67 95       	ror	r22
    3eba:	b7 95       	ror	r27
    3ebc:	08 f4       	brcc	.+2      	; 0x3ec0 <ldexp+0x50>
    3ebe:	b1 60       	ori	r27, 0x01	; 1
    3ec0:	93 95       	inc	r25
    3ec2:	c1 f7       	brne	.-16     	; 0x3eb4 <ldexp+0x44>
    3ec4:	bb 0f       	add	r27, r27
    3ec6:	58 f7       	brcc	.-42     	; 0x3e9e <ldexp+0x2e>
    3ec8:	11 f4       	brne	.+4      	; 0x3ece <ldexp+0x5e>
    3eca:	60 ff       	sbrs	r22, 0
    3ecc:	e8 cf       	rjmp	.-48     	; 0x3e9e <ldexp+0x2e>
    3ece:	6f 5f       	subi	r22, 0xFF	; 255
    3ed0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ed2:	8f 4f       	sbci	r24, 0xFF	; 255
    3ed4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ed6:	e3 cf       	rjmp	.-58     	; 0x3e9e <ldexp+0x2e>
    3ed8:	0c 94 b4 1e 	jmp	0x3d68	; 0x3d68 <__fp_szero>

00003edc <__mulsf3>:
    3edc:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <__mulsf3x>
    3ee0:	0c 94 68 1e 	jmp	0x3cd0	; 0x3cd0 <__fp_round>
    3ee4:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__fp_pscA>
    3ee8:	38 f0       	brcs	.+14     	; 0x3ef8 <__mulsf3+0x1c>
    3eea:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <__fp_pscB>
    3eee:	20 f0       	brcs	.+8      	; 0x3ef8 <__mulsf3+0x1c>
    3ef0:	95 23       	and	r25, r21
    3ef2:	11 f0       	breq	.+4      	; 0x3ef8 <__mulsf3+0x1c>
    3ef4:	0c 94 01 1e 	jmp	0x3c02	; 0x3c02 <__fp_inf>
    3ef8:	0c 94 30 1e 	jmp	0x3c60	; 0x3c60 <__fp_nan>
    3efc:	11 24       	eor	r1, r1
    3efe:	0c 94 b4 1e 	jmp	0x3d68	; 0x3d68 <__fp_szero>

00003f02 <__mulsf3x>:
    3f02:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <__fp_split3>
    3f06:	70 f3       	brcs	.-36     	; 0x3ee4 <__mulsf3+0x8>

00003f08 <__mulsf3_pse>:
    3f08:	95 9f       	mul	r25, r21
    3f0a:	c1 f3       	breq	.-16     	; 0x3efc <__mulsf3+0x20>
    3f0c:	95 0f       	add	r25, r21
    3f0e:	50 e0       	ldi	r21, 0x00	; 0
    3f10:	55 1f       	adc	r21, r21
    3f12:	62 9f       	mul	r22, r18
    3f14:	f0 01       	movw	r30, r0
    3f16:	72 9f       	mul	r23, r18
    3f18:	bb 27       	eor	r27, r27
    3f1a:	f0 0d       	add	r31, r0
    3f1c:	b1 1d       	adc	r27, r1
    3f1e:	63 9f       	mul	r22, r19
    3f20:	aa 27       	eor	r26, r26
    3f22:	f0 0d       	add	r31, r0
    3f24:	b1 1d       	adc	r27, r1
    3f26:	aa 1f       	adc	r26, r26
    3f28:	64 9f       	mul	r22, r20
    3f2a:	66 27       	eor	r22, r22
    3f2c:	b0 0d       	add	r27, r0
    3f2e:	a1 1d       	adc	r26, r1
    3f30:	66 1f       	adc	r22, r22
    3f32:	82 9f       	mul	r24, r18
    3f34:	22 27       	eor	r18, r18
    3f36:	b0 0d       	add	r27, r0
    3f38:	a1 1d       	adc	r26, r1
    3f3a:	62 1f       	adc	r22, r18
    3f3c:	73 9f       	mul	r23, r19
    3f3e:	b0 0d       	add	r27, r0
    3f40:	a1 1d       	adc	r26, r1
    3f42:	62 1f       	adc	r22, r18
    3f44:	83 9f       	mul	r24, r19
    3f46:	a0 0d       	add	r26, r0
    3f48:	61 1d       	adc	r22, r1
    3f4a:	22 1f       	adc	r18, r18
    3f4c:	74 9f       	mul	r23, r20
    3f4e:	33 27       	eor	r19, r19
    3f50:	a0 0d       	add	r26, r0
    3f52:	61 1d       	adc	r22, r1
    3f54:	23 1f       	adc	r18, r19
    3f56:	84 9f       	mul	r24, r20
    3f58:	60 0d       	add	r22, r0
    3f5a:	21 1d       	adc	r18, r1
    3f5c:	82 2f       	mov	r24, r18
    3f5e:	76 2f       	mov	r23, r22
    3f60:	6a 2f       	mov	r22, r26
    3f62:	11 24       	eor	r1, r1
    3f64:	9f 57       	subi	r25, 0x7F	; 127
    3f66:	50 40       	sbci	r21, 0x00	; 0
    3f68:	9a f0       	brmi	.+38     	; 0x3f90 <__mulsf3_pse+0x88>
    3f6a:	f1 f0       	breq	.+60     	; 0x3fa8 <__mulsf3_pse+0xa0>
    3f6c:	88 23       	and	r24, r24
    3f6e:	4a f0       	brmi	.+18     	; 0x3f82 <__mulsf3_pse+0x7a>
    3f70:	ee 0f       	add	r30, r30
    3f72:	ff 1f       	adc	r31, r31
    3f74:	bb 1f       	adc	r27, r27
    3f76:	66 1f       	adc	r22, r22
    3f78:	77 1f       	adc	r23, r23
    3f7a:	88 1f       	adc	r24, r24
    3f7c:	91 50       	subi	r25, 0x01	; 1
    3f7e:	50 40       	sbci	r21, 0x00	; 0
    3f80:	a9 f7       	brne	.-22     	; 0x3f6c <__mulsf3_pse+0x64>
    3f82:	9e 3f       	cpi	r25, 0xFE	; 254
    3f84:	51 05       	cpc	r21, r1
    3f86:	80 f0       	brcs	.+32     	; 0x3fa8 <__mulsf3_pse+0xa0>
    3f88:	0c 94 01 1e 	jmp	0x3c02	; 0x3c02 <__fp_inf>
    3f8c:	0c 94 b4 1e 	jmp	0x3d68	; 0x3d68 <__fp_szero>
    3f90:	5f 3f       	cpi	r21, 0xFF	; 255
    3f92:	e4 f3       	brlt	.-8      	; 0x3f8c <__mulsf3_pse+0x84>
    3f94:	98 3e       	cpi	r25, 0xE8	; 232
    3f96:	d4 f3       	brlt	.-12     	; 0x3f8c <__mulsf3_pse+0x84>
    3f98:	86 95       	lsr	r24
    3f9a:	77 95       	ror	r23
    3f9c:	67 95       	ror	r22
    3f9e:	b7 95       	ror	r27
    3fa0:	f7 95       	ror	r31
    3fa2:	e7 95       	ror	r30
    3fa4:	9f 5f       	subi	r25, 0xFF	; 255
    3fa6:	c1 f7       	brne	.-16     	; 0x3f98 <__mulsf3_pse+0x90>
    3fa8:	fe 2b       	or	r31, r30
    3faa:	88 0f       	add	r24, r24
    3fac:	91 1d       	adc	r25, r1
    3fae:	96 95       	lsr	r25
    3fb0:	87 95       	ror	r24
    3fb2:	97 f9       	bld	r25, 7
    3fb4:	08 95       	ret
    3fb6:	19 f4       	brne	.+6      	; 0x3fbe <__mulsf3_pse+0xb6>
    3fb8:	16 f4       	brtc	.+4      	; 0x3fbe <__mulsf3_pse+0xb6>
    3fba:	0c 94 30 1e 	jmp	0x3c60	; 0x3c60 <__fp_nan>
    3fbe:	0c 94 22 1e 	jmp	0x3c44	; 0x3c44 <__fp_mpack>

00003fc2 <sqrt>:
    3fc2:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <__fp_splitA>
    3fc6:	b8 f3       	brcs	.-18     	; 0x3fb6 <__mulsf3_pse+0xae>
    3fc8:	99 23       	and	r25, r25
    3fca:	c9 f3       	breq	.-14     	; 0x3fbe <__mulsf3_pse+0xb6>
    3fcc:	b6 f3       	brts	.-20     	; 0x3fba <__mulsf3_pse+0xb2>
    3fce:	9f 57       	subi	r25, 0x7F	; 127
    3fd0:	55 0b       	sbc	r21, r21
    3fd2:	87 ff       	sbrs	r24, 7
    3fd4:	0e 94 25 20 	call	0x404a	; 0x404a <__fp_norm2>
    3fd8:	00 24       	eor	r0, r0
    3fda:	a0 e6       	ldi	r26, 0x60	; 96
    3fdc:	40 ea       	ldi	r20, 0xA0	; 160
    3fde:	90 01       	movw	r18, r0
    3fe0:	80 58       	subi	r24, 0x80	; 128
    3fe2:	56 95       	lsr	r21
    3fe4:	97 95       	ror	r25
    3fe6:	28 f4       	brcc	.+10     	; 0x3ff2 <sqrt+0x30>
    3fe8:	80 5c       	subi	r24, 0xC0	; 192
    3fea:	66 0f       	add	r22, r22
    3fec:	77 1f       	adc	r23, r23
    3fee:	88 1f       	adc	r24, r24
    3ff0:	20 f0       	brcs	.+8      	; 0x3ffa <sqrt+0x38>
    3ff2:	26 17       	cp	r18, r22
    3ff4:	37 07       	cpc	r19, r23
    3ff6:	48 07       	cpc	r20, r24
    3ff8:	30 f4       	brcc	.+12     	; 0x4006 <sqrt+0x44>
    3ffa:	62 1b       	sub	r22, r18
    3ffc:	73 0b       	sbc	r23, r19
    3ffe:	84 0b       	sbc	r24, r20
    4000:	20 29       	or	r18, r0
    4002:	31 29       	or	r19, r1
    4004:	4a 2b       	or	r20, r26
    4006:	a6 95       	lsr	r26
    4008:	17 94       	ror	r1
    400a:	07 94       	ror	r0
    400c:	20 25       	eor	r18, r0
    400e:	31 25       	eor	r19, r1
    4010:	4a 27       	eor	r20, r26
    4012:	58 f7       	brcc	.-42     	; 0x3fea <sqrt+0x28>
    4014:	66 0f       	add	r22, r22
    4016:	77 1f       	adc	r23, r23
    4018:	88 1f       	adc	r24, r24
    401a:	20 f0       	brcs	.+8      	; 0x4024 <sqrt+0x62>
    401c:	26 17       	cp	r18, r22
    401e:	37 07       	cpc	r19, r23
    4020:	48 07       	cpc	r20, r24
    4022:	30 f4       	brcc	.+12     	; 0x4030 <sqrt+0x6e>
    4024:	62 0b       	sbc	r22, r18
    4026:	73 0b       	sbc	r23, r19
    4028:	84 0b       	sbc	r24, r20
    402a:	20 0d       	add	r18, r0
    402c:	31 1d       	adc	r19, r1
    402e:	41 1d       	adc	r20, r1
    4030:	a0 95       	com	r26
    4032:	81 f7       	brne	.-32     	; 0x4014 <sqrt+0x52>
    4034:	b9 01       	movw	r22, r18
    4036:	84 2f       	mov	r24, r20
    4038:	91 58       	subi	r25, 0x81	; 129
    403a:	88 0f       	add	r24, r24
    403c:	96 95       	lsr	r25
    403e:	87 95       	ror	r24
    4040:	08 95       	ret

00004042 <square>:
    4042:	9b 01       	movw	r18, r22
    4044:	ac 01       	movw	r20, r24
    4046:	0c 94 6e 1f 	jmp	0x3edc	; 0x3edc <__mulsf3>

0000404a <__fp_norm2>:
    404a:	91 50       	subi	r25, 0x01	; 1
    404c:	50 40       	sbci	r21, 0x00	; 0
    404e:	66 0f       	add	r22, r22
    4050:	77 1f       	adc	r23, r23
    4052:	88 1f       	adc	r24, r24
    4054:	d2 f7       	brpl	.-12     	; 0x404a <__fp_norm2>
    4056:	08 95       	ret

00004058 <__tablejump2__>:
    4058:	ee 0f       	add	r30, r30
    405a:	ff 1f       	adc	r31, r31
    405c:	00 24       	eor	r0, r0
    405e:	00 1c       	adc	r0, r0
    4060:	0b be       	out	0x3b, r0	; 59
    4062:	07 90       	elpm	r0, Z+
    4064:	f6 91       	elpm	r31, Z
    4066:	e0 2d       	mov	r30, r0
    4068:	09 94       	ijmp

0000406a <__muluhisi3>:
    406a:	0e 94 40 20 	call	0x4080	; 0x4080 <__umulhisi3>
    406e:	a5 9f       	mul	r26, r21
    4070:	90 0d       	add	r25, r0
    4072:	b4 9f       	mul	r27, r20
    4074:	90 0d       	add	r25, r0
    4076:	a4 9f       	mul	r26, r20
    4078:	80 0d       	add	r24, r0
    407a:	91 1d       	adc	r25, r1
    407c:	11 24       	eor	r1, r1
    407e:	08 95       	ret

00004080 <__umulhisi3>:
    4080:	a2 9f       	mul	r26, r18
    4082:	b0 01       	movw	r22, r0
    4084:	b3 9f       	mul	r27, r19
    4086:	c0 01       	movw	r24, r0
    4088:	a3 9f       	mul	r26, r19
    408a:	70 0d       	add	r23, r0
    408c:	81 1d       	adc	r24, r1
    408e:	11 24       	eor	r1, r1
    4090:	91 1d       	adc	r25, r1
    4092:	b2 9f       	mul	r27, r18
    4094:	70 0d       	add	r23, r0
    4096:	81 1d       	adc	r24, r1
    4098:	11 24       	eor	r1, r1
    409a:	91 1d       	adc	r25, r1
    409c:	08 95       	ret

0000409e <malloc>:
    409e:	0f 93       	push	r16
    40a0:	1f 93       	push	r17
    40a2:	cf 93       	push	r28
    40a4:	df 93       	push	r29
    40a6:	82 30       	cpi	r24, 0x02	; 2
    40a8:	91 05       	cpc	r25, r1
    40aa:	10 f4       	brcc	.+4      	; 0x40b0 <malloc+0x12>
    40ac:	82 e0       	ldi	r24, 0x02	; 2
    40ae:	90 e0       	ldi	r25, 0x00	; 0
    40b0:	e0 91 cd 09 	lds	r30, 0x09CD	; 0x8009cd <__flp>
    40b4:	f0 91 ce 09 	lds	r31, 0x09CE	; 0x8009ce <__flp+0x1>
    40b8:	20 e0       	ldi	r18, 0x00	; 0
    40ba:	30 e0       	ldi	r19, 0x00	; 0
    40bc:	a0 e0       	ldi	r26, 0x00	; 0
    40be:	b0 e0       	ldi	r27, 0x00	; 0
    40c0:	30 97       	sbiw	r30, 0x00	; 0
    40c2:	19 f1       	breq	.+70     	; 0x410a <malloc+0x6c>
    40c4:	40 81       	ld	r20, Z
    40c6:	51 81       	ldd	r21, Z+1	; 0x01
    40c8:	02 81       	ldd	r16, Z+2	; 0x02
    40ca:	13 81       	ldd	r17, Z+3	; 0x03
    40cc:	48 17       	cp	r20, r24
    40ce:	59 07       	cpc	r21, r25
    40d0:	c8 f0       	brcs	.+50     	; 0x4104 <malloc+0x66>
    40d2:	84 17       	cp	r24, r20
    40d4:	95 07       	cpc	r25, r21
    40d6:	69 f4       	brne	.+26     	; 0x40f2 <malloc+0x54>
    40d8:	10 97       	sbiw	r26, 0x00	; 0
    40da:	31 f0       	breq	.+12     	; 0x40e8 <malloc+0x4a>
    40dc:	12 96       	adiw	r26, 0x02	; 2
    40de:	0c 93       	st	X, r16
    40e0:	12 97       	sbiw	r26, 0x02	; 2
    40e2:	13 96       	adiw	r26, 0x03	; 3
    40e4:	1c 93       	st	X, r17
    40e6:	27 c0       	rjmp	.+78     	; 0x4136 <malloc+0x98>
    40e8:	00 93 cd 09 	sts	0x09CD, r16	; 0x8009cd <__flp>
    40ec:	10 93 ce 09 	sts	0x09CE, r17	; 0x8009ce <__flp+0x1>
    40f0:	22 c0       	rjmp	.+68     	; 0x4136 <malloc+0x98>
    40f2:	21 15       	cp	r18, r1
    40f4:	31 05       	cpc	r19, r1
    40f6:	19 f0       	breq	.+6      	; 0x40fe <malloc+0x60>
    40f8:	42 17       	cp	r20, r18
    40fa:	53 07       	cpc	r21, r19
    40fc:	18 f4       	brcc	.+6      	; 0x4104 <malloc+0x66>
    40fe:	9a 01       	movw	r18, r20
    4100:	bd 01       	movw	r22, r26
    4102:	ef 01       	movw	r28, r30
    4104:	df 01       	movw	r26, r30
    4106:	f8 01       	movw	r30, r16
    4108:	db cf       	rjmp	.-74     	; 0x40c0 <malloc+0x22>
    410a:	21 15       	cp	r18, r1
    410c:	31 05       	cpc	r19, r1
    410e:	f9 f0       	breq	.+62     	; 0x414e <malloc+0xb0>
    4110:	28 1b       	sub	r18, r24
    4112:	39 0b       	sbc	r19, r25
    4114:	24 30       	cpi	r18, 0x04	; 4
    4116:	31 05       	cpc	r19, r1
    4118:	80 f4       	brcc	.+32     	; 0x413a <malloc+0x9c>
    411a:	8a 81       	ldd	r24, Y+2	; 0x02
    411c:	9b 81       	ldd	r25, Y+3	; 0x03
    411e:	61 15       	cp	r22, r1
    4120:	71 05       	cpc	r23, r1
    4122:	21 f0       	breq	.+8      	; 0x412c <malloc+0x8e>
    4124:	fb 01       	movw	r30, r22
    4126:	93 83       	std	Z+3, r25	; 0x03
    4128:	82 83       	std	Z+2, r24	; 0x02
    412a:	04 c0       	rjmp	.+8      	; 0x4134 <malloc+0x96>
    412c:	90 93 ce 09 	sts	0x09CE, r25	; 0x8009ce <__flp+0x1>
    4130:	80 93 cd 09 	sts	0x09CD, r24	; 0x8009cd <__flp>
    4134:	fe 01       	movw	r30, r28
    4136:	32 96       	adiw	r30, 0x02	; 2
    4138:	44 c0       	rjmp	.+136    	; 0x41c2 <malloc+0x124>
    413a:	fe 01       	movw	r30, r28
    413c:	e2 0f       	add	r30, r18
    413e:	f3 1f       	adc	r31, r19
    4140:	81 93       	st	Z+, r24
    4142:	91 93       	st	Z+, r25
    4144:	22 50       	subi	r18, 0x02	; 2
    4146:	31 09       	sbc	r19, r1
    4148:	39 83       	std	Y+1, r19	; 0x01
    414a:	28 83       	st	Y, r18
    414c:	3a c0       	rjmp	.+116    	; 0x41c2 <malloc+0x124>
    414e:	20 91 cb 09 	lds	r18, 0x09CB	; 0x8009cb <__brkval>
    4152:	30 91 cc 09 	lds	r19, 0x09CC	; 0x8009cc <__brkval+0x1>
    4156:	23 2b       	or	r18, r19
    4158:	41 f4       	brne	.+16     	; 0x416a <malloc+0xcc>
    415a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    415e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    4162:	30 93 cc 09 	sts	0x09CC, r19	; 0x8009cc <__brkval+0x1>
    4166:	20 93 cb 09 	sts	0x09CB, r18	; 0x8009cb <__brkval>
    416a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    416e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    4172:	21 15       	cp	r18, r1
    4174:	31 05       	cpc	r19, r1
    4176:	41 f4       	brne	.+16     	; 0x4188 <malloc+0xea>
    4178:	2d b7       	in	r18, 0x3d	; 61
    417a:	3e b7       	in	r19, 0x3e	; 62
    417c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4180:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4184:	24 1b       	sub	r18, r20
    4186:	35 0b       	sbc	r19, r21
    4188:	e0 91 cb 09 	lds	r30, 0x09CB	; 0x8009cb <__brkval>
    418c:	f0 91 cc 09 	lds	r31, 0x09CC	; 0x8009cc <__brkval+0x1>
    4190:	e2 17       	cp	r30, r18
    4192:	f3 07       	cpc	r31, r19
    4194:	a0 f4       	brcc	.+40     	; 0x41be <malloc+0x120>
    4196:	2e 1b       	sub	r18, r30
    4198:	3f 0b       	sbc	r19, r31
    419a:	28 17       	cp	r18, r24
    419c:	39 07       	cpc	r19, r25
    419e:	78 f0       	brcs	.+30     	; 0x41be <malloc+0x120>
    41a0:	ac 01       	movw	r20, r24
    41a2:	4e 5f       	subi	r20, 0xFE	; 254
    41a4:	5f 4f       	sbci	r21, 0xFF	; 255
    41a6:	24 17       	cp	r18, r20
    41a8:	35 07       	cpc	r19, r21
    41aa:	48 f0       	brcs	.+18     	; 0x41be <malloc+0x120>
    41ac:	4e 0f       	add	r20, r30
    41ae:	5f 1f       	adc	r21, r31
    41b0:	50 93 cc 09 	sts	0x09CC, r21	; 0x8009cc <__brkval+0x1>
    41b4:	40 93 cb 09 	sts	0x09CB, r20	; 0x8009cb <__brkval>
    41b8:	81 93       	st	Z+, r24
    41ba:	91 93       	st	Z+, r25
    41bc:	02 c0       	rjmp	.+4      	; 0x41c2 <malloc+0x124>
    41be:	e0 e0       	ldi	r30, 0x00	; 0
    41c0:	f0 e0       	ldi	r31, 0x00	; 0
    41c2:	cf 01       	movw	r24, r30
    41c4:	df 91       	pop	r29
    41c6:	cf 91       	pop	r28
    41c8:	1f 91       	pop	r17
    41ca:	0f 91       	pop	r16
    41cc:	08 95       	ret

000041ce <free>:
    41ce:	cf 93       	push	r28
    41d0:	df 93       	push	r29
    41d2:	00 97       	sbiw	r24, 0x00	; 0
    41d4:	09 f4       	brne	.+2      	; 0x41d8 <free+0xa>
    41d6:	81 c0       	rjmp	.+258    	; 0x42da <free+0x10c>
    41d8:	fc 01       	movw	r30, r24
    41da:	32 97       	sbiw	r30, 0x02	; 2
    41dc:	13 82       	std	Z+3, r1	; 0x03
    41de:	12 82       	std	Z+2, r1	; 0x02
    41e0:	a0 91 cd 09 	lds	r26, 0x09CD	; 0x8009cd <__flp>
    41e4:	b0 91 ce 09 	lds	r27, 0x09CE	; 0x8009ce <__flp+0x1>
    41e8:	10 97       	sbiw	r26, 0x00	; 0
    41ea:	81 f4       	brne	.+32     	; 0x420c <free+0x3e>
    41ec:	20 81       	ld	r18, Z
    41ee:	31 81       	ldd	r19, Z+1	; 0x01
    41f0:	82 0f       	add	r24, r18
    41f2:	93 1f       	adc	r25, r19
    41f4:	20 91 cb 09 	lds	r18, 0x09CB	; 0x8009cb <__brkval>
    41f8:	30 91 cc 09 	lds	r19, 0x09CC	; 0x8009cc <__brkval+0x1>
    41fc:	28 17       	cp	r18, r24
    41fe:	39 07       	cpc	r19, r25
    4200:	51 f5       	brne	.+84     	; 0x4256 <free+0x88>
    4202:	f0 93 cc 09 	sts	0x09CC, r31	; 0x8009cc <__brkval+0x1>
    4206:	e0 93 cb 09 	sts	0x09CB, r30	; 0x8009cb <__brkval>
    420a:	67 c0       	rjmp	.+206    	; 0x42da <free+0x10c>
    420c:	ed 01       	movw	r28, r26
    420e:	20 e0       	ldi	r18, 0x00	; 0
    4210:	30 e0       	ldi	r19, 0x00	; 0
    4212:	ce 17       	cp	r28, r30
    4214:	df 07       	cpc	r29, r31
    4216:	40 f4       	brcc	.+16     	; 0x4228 <free+0x5a>
    4218:	4a 81       	ldd	r20, Y+2	; 0x02
    421a:	5b 81       	ldd	r21, Y+3	; 0x03
    421c:	9e 01       	movw	r18, r28
    421e:	41 15       	cp	r20, r1
    4220:	51 05       	cpc	r21, r1
    4222:	f1 f0       	breq	.+60     	; 0x4260 <free+0x92>
    4224:	ea 01       	movw	r28, r20
    4226:	f5 cf       	rjmp	.-22     	; 0x4212 <free+0x44>
    4228:	d3 83       	std	Z+3, r29	; 0x03
    422a:	c2 83       	std	Z+2, r28	; 0x02
    422c:	40 81       	ld	r20, Z
    422e:	51 81       	ldd	r21, Z+1	; 0x01
    4230:	84 0f       	add	r24, r20
    4232:	95 1f       	adc	r25, r21
    4234:	c8 17       	cp	r28, r24
    4236:	d9 07       	cpc	r29, r25
    4238:	59 f4       	brne	.+22     	; 0x4250 <free+0x82>
    423a:	88 81       	ld	r24, Y
    423c:	99 81       	ldd	r25, Y+1	; 0x01
    423e:	84 0f       	add	r24, r20
    4240:	95 1f       	adc	r25, r21
    4242:	02 96       	adiw	r24, 0x02	; 2
    4244:	91 83       	std	Z+1, r25	; 0x01
    4246:	80 83       	st	Z, r24
    4248:	8a 81       	ldd	r24, Y+2	; 0x02
    424a:	9b 81       	ldd	r25, Y+3	; 0x03
    424c:	93 83       	std	Z+3, r25	; 0x03
    424e:	82 83       	std	Z+2, r24	; 0x02
    4250:	21 15       	cp	r18, r1
    4252:	31 05       	cpc	r19, r1
    4254:	29 f4       	brne	.+10     	; 0x4260 <free+0x92>
    4256:	f0 93 ce 09 	sts	0x09CE, r31	; 0x8009ce <__flp+0x1>
    425a:	e0 93 cd 09 	sts	0x09CD, r30	; 0x8009cd <__flp>
    425e:	3d c0       	rjmp	.+122    	; 0x42da <free+0x10c>
    4260:	e9 01       	movw	r28, r18
    4262:	fb 83       	std	Y+3, r31	; 0x03
    4264:	ea 83       	std	Y+2, r30	; 0x02
    4266:	49 91       	ld	r20, Y+
    4268:	59 91       	ld	r21, Y+
    426a:	c4 0f       	add	r28, r20
    426c:	d5 1f       	adc	r29, r21
    426e:	ec 17       	cp	r30, r28
    4270:	fd 07       	cpc	r31, r29
    4272:	61 f4       	brne	.+24     	; 0x428c <free+0xbe>
    4274:	80 81       	ld	r24, Z
    4276:	91 81       	ldd	r25, Z+1	; 0x01
    4278:	84 0f       	add	r24, r20
    427a:	95 1f       	adc	r25, r21
    427c:	02 96       	adiw	r24, 0x02	; 2
    427e:	e9 01       	movw	r28, r18
    4280:	99 83       	std	Y+1, r25	; 0x01
    4282:	88 83       	st	Y, r24
    4284:	82 81       	ldd	r24, Z+2	; 0x02
    4286:	93 81       	ldd	r25, Z+3	; 0x03
    4288:	9b 83       	std	Y+3, r25	; 0x03
    428a:	8a 83       	std	Y+2, r24	; 0x02
    428c:	e0 e0       	ldi	r30, 0x00	; 0
    428e:	f0 e0       	ldi	r31, 0x00	; 0
    4290:	12 96       	adiw	r26, 0x02	; 2
    4292:	8d 91       	ld	r24, X+
    4294:	9c 91       	ld	r25, X
    4296:	13 97       	sbiw	r26, 0x03	; 3
    4298:	00 97       	sbiw	r24, 0x00	; 0
    429a:	19 f0       	breq	.+6      	; 0x42a2 <free+0xd4>
    429c:	fd 01       	movw	r30, r26
    429e:	dc 01       	movw	r26, r24
    42a0:	f7 cf       	rjmp	.-18     	; 0x4290 <free+0xc2>
    42a2:	8d 91       	ld	r24, X+
    42a4:	9c 91       	ld	r25, X
    42a6:	11 97       	sbiw	r26, 0x01	; 1
    42a8:	9d 01       	movw	r18, r26
    42aa:	2e 5f       	subi	r18, 0xFE	; 254
    42ac:	3f 4f       	sbci	r19, 0xFF	; 255
    42ae:	82 0f       	add	r24, r18
    42b0:	93 1f       	adc	r25, r19
    42b2:	20 91 cb 09 	lds	r18, 0x09CB	; 0x8009cb <__brkval>
    42b6:	30 91 cc 09 	lds	r19, 0x09CC	; 0x8009cc <__brkval+0x1>
    42ba:	28 17       	cp	r18, r24
    42bc:	39 07       	cpc	r19, r25
    42be:	69 f4       	brne	.+26     	; 0x42da <free+0x10c>
    42c0:	30 97       	sbiw	r30, 0x00	; 0
    42c2:	29 f4       	brne	.+10     	; 0x42ce <free+0x100>
    42c4:	10 92 ce 09 	sts	0x09CE, r1	; 0x8009ce <__flp+0x1>
    42c8:	10 92 cd 09 	sts	0x09CD, r1	; 0x8009cd <__flp>
    42cc:	02 c0       	rjmp	.+4      	; 0x42d2 <free+0x104>
    42ce:	13 82       	std	Z+3, r1	; 0x03
    42d0:	12 82       	std	Z+2, r1	; 0x02
    42d2:	b0 93 cc 09 	sts	0x09CC, r27	; 0x8009cc <__brkval+0x1>
    42d6:	a0 93 cb 09 	sts	0x09CB, r26	; 0x8009cb <__brkval>
    42da:	df 91       	pop	r29
    42dc:	cf 91       	pop	r28
    42de:	08 95       	ret

000042e0 <memcpy>:
    42e0:	fb 01       	movw	r30, r22
    42e2:	dc 01       	movw	r26, r24
    42e4:	02 c0       	rjmp	.+4      	; 0x42ea <memcpy+0xa>
    42e6:	01 90       	ld	r0, Z+
    42e8:	0d 92       	st	X+, r0
    42ea:	41 50       	subi	r20, 0x01	; 1
    42ec:	50 40       	sbci	r21, 0x00	; 0
    42ee:	d8 f7       	brcc	.-10     	; 0x42e6 <memcpy+0x6>
    42f0:	08 95       	ret

000042f2 <vsnprintf>:
    42f2:	0f 93       	push	r16
    42f4:	1f 93       	push	r17
    42f6:	cf 93       	push	r28
    42f8:	df 93       	push	r29
    42fa:	cd b7       	in	r28, 0x3d	; 61
    42fc:	de b7       	in	r29, 0x3e	; 62
    42fe:	2e 97       	sbiw	r28, 0x0e	; 14
    4300:	0f b6       	in	r0, 0x3f	; 63
    4302:	f8 94       	cli
    4304:	de bf       	out	0x3e, r29	; 62
    4306:	0f be       	out	0x3f, r0	; 63
    4308:	cd bf       	out	0x3d, r28	; 61
    430a:	8c 01       	movw	r16, r24
    430c:	fa 01       	movw	r30, r20
    430e:	86 e0       	ldi	r24, 0x06	; 6
    4310:	8c 83       	std	Y+4, r24	; 0x04
    4312:	1a 83       	std	Y+2, r17	; 0x02
    4314:	09 83       	std	Y+1, r16	; 0x01
    4316:	77 ff       	sbrs	r23, 7
    4318:	02 c0       	rjmp	.+4      	; 0x431e <vsnprintf+0x2c>
    431a:	60 e0       	ldi	r22, 0x00	; 0
    431c:	70 e8       	ldi	r23, 0x80	; 128
    431e:	cb 01       	movw	r24, r22
    4320:	01 97       	sbiw	r24, 0x01	; 1
    4322:	9e 83       	std	Y+6, r25	; 0x06
    4324:	8d 83       	std	Y+5, r24	; 0x05
    4326:	a9 01       	movw	r20, r18
    4328:	bf 01       	movw	r22, r30
    432a:	ce 01       	movw	r24, r28
    432c:	01 96       	adiw	r24, 0x01	; 1
    432e:	0e 94 eb 21 	call	0x43d6	; 0x43d6 <vfprintf>
    4332:	4d 81       	ldd	r20, Y+5	; 0x05
    4334:	5e 81       	ldd	r21, Y+6	; 0x06
    4336:	57 fd       	sbrc	r21, 7
    4338:	0a c0       	rjmp	.+20     	; 0x434e <vsnprintf+0x5c>
    433a:	2f 81       	ldd	r18, Y+7	; 0x07
    433c:	38 85       	ldd	r19, Y+8	; 0x08
    433e:	42 17       	cp	r20, r18
    4340:	53 07       	cpc	r21, r19
    4342:	0c f4       	brge	.+2      	; 0x4346 <vsnprintf+0x54>
    4344:	9a 01       	movw	r18, r20
    4346:	f8 01       	movw	r30, r16
    4348:	e2 0f       	add	r30, r18
    434a:	f3 1f       	adc	r31, r19
    434c:	10 82       	st	Z, r1
    434e:	2e 96       	adiw	r28, 0x0e	; 14
    4350:	0f b6       	in	r0, 0x3f	; 63
    4352:	f8 94       	cli
    4354:	de bf       	out	0x3e, r29	; 62
    4356:	0f be       	out	0x3f, r0	; 63
    4358:	cd bf       	out	0x3d, r28	; 61
    435a:	df 91       	pop	r29
    435c:	cf 91       	pop	r28
    435e:	1f 91       	pop	r17
    4360:	0f 91       	pop	r16
    4362:	08 95       	ret

00004364 <vsnprintf_P>:
    4364:	0f 93       	push	r16
    4366:	1f 93       	push	r17
    4368:	cf 93       	push	r28
    436a:	df 93       	push	r29
    436c:	cd b7       	in	r28, 0x3d	; 61
    436e:	de b7       	in	r29, 0x3e	; 62
    4370:	2e 97       	sbiw	r28, 0x0e	; 14
    4372:	0f b6       	in	r0, 0x3f	; 63
    4374:	f8 94       	cli
    4376:	de bf       	out	0x3e, r29	; 62
    4378:	0f be       	out	0x3f, r0	; 63
    437a:	cd bf       	out	0x3d, r28	; 61
    437c:	8c 01       	movw	r16, r24
    437e:	fa 01       	movw	r30, r20
    4380:	8e e0       	ldi	r24, 0x0E	; 14
    4382:	8c 83       	std	Y+4, r24	; 0x04
    4384:	1a 83       	std	Y+2, r17	; 0x02
    4386:	09 83       	std	Y+1, r16	; 0x01
    4388:	77 ff       	sbrs	r23, 7
    438a:	02 c0       	rjmp	.+4      	; 0x4390 <vsnprintf_P+0x2c>
    438c:	60 e0       	ldi	r22, 0x00	; 0
    438e:	70 e8       	ldi	r23, 0x80	; 128
    4390:	cb 01       	movw	r24, r22
    4392:	01 97       	sbiw	r24, 0x01	; 1
    4394:	9e 83       	std	Y+6, r25	; 0x06
    4396:	8d 83       	std	Y+5, r24	; 0x05
    4398:	a9 01       	movw	r20, r18
    439a:	bf 01       	movw	r22, r30
    439c:	ce 01       	movw	r24, r28
    439e:	01 96       	adiw	r24, 0x01	; 1
    43a0:	0e 94 eb 21 	call	0x43d6	; 0x43d6 <vfprintf>
    43a4:	4d 81       	ldd	r20, Y+5	; 0x05
    43a6:	5e 81       	ldd	r21, Y+6	; 0x06
    43a8:	57 fd       	sbrc	r21, 7
    43aa:	0a c0       	rjmp	.+20     	; 0x43c0 <vsnprintf_P+0x5c>
    43ac:	2f 81       	ldd	r18, Y+7	; 0x07
    43ae:	38 85       	ldd	r19, Y+8	; 0x08
    43b0:	42 17       	cp	r20, r18
    43b2:	53 07       	cpc	r21, r19
    43b4:	0c f4       	brge	.+2      	; 0x43b8 <vsnprintf_P+0x54>
    43b6:	9a 01       	movw	r18, r20
    43b8:	f8 01       	movw	r30, r16
    43ba:	e2 0f       	add	r30, r18
    43bc:	f3 1f       	adc	r31, r19
    43be:	10 82       	st	Z, r1
    43c0:	2e 96       	adiw	r28, 0x0e	; 14
    43c2:	0f b6       	in	r0, 0x3f	; 63
    43c4:	f8 94       	cli
    43c6:	de bf       	out	0x3e, r29	; 62
    43c8:	0f be       	out	0x3f, r0	; 63
    43ca:	cd bf       	out	0x3d, r28	; 61
    43cc:	df 91       	pop	r29
    43ce:	cf 91       	pop	r28
    43d0:	1f 91       	pop	r17
    43d2:	0f 91       	pop	r16
    43d4:	08 95       	ret

000043d6 <vfprintf>:
    43d6:	2f 92       	push	r2
    43d8:	3f 92       	push	r3
    43da:	4f 92       	push	r4
    43dc:	5f 92       	push	r5
    43de:	6f 92       	push	r6
    43e0:	7f 92       	push	r7
    43e2:	8f 92       	push	r8
    43e4:	9f 92       	push	r9
    43e6:	af 92       	push	r10
    43e8:	bf 92       	push	r11
    43ea:	cf 92       	push	r12
    43ec:	df 92       	push	r13
    43ee:	ef 92       	push	r14
    43f0:	ff 92       	push	r15
    43f2:	0f 93       	push	r16
    43f4:	1f 93       	push	r17
    43f6:	cf 93       	push	r28
    43f8:	df 93       	push	r29
    43fa:	cd b7       	in	r28, 0x3d	; 61
    43fc:	de b7       	in	r29, 0x3e	; 62
    43fe:	2b 97       	sbiw	r28, 0x0b	; 11
    4400:	0f b6       	in	r0, 0x3f	; 63
    4402:	f8 94       	cli
    4404:	de bf       	out	0x3e, r29	; 62
    4406:	0f be       	out	0x3f, r0	; 63
    4408:	cd bf       	out	0x3d, r28	; 61
    440a:	6c 01       	movw	r12, r24
    440c:	7b 01       	movw	r14, r22
    440e:	8a 01       	movw	r16, r20
    4410:	fc 01       	movw	r30, r24
    4412:	17 82       	std	Z+7, r1	; 0x07
    4414:	16 82       	std	Z+6, r1	; 0x06
    4416:	83 81       	ldd	r24, Z+3	; 0x03
    4418:	81 ff       	sbrs	r24, 1
    441a:	cc c1       	rjmp	.+920    	; 0x47b4 <vfprintf+0x3de>
    441c:	ce 01       	movw	r24, r28
    441e:	01 96       	adiw	r24, 0x01	; 1
    4420:	3c 01       	movw	r6, r24
    4422:	f6 01       	movw	r30, r12
    4424:	93 81       	ldd	r25, Z+3	; 0x03
    4426:	f7 01       	movw	r30, r14
    4428:	93 fd       	sbrc	r25, 3
    442a:	85 91       	lpm	r24, Z+
    442c:	93 ff       	sbrs	r25, 3
    442e:	81 91       	ld	r24, Z+
    4430:	7f 01       	movw	r14, r30
    4432:	88 23       	and	r24, r24
    4434:	09 f4       	brne	.+2      	; 0x4438 <vfprintf+0x62>
    4436:	ba c1       	rjmp	.+884    	; 0x47ac <vfprintf+0x3d6>
    4438:	85 32       	cpi	r24, 0x25	; 37
    443a:	39 f4       	brne	.+14     	; 0x444a <vfprintf+0x74>
    443c:	93 fd       	sbrc	r25, 3
    443e:	85 91       	lpm	r24, Z+
    4440:	93 ff       	sbrs	r25, 3
    4442:	81 91       	ld	r24, Z+
    4444:	7f 01       	movw	r14, r30
    4446:	85 32       	cpi	r24, 0x25	; 37
    4448:	29 f4       	brne	.+10     	; 0x4454 <vfprintf+0x7e>
    444a:	b6 01       	movw	r22, r12
    444c:	90 e0       	ldi	r25, 0x00	; 0
    444e:	0e 94 0b 24 	call	0x4816	; 0x4816 <fputc>
    4452:	e7 cf       	rjmp	.-50     	; 0x4422 <vfprintf+0x4c>
    4454:	91 2c       	mov	r9, r1
    4456:	21 2c       	mov	r2, r1
    4458:	31 2c       	mov	r3, r1
    445a:	ff e1       	ldi	r31, 0x1F	; 31
    445c:	f3 15       	cp	r31, r3
    445e:	d8 f0       	brcs	.+54     	; 0x4496 <vfprintf+0xc0>
    4460:	8b 32       	cpi	r24, 0x2B	; 43
    4462:	79 f0       	breq	.+30     	; 0x4482 <vfprintf+0xac>
    4464:	38 f4       	brcc	.+14     	; 0x4474 <vfprintf+0x9e>
    4466:	80 32       	cpi	r24, 0x20	; 32
    4468:	79 f0       	breq	.+30     	; 0x4488 <vfprintf+0xb2>
    446a:	83 32       	cpi	r24, 0x23	; 35
    446c:	a1 f4       	brne	.+40     	; 0x4496 <vfprintf+0xc0>
    446e:	23 2d       	mov	r18, r3
    4470:	20 61       	ori	r18, 0x10	; 16
    4472:	1d c0       	rjmp	.+58     	; 0x44ae <vfprintf+0xd8>
    4474:	8d 32       	cpi	r24, 0x2D	; 45
    4476:	61 f0       	breq	.+24     	; 0x4490 <vfprintf+0xba>
    4478:	80 33       	cpi	r24, 0x30	; 48
    447a:	69 f4       	brne	.+26     	; 0x4496 <vfprintf+0xc0>
    447c:	23 2d       	mov	r18, r3
    447e:	21 60       	ori	r18, 0x01	; 1
    4480:	16 c0       	rjmp	.+44     	; 0x44ae <vfprintf+0xd8>
    4482:	83 2d       	mov	r24, r3
    4484:	82 60       	ori	r24, 0x02	; 2
    4486:	38 2e       	mov	r3, r24
    4488:	e3 2d       	mov	r30, r3
    448a:	e4 60       	ori	r30, 0x04	; 4
    448c:	3e 2e       	mov	r3, r30
    448e:	2a c0       	rjmp	.+84     	; 0x44e4 <vfprintf+0x10e>
    4490:	f3 2d       	mov	r31, r3
    4492:	f8 60       	ori	r31, 0x08	; 8
    4494:	1d c0       	rjmp	.+58     	; 0x44d0 <vfprintf+0xfa>
    4496:	37 fc       	sbrc	r3, 7
    4498:	2d c0       	rjmp	.+90     	; 0x44f4 <vfprintf+0x11e>
    449a:	20 ed       	ldi	r18, 0xD0	; 208
    449c:	28 0f       	add	r18, r24
    449e:	2a 30       	cpi	r18, 0x0A	; 10
    44a0:	40 f0       	brcs	.+16     	; 0x44b2 <vfprintf+0xdc>
    44a2:	8e 32       	cpi	r24, 0x2E	; 46
    44a4:	b9 f4       	brne	.+46     	; 0x44d4 <vfprintf+0xfe>
    44a6:	36 fc       	sbrc	r3, 6
    44a8:	81 c1       	rjmp	.+770    	; 0x47ac <vfprintf+0x3d6>
    44aa:	23 2d       	mov	r18, r3
    44ac:	20 64       	ori	r18, 0x40	; 64
    44ae:	32 2e       	mov	r3, r18
    44b0:	19 c0       	rjmp	.+50     	; 0x44e4 <vfprintf+0x10e>
    44b2:	36 fe       	sbrs	r3, 6
    44b4:	06 c0       	rjmp	.+12     	; 0x44c2 <vfprintf+0xec>
    44b6:	8a e0       	ldi	r24, 0x0A	; 10
    44b8:	98 9e       	mul	r9, r24
    44ba:	20 0d       	add	r18, r0
    44bc:	11 24       	eor	r1, r1
    44be:	92 2e       	mov	r9, r18
    44c0:	11 c0       	rjmp	.+34     	; 0x44e4 <vfprintf+0x10e>
    44c2:	ea e0       	ldi	r30, 0x0A	; 10
    44c4:	2e 9e       	mul	r2, r30
    44c6:	20 0d       	add	r18, r0
    44c8:	11 24       	eor	r1, r1
    44ca:	22 2e       	mov	r2, r18
    44cc:	f3 2d       	mov	r31, r3
    44ce:	f0 62       	ori	r31, 0x20	; 32
    44d0:	3f 2e       	mov	r3, r31
    44d2:	08 c0       	rjmp	.+16     	; 0x44e4 <vfprintf+0x10e>
    44d4:	8c 36       	cpi	r24, 0x6C	; 108
    44d6:	21 f4       	brne	.+8      	; 0x44e0 <vfprintf+0x10a>
    44d8:	83 2d       	mov	r24, r3
    44da:	80 68       	ori	r24, 0x80	; 128
    44dc:	38 2e       	mov	r3, r24
    44de:	02 c0       	rjmp	.+4      	; 0x44e4 <vfprintf+0x10e>
    44e0:	88 36       	cpi	r24, 0x68	; 104
    44e2:	41 f4       	brne	.+16     	; 0x44f4 <vfprintf+0x11e>
    44e4:	f7 01       	movw	r30, r14
    44e6:	93 fd       	sbrc	r25, 3
    44e8:	85 91       	lpm	r24, Z+
    44ea:	93 ff       	sbrs	r25, 3
    44ec:	81 91       	ld	r24, Z+
    44ee:	7f 01       	movw	r14, r30
    44f0:	81 11       	cpse	r24, r1
    44f2:	b3 cf       	rjmp	.-154    	; 0x445a <vfprintf+0x84>
    44f4:	98 2f       	mov	r25, r24
    44f6:	9f 7d       	andi	r25, 0xDF	; 223
    44f8:	95 54       	subi	r25, 0x45	; 69
    44fa:	93 30       	cpi	r25, 0x03	; 3
    44fc:	28 f4       	brcc	.+10     	; 0x4508 <vfprintf+0x132>
    44fe:	0c 5f       	subi	r16, 0xFC	; 252
    4500:	1f 4f       	sbci	r17, 0xFF	; 255
    4502:	9f e3       	ldi	r25, 0x3F	; 63
    4504:	99 83       	std	Y+1, r25	; 0x01
    4506:	0d c0       	rjmp	.+26     	; 0x4522 <vfprintf+0x14c>
    4508:	83 36       	cpi	r24, 0x63	; 99
    450a:	31 f0       	breq	.+12     	; 0x4518 <vfprintf+0x142>
    450c:	83 37       	cpi	r24, 0x73	; 115
    450e:	71 f0       	breq	.+28     	; 0x452c <vfprintf+0x156>
    4510:	83 35       	cpi	r24, 0x53	; 83
    4512:	09 f0       	breq	.+2      	; 0x4516 <vfprintf+0x140>
    4514:	59 c0       	rjmp	.+178    	; 0x45c8 <vfprintf+0x1f2>
    4516:	21 c0       	rjmp	.+66     	; 0x455a <vfprintf+0x184>
    4518:	f8 01       	movw	r30, r16
    451a:	80 81       	ld	r24, Z
    451c:	89 83       	std	Y+1, r24	; 0x01
    451e:	0e 5f       	subi	r16, 0xFE	; 254
    4520:	1f 4f       	sbci	r17, 0xFF	; 255
    4522:	88 24       	eor	r8, r8
    4524:	83 94       	inc	r8
    4526:	91 2c       	mov	r9, r1
    4528:	53 01       	movw	r10, r6
    452a:	13 c0       	rjmp	.+38     	; 0x4552 <vfprintf+0x17c>
    452c:	28 01       	movw	r4, r16
    452e:	f2 e0       	ldi	r31, 0x02	; 2
    4530:	4f 0e       	add	r4, r31
    4532:	51 1c       	adc	r5, r1
    4534:	f8 01       	movw	r30, r16
    4536:	a0 80       	ld	r10, Z
    4538:	b1 80       	ldd	r11, Z+1	; 0x01
    453a:	36 fe       	sbrs	r3, 6
    453c:	03 c0       	rjmp	.+6      	; 0x4544 <vfprintf+0x16e>
    453e:	69 2d       	mov	r22, r9
    4540:	70 e0       	ldi	r23, 0x00	; 0
    4542:	02 c0       	rjmp	.+4      	; 0x4548 <vfprintf+0x172>
    4544:	6f ef       	ldi	r22, 0xFF	; 255
    4546:	7f ef       	ldi	r23, 0xFF	; 255
    4548:	c5 01       	movw	r24, r10
    454a:	0e 94 00 24 	call	0x4800	; 0x4800 <strnlen>
    454e:	4c 01       	movw	r8, r24
    4550:	82 01       	movw	r16, r4
    4552:	f3 2d       	mov	r31, r3
    4554:	ff 77       	andi	r31, 0x7F	; 127
    4556:	3f 2e       	mov	r3, r31
    4558:	16 c0       	rjmp	.+44     	; 0x4586 <vfprintf+0x1b0>
    455a:	28 01       	movw	r4, r16
    455c:	22 e0       	ldi	r18, 0x02	; 2
    455e:	42 0e       	add	r4, r18
    4560:	51 1c       	adc	r5, r1
    4562:	f8 01       	movw	r30, r16
    4564:	a0 80       	ld	r10, Z
    4566:	b1 80       	ldd	r11, Z+1	; 0x01
    4568:	36 fe       	sbrs	r3, 6
    456a:	03 c0       	rjmp	.+6      	; 0x4572 <vfprintf+0x19c>
    456c:	69 2d       	mov	r22, r9
    456e:	70 e0       	ldi	r23, 0x00	; 0
    4570:	02 c0       	rjmp	.+4      	; 0x4576 <vfprintf+0x1a0>
    4572:	6f ef       	ldi	r22, 0xFF	; 255
    4574:	7f ef       	ldi	r23, 0xFF	; 255
    4576:	c5 01       	movw	r24, r10
    4578:	0e 94 f5 23 	call	0x47ea	; 0x47ea <strnlen_P>
    457c:	4c 01       	movw	r8, r24
    457e:	f3 2d       	mov	r31, r3
    4580:	f0 68       	ori	r31, 0x80	; 128
    4582:	3f 2e       	mov	r3, r31
    4584:	82 01       	movw	r16, r4
    4586:	33 fc       	sbrc	r3, 3
    4588:	1b c0       	rjmp	.+54     	; 0x45c0 <vfprintf+0x1ea>
    458a:	82 2d       	mov	r24, r2
    458c:	90 e0       	ldi	r25, 0x00	; 0
    458e:	88 16       	cp	r8, r24
    4590:	99 06       	cpc	r9, r25
    4592:	b0 f4       	brcc	.+44     	; 0x45c0 <vfprintf+0x1ea>
    4594:	b6 01       	movw	r22, r12
    4596:	80 e2       	ldi	r24, 0x20	; 32
    4598:	90 e0       	ldi	r25, 0x00	; 0
    459a:	0e 94 0b 24 	call	0x4816	; 0x4816 <fputc>
    459e:	2a 94       	dec	r2
    45a0:	f4 cf       	rjmp	.-24     	; 0x458a <vfprintf+0x1b4>
    45a2:	f5 01       	movw	r30, r10
    45a4:	37 fc       	sbrc	r3, 7
    45a6:	85 91       	lpm	r24, Z+
    45a8:	37 fe       	sbrs	r3, 7
    45aa:	81 91       	ld	r24, Z+
    45ac:	5f 01       	movw	r10, r30
    45ae:	b6 01       	movw	r22, r12
    45b0:	90 e0       	ldi	r25, 0x00	; 0
    45b2:	0e 94 0b 24 	call	0x4816	; 0x4816 <fputc>
    45b6:	21 10       	cpse	r2, r1
    45b8:	2a 94       	dec	r2
    45ba:	21 e0       	ldi	r18, 0x01	; 1
    45bc:	82 1a       	sub	r8, r18
    45be:	91 08       	sbc	r9, r1
    45c0:	81 14       	cp	r8, r1
    45c2:	91 04       	cpc	r9, r1
    45c4:	71 f7       	brne	.-36     	; 0x45a2 <vfprintf+0x1cc>
    45c6:	e8 c0       	rjmp	.+464    	; 0x4798 <vfprintf+0x3c2>
    45c8:	84 36       	cpi	r24, 0x64	; 100
    45ca:	11 f0       	breq	.+4      	; 0x45d0 <vfprintf+0x1fa>
    45cc:	89 36       	cpi	r24, 0x69	; 105
    45ce:	41 f5       	brne	.+80     	; 0x4620 <vfprintf+0x24a>
    45d0:	f8 01       	movw	r30, r16
    45d2:	37 fe       	sbrs	r3, 7
    45d4:	07 c0       	rjmp	.+14     	; 0x45e4 <vfprintf+0x20e>
    45d6:	60 81       	ld	r22, Z
    45d8:	71 81       	ldd	r23, Z+1	; 0x01
    45da:	82 81       	ldd	r24, Z+2	; 0x02
    45dc:	93 81       	ldd	r25, Z+3	; 0x03
    45de:	0c 5f       	subi	r16, 0xFC	; 252
    45e0:	1f 4f       	sbci	r17, 0xFF	; 255
    45e2:	08 c0       	rjmp	.+16     	; 0x45f4 <vfprintf+0x21e>
    45e4:	60 81       	ld	r22, Z
    45e6:	71 81       	ldd	r23, Z+1	; 0x01
    45e8:	07 2e       	mov	r0, r23
    45ea:	00 0c       	add	r0, r0
    45ec:	88 0b       	sbc	r24, r24
    45ee:	99 0b       	sbc	r25, r25
    45f0:	0e 5f       	subi	r16, 0xFE	; 254
    45f2:	1f 4f       	sbci	r17, 0xFF	; 255
    45f4:	f3 2d       	mov	r31, r3
    45f6:	ff 76       	andi	r31, 0x6F	; 111
    45f8:	3f 2e       	mov	r3, r31
    45fa:	97 ff       	sbrs	r25, 7
    45fc:	09 c0       	rjmp	.+18     	; 0x4610 <vfprintf+0x23a>
    45fe:	90 95       	com	r25
    4600:	80 95       	com	r24
    4602:	70 95       	com	r23
    4604:	61 95       	neg	r22
    4606:	7f 4f       	sbci	r23, 0xFF	; 255
    4608:	8f 4f       	sbci	r24, 0xFF	; 255
    460a:	9f 4f       	sbci	r25, 0xFF	; 255
    460c:	f0 68       	ori	r31, 0x80	; 128
    460e:	3f 2e       	mov	r3, r31
    4610:	2a e0       	ldi	r18, 0x0A	; 10
    4612:	30 e0       	ldi	r19, 0x00	; 0
    4614:	a3 01       	movw	r20, r6
    4616:	0e 94 47 24 	call	0x488e	; 0x488e <__ultoa_invert>
    461a:	88 2e       	mov	r8, r24
    461c:	86 18       	sub	r8, r6
    461e:	45 c0       	rjmp	.+138    	; 0x46aa <vfprintf+0x2d4>
    4620:	85 37       	cpi	r24, 0x75	; 117
    4622:	31 f4       	brne	.+12     	; 0x4630 <vfprintf+0x25a>
    4624:	23 2d       	mov	r18, r3
    4626:	2f 7e       	andi	r18, 0xEF	; 239
    4628:	b2 2e       	mov	r11, r18
    462a:	2a e0       	ldi	r18, 0x0A	; 10
    462c:	30 e0       	ldi	r19, 0x00	; 0
    462e:	25 c0       	rjmp	.+74     	; 0x467a <vfprintf+0x2a4>
    4630:	93 2d       	mov	r25, r3
    4632:	99 7f       	andi	r25, 0xF9	; 249
    4634:	b9 2e       	mov	r11, r25
    4636:	8f 36       	cpi	r24, 0x6F	; 111
    4638:	c1 f0       	breq	.+48     	; 0x466a <vfprintf+0x294>
    463a:	18 f4       	brcc	.+6      	; 0x4642 <vfprintf+0x26c>
    463c:	88 35       	cpi	r24, 0x58	; 88
    463e:	79 f0       	breq	.+30     	; 0x465e <vfprintf+0x288>
    4640:	b5 c0       	rjmp	.+362    	; 0x47ac <vfprintf+0x3d6>
    4642:	80 37       	cpi	r24, 0x70	; 112
    4644:	19 f0       	breq	.+6      	; 0x464c <vfprintf+0x276>
    4646:	88 37       	cpi	r24, 0x78	; 120
    4648:	21 f0       	breq	.+8      	; 0x4652 <vfprintf+0x27c>
    464a:	b0 c0       	rjmp	.+352    	; 0x47ac <vfprintf+0x3d6>
    464c:	e9 2f       	mov	r30, r25
    464e:	e0 61       	ori	r30, 0x10	; 16
    4650:	be 2e       	mov	r11, r30
    4652:	b4 fe       	sbrs	r11, 4
    4654:	0d c0       	rjmp	.+26     	; 0x4670 <vfprintf+0x29a>
    4656:	fb 2d       	mov	r31, r11
    4658:	f4 60       	ori	r31, 0x04	; 4
    465a:	bf 2e       	mov	r11, r31
    465c:	09 c0       	rjmp	.+18     	; 0x4670 <vfprintf+0x29a>
    465e:	34 fe       	sbrs	r3, 4
    4660:	0a c0       	rjmp	.+20     	; 0x4676 <vfprintf+0x2a0>
    4662:	29 2f       	mov	r18, r25
    4664:	26 60       	ori	r18, 0x06	; 6
    4666:	b2 2e       	mov	r11, r18
    4668:	06 c0       	rjmp	.+12     	; 0x4676 <vfprintf+0x2a0>
    466a:	28 e0       	ldi	r18, 0x08	; 8
    466c:	30 e0       	ldi	r19, 0x00	; 0
    466e:	05 c0       	rjmp	.+10     	; 0x467a <vfprintf+0x2a4>
    4670:	20 e1       	ldi	r18, 0x10	; 16
    4672:	30 e0       	ldi	r19, 0x00	; 0
    4674:	02 c0       	rjmp	.+4      	; 0x467a <vfprintf+0x2a4>
    4676:	20 e1       	ldi	r18, 0x10	; 16
    4678:	32 e0       	ldi	r19, 0x02	; 2
    467a:	f8 01       	movw	r30, r16
    467c:	b7 fe       	sbrs	r11, 7
    467e:	07 c0       	rjmp	.+14     	; 0x468e <vfprintf+0x2b8>
    4680:	60 81       	ld	r22, Z
    4682:	71 81       	ldd	r23, Z+1	; 0x01
    4684:	82 81       	ldd	r24, Z+2	; 0x02
    4686:	93 81       	ldd	r25, Z+3	; 0x03
    4688:	0c 5f       	subi	r16, 0xFC	; 252
    468a:	1f 4f       	sbci	r17, 0xFF	; 255
    468c:	06 c0       	rjmp	.+12     	; 0x469a <vfprintf+0x2c4>
    468e:	60 81       	ld	r22, Z
    4690:	71 81       	ldd	r23, Z+1	; 0x01
    4692:	80 e0       	ldi	r24, 0x00	; 0
    4694:	90 e0       	ldi	r25, 0x00	; 0
    4696:	0e 5f       	subi	r16, 0xFE	; 254
    4698:	1f 4f       	sbci	r17, 0xFF	; 255
    469a:	a3 01       	movw	r20, r6
    469c:	0e 94 47 24 	call	0x488e	; 0x488e <__ultoa_invert>
    46a0:	88 2e       	mov	r8, r24
    46a2:	86 18       	sub	r8, r6
    46a4:	fb 2d       	mov	r31, r11
    46a6:	ff 77       	andi	r31, 0x7F	; 127
    46a8:	3f 2e       	mov	r3, r31
    46aa:	36 fe       	sbrs	r3, 6
    46ac:	0d c0       	rjmp	.+26     	; 0x46c8 <vfprintf+0x2f2>
    46ae:	23 2d       	mov	r18, r3
    46b0:	2e 7f       	andi	r18, 0xFE	; 254
    46b2:	a2 2e       	mov	r10, r18
    46b4:	89 14       	cp	r8, r9
    46b6:	58 f4       	brcc	.+22     	; 0x46ce <vfprintf+0x2f8>
    46b8:	34 fe       	sbrs	r3, 4
    46ba:	0b c0       	rjmp	.+22     	; 0x46d2 <vfprintf+0x2fc>
    46bc:	32 fc       	sbrc	r3, 2
    46be:	09 c0       	rjmp	.+18     	; 0x46d2 <vfprintf+0x2fc>
    46c0:	83 2d       	mov	r24, r3
    46c2:	8e 7e       	andi	r24, 0xEE	; 238
    46c4:	a8 2e       	mov	r10, r24
    46c6:	05 c0       	rjmp	.+10     	; 0x46d2 <vfprintf+0x2fc>
    46c8:	b8 2c       	mov	r11, r8
    46ca:	a3 2c       	mov	r10, r3
    46cc:	03 c0       	rjmp	.+6      	; 0x46d4 <vfprintf+0x2fe>
    46ce:	b8 2c       	mov	r11, r8
    46d0:	01 c0       	rjmp	.+2      	; 0x46d4 <vfprintf+0x2fe>
    46d2:	b9 2c       	mov	r11, r9
    46d4:	a4 fe       	sbrs	r10, 4
    46d6:	0f c0       	rjmp	.+30     	; 0x46f6 <vfprintf+0x320>
    46d8:	fe 01       	movw	r30, r28
    46da:	e8 0d       	add	r30, r8
    46dc:	f1 1d       	adc	r31, r1
    46de:	80 81       	ld	r24, Z
    46e0:	80 33       	cpi	r24, 0x30	; 48
    46e2:	21 f4       	brne	.+8      	; 0x46ec <vfprintf+0x316>
    46e4:	9a 2d       	mov	r25, r10
    46e6:	99 7e       	andi	r25, 0xE9	; 233
    46e8:	a9 2e       	mov	r10, r25
    46ea:	09 c0       	rjmp	.+18     	; 0x46fe <vfprintf+0x328>
    46ec:	a2 fe       	sbrs	r10, 2
    46ee:	06 c0       	rjmp	.+12     	; 0x46fc <vfprintf+0x326>
    46f0:	b3 94       	inc	r11
    46f2:	b3 94       	inc	r11
    46f4:	04 c0       	rjmp	.+8      	; 0x46fe <vfprintf+0x328>
    46f6:	8a 2d       	mov	r24, r10
    46f8:	86 78       	andi	r24, 0x86	; 134
    46fa:	09 f0       	breq	.+2      	; 0x46fe <vfprintf+0x328>
    46fc:	b3 94       	inc	r11
    46fe:	a3 fc       	sbrc	r10, 3
    4700:	11 c0       	rjmp	.+34     	; 0x4724 <vfprintf+0x34e>
    4702:	a0 fe       	sbrs	r10, 0
    4704:	06 c0       	rjmp	.+12     	; 0x4712 <vfprintf+0x33c>
    4706:	b2 14       	cp	r11, r2
    4708:	88 f4       	brcc	.+34     	; 0x472c <vfprintf+0x356>
    470a:	28 0c       	add	r2, r8
    470c:	92 2c       	mov	r9, r2
    470e:	9b 18       	sub	r9, r11
    4710:	0e c0       	rjmp	.+28     	; 0x472e <vfprintf+0x358>
    4712:	b2 14       	cp	r11, r2
    4714:	60 f4       	brcc	.+24     	; 0x472e <vfprintf+0x358>
    4716:	b6 01       	movw	r22, r12
    4718:	80 e2       	ldi	r24, 0x20	; 32
    471a:	90 e0       	ldi	r25, 0x00	; 0
    471c:	0e 94 0b 24 	call	0x4816	; 0x4816 <fputc>
    4720:	b3 94       	inc	r11
    4722:	f7 cf       	rjmp	.-18     	; 0x4712 <vfprintf+0x33c>
    4724:	b2 14       	cp	r11, r2
    4726:	18 f4       	brcc	.+6      	; 0x472e <vfprintf+0x358>
    4728:	2b 18       	sub	r2, r11
    472a:	02 c0       	rjmp	.+4      	; 0x4730 <vfprintf+0x35a>
    472c:	98 2c       	mov	r9, r8
    472e:	21 2c       	mov	r2, r1
    4730:	a4 fe       	sbrs	r10, 4
    4732:	10 c0       	rjmp	.+32     	; 0x4754 <vfprintf+0x37e>
    4734:	b6 01       	movw	r22, r12
    4736:	80 e3       	ldi	r24, 0x30	; 48
    4738:	90 e0       	ldi	r25, 0x00	; 0
    473a:	0e 94 0b 24 	call	0x4816	; 0x4816 <fputc>
    473e:	a2 fe       	sbrs	r10, 2
    4740:	17 c0       	rjmp	.+46     	; 0x4770 <vfprintf+0x39a>
    4742:	a1 fc       	sbrc	r10, 1
    4744:	03 c0       	rjmp	.+6      	; 0x474c <vfprintf+0x376>
    4746:	88 e7       	ldi	r24, 0x78	; 120
    4748:	90 e0       	ldi	r25, 0x00	; 0
    474a:	02 c0       	rjmp	.+4      	; 0x4750 <vfprintf+0x37a>
    474c:	88 e5       	ldi	r24, 0x58	; 88
    474e:	90 e0       	ldi	r25, 0x00	; 0
    4750:	b6 01       	movw	r22, r12
    4752:	0c c0       	rjmp	.+24     	; 0x476c <vfprintf+0x396>
    4754:	8a 2d       	mov	r24, r10
    4756:	86 78       	andi	r24, 0x86	; 134
    4758:	59 f0       	breq	.+22     	; 0x4770 <vfprintf+0x39a>
    475a:	a1 fe       	sbrs	r10, 1
    475c:	02 c0       	rjmp	.+4      	; 0x4762 <vfprintf+0x38c>
    475e:	8b e2       	ldi	r24, 0x2B	; 43
    4760:	01 c0       	rjmp	.+2      	; 0x4764 <vfprintf+0x38e>
    4762:	80 e2       	ldi	r24, 0x20	; 32
    4764:	a7 fc       	sbrc	r10, 7
    4766:	8d e2       	ldi	r24, 0x2D	; 45
    4768:	b6 01       	movw	r22, r12
    476a:	90 e0       	ldi	r25, 0x00	; 0
    476c:	0e 94 0b 24 	call	0x4816	; 0x4816 <fputc>
    4770:	89 14       	cp	r8, r9
    4772:	38 f4       	brcc	.+14     	; 0x4782 <vfprintf+0x3ac>
    4774:	b6 01       	movw	r22, r12
    4776:	80 e3       	ldi	r24, 0x30	; 48
    4778:	90 e0       	ldi	r25, 0x00	; 0
    477a:	0e 94 0b 24 	call	0x4816	; 0x4816 <fputc>
    477e:	9a 94       	dec	r9
    4780:	f7 cf       	rjmp	.-18     	; 0x4770 <vfprintf+0x39a>
    4782:	8a 94       	dec	r8
    4784:	f3 01       	movw	r30, r6
    4786:	e8 0d       	add	r30, r8
    4788:	f1 1d       	adc	r31, r1
    478a:	80 81       	ld	r24, Z
    478c:	b6 01       	movw	r22, r12
    478e:	90 e0       	ldi	r25, 0x00	; 0
    4790:	0e 94 0b 24 	call	0x4816	; 0x4816 <fputc>
    4794:	81 10       	cpse	r8, r1
    4796:	f5 cf       	rjmp	.-22     	; 0x4782 <vfprintf+0x3ac>
    4798:	22 20       	and	r2, r2
    479a:	09 f4       	brne	.+2      	; 0x479e <vfprintf+0x3c8>
    479c:	42 ce       	rjmp	.-892    	; 0x4422 <vfprintf+0x4c>
    479e:	b6 01       	movw	r22, r12
    47a0:	80 e2       	ldi	r24, 0x20	; 32
    47a2:	90 e0       	ldi	r25, 0x00	; 0
    47a4:	0e 94 0b 24 	call	0x4816	; 0x4816 <fputc>
    47a8:	2a 94       	dec	r2
    47aa:	f6 cf       	rjmp	.-20     	; 0x4798 <vfprintf+0x3c2>
    47ac:	f6 01       	movw	r30, r12
    47ae:	86 81       	ldd	r24, Z+6	; 0x06
    47b0:	97 81       	ldd	r25, Z+7	; 0x07
    47b2:	02 c0       	rjmp	.+4      	; 0x47b8 <vfprintf+0x3e2>
    47b4:	8f ef       	ldi	r24, 0xFF	; 255
    47b6:	9f ef       	ldi	r25, 0xFF	; 255
    47b8:	2b 96       	adiw	r28, 0x0b	; 11
    47ba:	0f b6       	in	r0, 0x3f	; 63
    47bc:	f8 94       	cli
    47be:	de bf       	out	0x3e, r29	; 62
    47c0:	0f be       	out	0x3f, r0	; 63
    47c2:	cd bf       	out	0x3d, r28	; 61
    47c4:	df 91       	pop	r29
    47c6:	cf 91       	pop	r28
    47c8:	1f 91       	pop	r17
    47ca:	0f 91       	pop	r16
    47cc:	ff 90       	pop	r15
    47ce:	ef 90       	pop	r14
    47d0:	df 90       	pop	r13
    47d2:	cf 90       	pop	r12
    47d4:	bf 90       	pop	r11
    47d6:	af 90       	pop	r10
    47d8:	9f 90       	pop	r9
    47da:	8f 90       	pop	r8
    47dc:	7f 90       	pop	r7
    47de:	6f 90       	pop	r6
    47e0:	5f 90       	pop	r5
    47e2:	4f 90       	pop	r4
    47e4:	3f 90       	pop	r3
    47e6:	2f 90       	pop	r2
    47e8:	08 95       	ret

000047ea <strnlen_P>:
    47ea:	fc 01       	movw	r30, r24
    47ec:	05 90       	lpm	r0, Z+
    47ee:	61 50       	subi	r22, 0x01	; 1
    47f0:	70 40       	sbci	r23, 0x00	; 0
    47f2:	01 10       	cpse	r0, r1
    47f4:	d8 f7       	brcc	.-10     	; 0x47ec <strnlen_P+0x2>
    47f6:	80 95       	com	r24
    47f8:	90 95       	com	r25
    47fa:	8e 0f       	add	r24, r30
    47fc:	9f 1f       	adc	r25, r31
    47fe:	08 95       	ret

00004800 <strnlen>:
    4800:	fc 01       	movw	r30, r24
    4802:	61 50       	subi	r22, 0x01	; 1
    4804:	70 40       	sbci	r23, 0x00	; 0
    4806:	01 90       	ld	r0, Z+
    4808:	01 10       	cpse	r0, r1
    480a:	d8 f7       	brcc	.-10     	; 0x4802 <strnlen+0x2>
    480c:	80 95       	com	r24
    480e:	90 95       	com	r25
    4810:	8e 0f       	add	r24, r30
    4812:	9f 1f       	adc	r25, r31
    4814:	08 95       	ret

00004816 <fputc>:
    4816:	0f 93       	push	r16
    4818:	1f 93       	push	r17
    481a:	cf 93       	push	r28
    481c:	df 93       	push	r29
    481e:	fb 01       	movw	r30, r22
    4820:	23 81       	ldd	r18, Z+3	; 0x03
    4822:	21 fd       	sbrc	r18, 1
    4824:	03 c0       	rjmp	.+6      	; 0x482c <fputc+0x16>
    4826:	8f ef       	ldi	r24, 0xFF	; 255
    4828:	9f ef       	ldi	r25, 0xFF	; 255
    482a:	2c c0       	rjmp	.+88     	; 0x4884 <fputc+0x6e>
    482c:	22 ff       	sbrs	r18, 2
    482e:	16 c0       	rjmp	.+44     	; 0x485c <fputc+0x46>
    4830:	46 81       	ldd	r20, Z+6	; 0x06
    4832:	57 81       	ldd	r21, Z+7	; 0x07
    4834:	24 81       	ldd	r18, Z+4	; 0x04
    4836:	35 81       	ldd	r19, Z+5	; 0x05
    4838:	42 17       	cp	r20, r18
    483a:	53 07       	cpc	r21, r19
    483c:	44 f4       	brge	.+16     	; 0x484e <fputc+0x38>
    483e:	a0 81       	ld	r26, Z
    4840:	b1 81       	ldd	r27, Z+1	; 0x01
    4842:	9d 01       	movw	r18, r26
    4844:	2f 5f       	subi	r18, 0xFF	; 255
    4846:	3f 4f       	sbci	r19, 0xFF	; 255
    4848:	31 83       	std	Z+1, r19	; 0x01
    484a:	20 83       	st	Z, r18
    484c:	8c 93       	st	X, r24
    484e:	26 81       	ldd	r18, Z+6	; 0x06
    4850:	37 81       	ldd	r19, Z+7	; 0x07
    4852:	2f 5f       	subi	r18, 0xFF	; 255
    4854:	3f 4f       	sbci	r19, 0xFF	; 255
    4856:	37 83       	std	Z+7, r19	; 0x07
    4858:	26 83       	std	Z+6, r18	; 0x06
    485a:	14 c0       	rjmp	.+40     	; 0x4884 <fputc+0x6e>
    485c:	8b 01       	movw	r16, r22
    485e:	ec 01       	movw	r28, r24
    4860:	fb 01       	movw	r30, r22
    4862:	00 84       	ldd	r0, Z+8	; 0x08
    4864:	f1 85       	ldd	r31, Z+9	; 0x09
    4866:	e0 2d       	mov	r30, r0
    4868:	09 95       	icall
    486a:	89 2b       	or	r24, r25
    486c:	e1 f6       	brne	.-72     	; 0x4826 <fputc+0x10>
    486e:	d8 01       	movw	r26, r16
    4870:	16 96       	adiw	r26, 0x06	; 6
    4872:	8d 91       	ld	r24, X+
    4874:	9c 91       	ld	r25, X
    4876:	17 97       	sbiw	r26, 0x07	; 7
    4878:	01 96       	adiw	r24, 0x01	; 1
    487a:	17 96       	adiw	r26, 0x07	; 7
    487c:	9c 93       	st	X, r25
    487e:	8e 93       	st	-X, r24
    4880:	16 97       	sbiw	r26, 0x06	; 6
    4882:	ce 01       	movw	r24, r28
    4884:	df 91       	pop	r29
    4886:	cf 91       	pop	r28
    4888:	1f 91       	pop	r17
    488a:	0f 91       	pop	r16
    488c:	08 95       	ret

0000488e <__ultoa_invert>:
    488e:	fa 01       	movw	r30, r20
    4890:	aa 27       	eor	r26, r26
    4892:	28 30       	cpi	r18, 0x08	; 8
    4894:	51 f1       	breq	.+84     	; 0x48ea <__ultoa_invert+0x5c>
    4896:	20 31       	cpi	r18, 0x10	; 16
    4898:	81 f1       	breq	.+96     	; 0x48fa <__ultoa_invert+0x6c>
    489a:	e8 94       	clt
    489c:	6f 93       	push	r22
    489e:	6e 7f       	andi	r22, 0xFE	; 254
    48a0:	6e 5f       	subi	r22, 0xFE	; 254
    48a2:	7f 4f       	sbci	r23, 0xFF	; 255
    48a4:	8f 4f       	sbci	r24, 0xFF	; 255
    48a6:	9f 4f       	sbci	r25, 0xFF	; 255
    48a8:	af 4f       	sbci	r26, 0xFF	; 255
    48aa:	b1 e0       	ldi	r27, 0x01	; 1
    48ac:	3e d0       	rcall	.+124    	; 0x492a <__ultoa_invert+0x9c>
    48ae:	b4 e0       	ldi	r27, 0x04	; 4
    48b0:	3c d0       	rcall	.+120    	; 0x492a <__ultoa_invert+0x9c>
    48b2:	67 0f       	add	r22, r23
    48b4:	78 1f       	adc	r23, r24
    48b6:	89 1f       	adc	r24, r25
    48b8:	9a 1f       	adc	r25, r26
    48ba:	a1 1d       	adc	r26, r1
    48bc:	68 0f       	add	r22, r24
    48be:	79 1f       	adc	r23, r25
    48c0:	8a 1f       	adc	r24, r26
    48c2:	91 1d       	adc	r25, r1
    48c4:	a1 1d       	adc	r26, r1
    48c6:	6a 0f       	add	r22, r26
    48c8:	71 1d       	adc	r23, r1
    48ca:	81 1d       	adc	r24, r1
    48cc:	91 1d       	adc	r25, r1
    48ce:	a1 1d       	adc	r26, r1
    48d0:	20 d0       	rcall	.+64     	; 0x4912 <__ultoa_invert+0x84>
    48d2:	09 f4       	brne	.+2      	; 0x48d6 <__ultoa_invert+0x48>
    48d4:	68 94       	set
    48d6:	3f 91       	pop	r19
    48d8:	2a e0       	ldi	r18, 0x0A	; 10
    48da:	26 9f       	mul	r18, r22
    48dc:	11 24       	eor	r1, r1
    48de:	30 19       	sub	r19, r0
    48e0:	30 5d       	subi	r19, 0xD0	; 208
    48e2:	31 93       	st	Z+, r19
    48e4:	de f6       	brtc	.-74     	; 0x489c <__ultoa_invert+0xe>
    48e6:	cf 01       	movw	r24, r30
    48e8:	08 95       	ret
    48ea:	46 2f       	mov	r20, r22
    48ec:	47 70       	andi	r20, 0x07	; 7
    48ee:	40 5d       	subi	r20, 0xD0	; 208
    48f0:	41 93       	st	Z+, r20
    48f2:	b3 e0       	ldi	r27, 0x03	; 3
    48f4:	0f d0       	rcall	.+30     	; 0x4914 <__ultoa_invert+0x86>
    48f6:	c9 f7       	brne	.-14     	; 0x48ea <__ultoa_invert+0x5c>
    48f8:	f6 cf       	rjmp	.-20     	; 0x48e6 <__ultoa_invert+0x58>
    48fa:	46 2f       	mov	r20, r22
    48fc:	4f 70       	andi	r20, 0x0F	; 15
    48fe:	40 5d       	subi	r20, 0xD0	; 208
    4900:	4a 33       	cpi	r20, 0x3A	; 58
    4902:	18 f0       	brcs	.+6      	; 0x490a <__ultoa_invert+0x7c>
    4904:	49 5d       	subi	r20, 0xD9	; 217
    4906:	31 fd       	sbrc	r19, 1
    4908:	40 52       	subi	r20, 0x20	; 32
    490a:	41 93       	st	Z+, r20
    490c:	02 d0       	rcall	.+4      	; 0x4912 <__ultoa_invert+0x84>
    490e:	a9 f7       	brne	.-22     	; 0x48fa <__ultoa_invert+0x6c>
    4910:	ea cf       	rjmp	.-44     	; 0x48e6 <__ultoa_invert+0x58>
    4912:	b4 e0       	ldi	r27, 0x04	; 4
    4914:	a6 95       	lsr	r26
    4916:	97 95       	ror	r25
    4918:	87 95       	ror	r24
    491a:	77 95       	ror	r23
    491c:	67 95       	ror	r22
    491e:	ba 95       	dec	r27
    4920:	c9 f7       	brne	.-14     	; 0x4914 <__ultoa_invert+0x86>
    4922:	00 97       	sbiw	r24, 0x00	; 0
    4924:	61 05       	cpc	r22, r1
    4926:	71 05       	cpc	r23, r1
    4928:	08 95       	ret
    492a:	9b 01       	movw	r18, r22
    492c:	ac 01       	movw	r20, r24
    492e:	0a 2e       	mov	r0, r26
    4930:	06 94       	lsr	r0
    4932:	57 95       	ror	r21
    4934:	47 95       	ror	r20
    4936:	37 95       	ror	r19
    4938:	27 95       	ror	r18
    493a:	ba 95       	dec	r27
    493c:	c9 f7       	brne	.-14     	; 0x4930 <__ultoa_invert+0xa2>
    493e:	62 0f       	add	r22, r18
    4940:	73 1f       	adc	r23, r19
    4942:	84 1f       	adc	r24, r20
    4944:	95 1f       	adc	r25, r21
    4946:	a0 1d       	adc	r26, r0
    4948:	08 95       	ret

0000494a <_exit>:
    494a:	f8 94       	cli

0000494c <__stop_program>:
    494c:	ff cf       	rjmp	.-2      	; 0x494c <__stop_program>
